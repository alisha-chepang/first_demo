
First_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098bc  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  080099f4  080099f4  0000a9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c70  08009c70  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  08009c70  08009c70  0000ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c78  08009c78  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c78  08009c78  0000ac78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c7c  08009c7c  0000ac7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08009c80  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000010  08009c90  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08009c90  0000b334  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e919  00000000  00000000  0000b03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004058  00000000  00000000  00029953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d58  00000000  00000000  0002d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001687  00000000  00000000  0002f708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020826  00000000  00000000  00030d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dca1  00000000  00000000  000515b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3b9c  00000000  00000000  0006f256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132df2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b64  00000000  00000000  00132e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0013a99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000010 	.word	0x20000010
 8000154:	00000000 	.word	0x00000000
 8000158:	080099dc 	.word	0x080099dc

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000014 	.word	0x20000014
 8000174:	080099dc 	.word	0x080099dc

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b96a 	b.w	8000464 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9d08      	ldr	r5, [sp, #32]
 80001ae:	460c      	mov	r4, r1
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d14e      	bne.n	8000252 <__udivmoddi4+0xaa>
 80001b4:	4694      	mov	ip, r2
 80001b6:	458c      	cmp	ip, r1
 80001b8:	4686      	mov	lr, r0
 80001ba:	fab2 f282 	clz	r2, r2
 80001be:	d962      	bls.n	8000286 <__udivmoddi4+0xde>
 80001c0:	b14a      	cbz	r2, 80001d6 <__udivmoddi4+0x2e>
 80001c2:	f1c2 0320 	rsb	r3, r2, #32
 80001c6:	4091      	lsls	r1, r2
 80001c8:	fa20 f303 	lsr.w	r3, r0, r3
 80001cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d0:	4319      	orrs	r1, r3
 80001d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80001d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001da:	fa1f f68c 	uxth.w	r6, ip
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001e6:	fb07 1114 	mls	r1, r7, r4, r1
 80001ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001ee:	fb04 f106 	mul.w	r1, r4, r6
 80001f2:	4299      	cmp	r1, r3
 80001f4:	d90a      	bls.n	800020c <__udivmoddi4+0x64>
 80001f6:	eb1c 0303 	adds.w	r3, ip, r3
 80001fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80001fe:	f080 8112 	bcs.w	8000426 <__udivmoddi4+0x27e>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 810f 	bls.w	8000426 <__udivmoddi4+0x27e>
 8000208:	3c02      	subs	r4, #2
 800020a:	4463      	add	r3, ip
 800020c:	1a59      	subs	r1, r3, r1
 800020e:	fa1f f38e 	uxth.w	r3, lr
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800021e:	fb00 f606 	mul.w	r6, r0, r6
 8000222:	429e      	cmp	r6, r3
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x94>
 8000226:	eb1c 0303 	adds.w	r3, ip, r3
 800022a:	f100 31ff 	add.w	r1, r0, #4294967295
 800022e:	f080 80fc 	bcs.w	800042a <__udivmoddi4+0x282>
 8000232:	429e      	cmp	r6, r3
 8000234:	f240 80f9 	bls.w	800042a <__udivmoddi4+0x282>
 8000238:	4463      	add	r3, ip
 800023a:	3802      	subs	r0, #2
 800023c:	1b9b      	subs	r3, r3, r6
 800023e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000242:	2100      	movs	r1, #0
 8000244:	b11d      	cbz	r5, 800024e <__udivmoddi4+0xa6>
 8000246:	40d3      	lsrs	r3, r2
 8000248:	2200      	movs	r2, #0
 800024a:	e9c5 3200 	strd	r3, r2, [r5]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d905      	bls.n	8000262 <__udivmoddi4+0xba>
 8000256:	b10d      	cbz	r5, 800025c <__udivmoddi4+0xb4>
 8000258:	e9c5 0100 	strd	r0, r1, [r5]
 800025c:	2100      	movs	r1, #0
 800025e:	4608      	mov	r0, r1
 8000260:	e7f5      	b.n	800024e <__udivmoddi4+0xa6>
 8000262:	fab3 f183 	clz	r1, r3
 8000266:	2900      	cmp	r1, #0
 8000268:	d146      	bne.n	80002f8 <__udivmoddi4+0x150>
 800026a:	42a3      	cmp	r3, r4
 800026c:	d302      	bcc.n	8000274 <__udivmoddi4+0xcc>
 800026e:	4290      	cmp	r0, r2
 8000270:	f0c0 80f0 	bcc.w	8000454 <__udivmoddi4+0x2ac>
 8000274:	1a86      	subs	r6, r0, r2
 8000276:	eb64 0303 	sbc.w	r3, r4, r3
 800027a:	2001      	movs	r0, #1
 800027c:	2d00      	cmp	r5, #0
 800027e:	d0e6      	beq.n	800024e <__udivmoddi4+0xa6>
 8000280:	e9c5 6300 	strd	r6, r3, [r5]
 8000284:	e7e3      	b.n	800024e <__udivmoddi4+0xa6>
 8000286:	2a00      	cmp	r2, #0
 8000288:	f040 8090 	bne.w	80003ac <__udivmoddi4+0x204>
 800028c:	eba1 040c 	sub.w	r4, r1, ip
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	fa1f f78c 	uxth.w	r7, ip
 8000298:	2101      	movs	r1, #1
 800029a:	fbb4 f6f8 	udiv	r6, r4, r8
 800029e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002aa:	fb07 f006 	mul.w	r0, r7, r6
 80002ae:	4298      	cmp	r0, r3
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0x11c>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ba:	d202      	bcs.n	80002c2 <__udivmoddi4+0x11a>
 80002bc:	4298      	cmp	r0, r3
 80002be:	f200 80cd 	bhi.w	800045c <__udivmoddi4+0x2b4>
 80002c2:	4626      	mov	r6, r4
 80002c4:	1a1c      	subs	r4, r3, r0
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002d6:	fb00 f707 	mul.w	r7, r0, r7
 80002da:	429f      	cmp	r7, r3
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0x148>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x146>
 80002e8:	429f      	cmp	r7, r3
 80002ea:	f200 80b0 	bhi.w	800044e <__udivmoddi4+0x2a6>
 80002ee:	4620      	mov	r0, r4
 80002f0:	1bdb      	subs	r3, r3, r7
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	e7a5      	b.n	8000244 <__udivmoddi4+0x9c>
 80002f8:	f1c1 0620 	rsb	r6, r1, #32
 80002fc:	408b      	lsls	r3, r1
 80002fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000302:	431f      	orrs	r7, r3
 8000304:	fa20 fc06 	lsr.w	ip, r0, r6
 8000308:	fa04 f301 	lsl.w	r3, r4, r1
 800030c:	ea43 030c 	orr.w	r3, r3, ip
 8000310:	40f4      	lsrs	r4, r6
 8000312:	fa00 f801 	lsl.w	r8, r0, r1
 8000316:	0c38      	lsrs	r0, r7, #16
 8000318:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800031c:	fbb4 fef0 	udiv	lr, r4, r0
 8000320:	fa1f fc87 	uxth.w	ip, r7
 8000324:	fb00 441e 	mls	r4, r0, lr, r4
 8000328:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800032c:	fb0e f90c 	mul.w	r9, lr, ip
 8000330:	45a1      	cmp	r9, r4
 8000332:	fa02 f201 	lsl.w	r2, r2, r1
 8000336:	d90a      	bls.n	800034e <__udivmoddi4+0x1a6>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800033e:	f080 8084 	bcs.w	800044a <__udivmoddi4+0x2a2>
 8000342:	45a1      	cmp	r9, r4
 8000344:	f240 8081 	bls.w	800044a <__udivmoddi4+0x2a2>
 8000348:	f1ae 0e02 	sub.w	lr, lr, #2
 800034c:	443c      	add	r4, r7
 800034e:	eba4 0409 	sub.w	r4, r4, r9
 8000352:	fa1f f983 	uxth.w	r9, r3
 8000356:	fbb4 f3f0 	udiv	r3, r4, r0
 800035a:	fb00 4413 	mls	r4, r0, r3, r4
 800035e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000362:	fb03 fc0c 	mul.w	ip, r3, ip
 8000366:	45a4      	cmp	ip, r4
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x1d2>
 800036a:	193c      	adds	r4, r7, r4
 800036c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000370:	d267      	bcs.n	8000442 <__udivmoddi4+0x29a>
 8000372:	45a4      	cmp	ip, r4
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0x29a>
 8000376:	3b02      	subs	r3, #2
 8000378:	443c      	add	r4, r7
 800037a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800037e:	fba0 9302 	umull	r9, r3, r0, r2
 8000382:	eba4 040c 	sub.w	r4, r4, ip
 8000386:	429c      	cmp	r4, r3
 8000388:	46ce      	mov	lr, r9
 800038a:	469c      	mov	ip, r3
 800038c:	d351      	bcc.n	8000432 <__udivmoddi4+0x28a>
 800038e:	d04e      	beq.n	800042e <__udivmoddi4+0x286>
 8000390:	b155      	cbz	r5, 80003a8 <__udivmoddi4+0x200>
 8000392:	ebb8 030e 	subs.w	r3, r8, lr
 8000396:	eb64 040c 	sbc.w	r4, r4, ip
 800039a:	fa04 f606 	lsl.w	r6, r4, r6
 800039e:	40cb      	lsrs	r3, r1
 80003a0:	431e      	orrs	r6, r3
 80003a2:	40cc      	lsrs	r4, r1
 80003a4:	e9c5 6400 	strd	r6, r4, [r5]
 80003a8:	2100      	movs	r1, #0
 80003aa:	e750      	b.n	800024e <__udivmoddi4+0xa6>
 80003ac:	f1c2 0320 	rsb	r3, r2, #32
 80003b0:	fa20 f103 	lsr.w	r1, r0, r3
 80003b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b8:	fa24 f303 	lsr.w	r3, r4, r3
 80003bc:	4094      	lsls	r4, r2
 80003be:	430c      	orrs	r4, r1
 80003c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c8:	fa1f f78c 	uxth.w	r7, ip
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3110 	mls	r1, r8, r0, r3
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x24c>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29e>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29e>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x276>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x296>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x296>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e739      	b.n	800029a <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f0      	b.n	800020c <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e706      	b.n	800023c <__udivmoddi4+0x94>
 800042e:	45c8      	cmp	r8, r9
 8000430:	d2ae      	bcs.n	8000390 <__udivmoddi4+0x1e8>
 8000432:	ebb9 0e02 	subs.w	lr, r9, r2
 8000436:	eb63 0c07 	sbc.w	ip, r3, r7
 800043a:	3801      	subs	r0, #1
 800043c:	e7a8      	b.n	8000390 <__udivmoddi4+0x1e8>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x276>
 8000442:	4603      	mov	r3, r0
 8000444:	e799      	b.n	800037a <__udivmoddi4+0x1d2>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x24c>
 800044a:	46d6      	mov	lr, sl
 800044c:	e77f      	b.n	800034e <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74d      	b.n	80002f0 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e70f      	b.n	800027c <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e730      	b.n	80002c4 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000474:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000476:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4313      	orrs	r3, r2
 800047e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000484:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4013      	ands	r3, r2
 800048a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800048c:	68fb      	ldr	r3, [r7, #12]
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <HAL_TIM_PeriodElapsedCallback>:
void DioIrqHndlr(RadioIrqMasks_t radioIrq);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a20      	ldr	r2, [pc, #128]	@ (8000524 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d138      	bne.n	800051a <HAL_TIM_PeriodElapsedCallback+0x82>
		mSEC++;
 80004a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000528 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	3301      	adds	r3, #1
 80004ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000528 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80004b0:	6013      	str	r3, [r2, #0]
		if (mSEC > 999) {
 80004b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000528 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80004ba:	d307      	bcc.n	80004cc <HAL_TIM_PeriodElapsedCallback+0x34>
			mSEC = 0;
 80004bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000528 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
			sec++;
 80004c2:	4b1a      	ldr	r3, [pc, #104]	@ (800052c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	3301      	adds	r3, #1
 80004c8:	4a18      	ldr	r2, [pc, #96]	@ (800052c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80004ca:	6013      	str	r3, [r2, #0]
		}
		if (sec > 59) {
 80004cc:	4b17      	ldr	r3, [pc, #92]	@ (800052c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b3b      	cmp	r3, #59	@ 0x3b
 80004d2:	d908      	bls.n	80004e6 <HAL_TIM_PeriodElapsedCallback+0x4e>
			sec = 0;
 80004d4:	4b15      	ldr	r3, [pc, #84]	@ (800052c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
			min++;
 80004da:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	3301      	adds	r3, #1
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80004e4:	701a      	strb	r2, [r3, #0]
		}
		if (min > 59) {
 80004e6:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b3b      	cmp	r3, #59	@ 0x3b
 80004ec:	d908      	bls.n	8000500 <HAL_TIM_PeriodElapsedCallback+0x68>
			min = 0;
 80004ee:	4b10      	ldr	r3, [pc, #64]	@ (8000530 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]
			hour++;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80004fe:	701a      	strb	r2, [r3, #0]
		}
		if (hour > 23) {
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b17      	cmp	r3, #23
 8000506:	d908      	bls.n	800051a <HAL_TIM_PeriodElapsedCallback+0x82>
			hour = 0;
 8000508:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
			min = 0;
 800050e:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
			sec = 0;
 8000514:	4b05      	ldr	r3, [pc, #20]	@ (800052c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
		}
	}
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	20000068 	.word	0x20000068
 8000528:	20000148 	.word	0x20000148
 800052c:	2000014c 	.word	0x2000014c
 8000530:	20000150 	.word	0x20000150
 8000534:	20000151 	.word	0x20000151

08000538 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a09      	ldr	r2, [pc, #36]	@ (8000568 <HAL_UART_RxCpltCallback+0x30>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d10b      	bne.n	8000560 <HAL_UART_RxCpltCallback+0x28>
		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000548:	4808      	ldr	r0, [pc, #32]	@ (800056c <HAL_UART_RxCpltCallback+0x34>)
 800054a:	f008 f80f 	bl	800856c <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_HP, RFSWITCH_TX);
 800054e:	2101      	movs	r1, #1
 8000550:	2002      	movs	r0, #2
 8000552:	f008 fc53 	bl	8008dfc <SUBGRF_SetSwitch>
		SUBGRF_SendPayload(rx_buffer, sizeof(rx_buffer), 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2105      	movs	r1, #5
 800055a:	4805      	ldr	r0, [pc, #20]	@ (8000570 <HAL_UART_RxCpltCallback+0x38>)
 800055c:	f007 fcc8 	bl	8007ef0 <SUBGRF_SendPayload>
	}
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200000b4 	.word	0x200000b4
 800056c:	19f25968 	.word	0x19f25968
 8000570:	20000154 	.word	0x20000154

08000574 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800057a:	f000 fc33 	bl	8000de4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800057e:	f000 f887 	bl	8000690 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000582:	f000 f997 	bl	80008b4 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000586:	f000 f8f5 	bl	8000774 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 800058a:	f000 f947 	bl	800081c <MX_USART2_UART_Init>
	MX_SubGHz_Phy_Init();
 800058e:	f008 fe74 	bl	800927a <MX_SubGHz_Phy_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000592:	4836      	ldr	r0, [pc, #216]	@ (800066c <main+0xf8>)
 8000594:	f003 f812 	bl	80035bc <HAL_TIM_Base_Start_IT>

	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000598:	4b35      	ldr	r3, [pc, #212]	@ (8000670 <main+0xfc>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = PAYLOAD_LENGTH;
 800059e:	4b34      	ldr	r3, [pc, #208]	@ (8000670 <main+0xfc>)
 80005a0:	2216      	movs	r2, #22
 80005a2:	721a      	strb	r2, [r3, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8;/*Convert byte into bit*/
 80005a4:	4b32      	ldr	r3, [pc, #200]	@ (8000670 <main+0xfc>)
 80005a6:	2208      	movs	r2, #8
 80005a8:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80005aa:	4b31      	ldr	r3, [pc, #196]	@ (8000670 <main+0xfc>)
 80005ac:	2204      	movs	r2, #4
 80005ae:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; //convert byte into bit
 80005b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000670 <main+0xfc>)
 80005b2:	2218      	movs	r2, #24
 80005b4:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80005b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000670 <main+0xfc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80005bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <main+0xfc>)
 80005be:	2200      	movs	r2, #0
 80005c0:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80005c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000670 <main+0xfc>)
 80005c4:	22f2      	movs	r2, #242	@ 0xf2
 80005c6:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80005c8:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <main+0xfc>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	729a      	strb	r2, [r3, #10]

	mod_params.PacketType = PACKET_TYPE_GFSK;
 80005ce:	4b29      	ldr	r3, [pc, #164]	@ (8000674 <main+0x100>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300;/*Not used in TX*/
 80005d4:	4b27      	ldr	r3, [pc, #156]	@ (8000674 <main+0x100>)
 80005d6:	220d      	movs	r2, #13
 80005d8:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR;
 80005da:	4b26      	ldr	r3, [pc, #152]	@ (8000674 <main+0x100>)
 80005dc:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80005e0:	605a      	str	r2, [r3, #4]
	mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV;
 80005e2:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <main+0x100>)
 80005e4:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 80005e8:	609a      	str	r2, [r3, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80005ea:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <main+0x100>)
 80005ec:	220b      	movs	r2, #11
 80005ee:	731a      	strb	r2, [r3, #12]

	SUBGRF_Init(DioIrqHndlr);
 80005f0:	4821      	ldr	r0, [pc, #132]	@ (8000678 <main+0x104>)
 80005f2:	f007 fbf9 	bl	8007de8 <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 80005f6:	2100      	movs	r1, #0
 80005f8:	2000      	movs	r0, #0
 80005fa:	f008 fa61 	bl	8008ac0 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(main_cmd, PAYLOAD_LENGTH);
 80005fe:	2116      	movs	r1, #22
 8000600:	481e      	ldr	r0, [pc, #120]	@ (800067c <main+0x108>)
 8000602:	f007 fc43 	bl	8007e8c <SUBGRF_SetPayload>
	SUBGRF_SetPacketParams(&pkt_params);
 8000606:	481a      	ldr	r0, [pc, #104]	@ (8000670 <main+0xfc>)
 8000608:	f008 f9bc 	bl	8008984 <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord((uint8_t[] ) { 0xc1, 0x94, 0xc1, 0x00, 0x00, 0x00, 0x00,
 800060c:	4a1c      	ldr	r2, [pc, #112]	@ (8000680 <main+0x10c>)
 800060e:	463b      	mov	r3, r7
 8000610:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000614:	e883 0003 	stmia.w	r3, {r0, r1}
 8000618:	463b      	mov	r3, r7
 800061a:	4618      	mov	r0, r3
 800061c:	f007 fc7b 	bl	8007f16 <SUBGRF_SetSyncWord>
					0x00 });

	SUBGRF_SetWhiteningSeed(0x01FF);
 8000620:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8000624:	f007 fcc6 	bl	8007fb4 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000628:	4816      	ldr	r0, [pc, #88]	@ (8000684 <main+0x110>)
 800062a:	f007 ff9f 	bl	800856c <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 800062e:	2301      	movs	r3, #1
 8000630:	2200      	movs	r2, #0
 8000632:	2102      	movs	r1, #2
 8000634:	2002      	movs	r0, #2
 8000636:	f007 ff1b 	bl	8008470 <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
 800063a:	2206      	movs	r2, #6
 800063c:	210e      	movs	r1, #14
 800063e:	2002      	movs	r0, #2
 8000640:	f008 f800 	bl	8008644 <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 8000644:	480b      	ldr	r0, [pc, #44]	@ (8000674 <main+0x100>)
 8000646:	f008 f8cb 	bl	80087e0 <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 800064a:	2300      	movs	r3, #0
 800064c:	2200      	movs	r2, #0
 800064e:	f240 210f 	movw	r1, #527	@ 0x20f
 8000652:	f240 200f 	movw	r0, #527	@ 0x20f
 8000656:	f007 ff2d 	bl	80084b4 <SUBGRF_SetDioIrqParams>
	/* USER CODE BEGIN WHILE */
	while (1) {
//		HAL_UART_Transmit(&huart2, name, 6, 1000);
//		HAL_Delay(1000);

		HAL_UART_Receive_IT(&huart2, rx_buffer, 5);
 800065a:	2205      	movs	r2, #5
 800065c:	490a      	ldr	r1, [pc, #40]	@ (8000688 <main+0x114>)
 800065e:	480b      	ldr	r0, [pc, #44]	@ (800068c <main+0x118>)
 8000660:	f003 fc6e 	bl	8003f40 <HAL_UART_Receive_IT>

		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 8000664:	f008 fe11 	bl	800928a <MX_SubGHz_Phy_Process>
		HAL_UART_Receive_IT(&huart2, rx_buffer, 5);
 8000668:	bf00      	nop
 800066a:	e7f6      	b.n	800065a <main+0xe6>
 800066c:	20000068 	.word	0x20000068
 8000670:	2000002c 	.word	0x2000002c
 8000674:	20000040 	.word	0x20000040
 8000678:	08000969 	.word	0x08000969
 800067c:	2000015c 	.word	0x2000015c
 8000680:	080099f4 	.word	0x080099f4
 8000684:	19f25968 	.word	0x19f25968
 8000688:	20000154 	.word	0x20000154
 800068c:	200000b4 	.word	0x200000b4

08000690 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b09a      	sub	sp, #104	@ 0x68
 8000694:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2248      	movs	r2, #72	@ 0x48
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f009 f970 	bl	8009984 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b6:	4b25      	ldr	r3, [pc, #148]	@ (800074c <SystemClock_Config+0xbc>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80006be:	4a23      	ldr	r2, [pc, #140]	@ (800074c <SystemClock_Config+0xbc>)
 80006c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006c4:	6013      	str	r3, [r2, #0]
 80006c6:	4b21      	ldr	r3, [pc, #132]	@ (800074c <SystemClock_Config+0xbc>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d2:	2301      	movs	r3, #1
 80006d4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 80006d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e4:	2303      	movs	r3, #3
 80006e6:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80006e8:	2310      	movs	r3, #16
 80006ea:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 80006ec:	2306      	movs	r3, #6
 80006ee:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80006f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006fa:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000700:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	4618      	mov	r0, r3
 8000708:	f001 f9ea 	bl	8001ae0 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x86>
		Error_Handler();
 8000712:	f000 f965 	bl	80009e0 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8000716:	234f      	movs	r3, #79	@ 0x4f
 8000718:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2303      	movs	r3, #3
 800071c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fd56 	bl	80021e4 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xb2>
		Error_Handler();
 800073e:	f000 f94f 	bl	80009e0 <Error_Handler>
	}
}
 8000742:	bf00      	nop
 8000744:	3768      	adds	r7, #104	@ 0x68
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	58000400 	.word	0x58000400

08000750 <MX_SUBGHZ_Init>:
/**
 * @brief SUBGHZ Initialization Function
 * @param None
 * @retval None
 */
void MX_SUBGHZ_Init(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_SUBGHZ_Init+0x20>)
 8000756:	2210      	movs	r2, #16
 8000758:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_SUBGHZ_Init+0x20>)
 800075c:	f002 fab6 	bl	8002ccc <HAL_SUBGHZ_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 8000766:	f000 f93b 	bl	80009e0 <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000005c 	.word	0x2000005c

08000774 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000792:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <MX_TIM1_Init+0xa0>)
 8000794:	4a20      	ldr	r2, [pc, #128]	@ (8000818 <MX_TIM1_Init+0xa4>)
 8000796:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48 - 1;
 8000798:	4b1e      	ldr	r3, [pc, #120]	@ (8000814 <MX_TIM1_Init+0xa0>)
 800079a:	222f      	movs	r2, #47	@ 0x2f
 800079c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <MX_TIM1_Init+0xa0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <MX_TIM1_Init+0xa0>)
 80007a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007aa:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <MX_TIM1_Init+0xa0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80007b2:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <MX_TIM1_Init+0xa0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b16      	ldr	r3, [pc, #88]	@ (8000814 <MX_TIM1_Init+0xa0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80007be:	4815      	ldr	r0, [pc, #84]	@ (8000814 <MX_TIM1_Init+0xa0>)
 80007c0:	f002 fea4 	bl	800350c <HAL_TIM_Base_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0x5a>
		Error_Handler();
 80007ca:	f000 f909 	bl	80009e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	4619      	mov	r1, r3
 80007da:	480e      	ldr	r0, [pc, #56]	@ (8000814 <MX_TIM1_Init+0xa0>)
 80007dc:	f003 f859 	bl	8003892 <HAL_TIM_ConfigClockSource>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0x76>
		Error_Handler();
 80007e6:	f000 f8fb 	bl	80009e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	@ (8000814 <MX_TIM1_Init+0xa0>)
 80007fc:	f003 fa30 	bl	8003c60 <HAL_TIMEx_MasterConfigSynchronization>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000806:	f000 f8eb 	bl	80009e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	3720      	adds	r7, #32
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000068 	.word	0x20000068
 8000818:	40012c00 	.word	0x40012c00

0800081c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 8000822:	4a23      	ldr	r2, [pc, #140]	@ (80008b0 <MX_USART2_UART_Init+0x94>)
 8000824:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000826:	4b21      	ldr	r3, [pc, #132]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000864:	4811      	ldr	r0, [pc, #68]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 8000866:	f003 fa95 	bl	8003d94 <HAL_UART_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000870:	f000 f8b6 	bl	80009e0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000874:	2100      	movs	r1, #0
 8000876:	480d      	ldr	r0, [pc, #52]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 8000878:	f005 fa51 	bl	8005d1e <HAL_UARTEx_SetTxFifoThreshold>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000882:	f000 f8ad 	bl	80009e0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000886:	2100      	movs	r1, #0
 8000888:	4808      	ldr	r0, [pc, #32]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 800088a:	f005 fa86 	bl	8005d9a <HAL_UARTEx_SetRxFifoThreshold>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000894:	f000 f8a4 	bl	80009e0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_USART2_UART_Init+0x90>)
 800089a:	f005 fa08 	bl	8005cae <HAL_UARTEx_DisableFifoMode>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 80008a4:	f000 f89c 	bl	80009e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000b4 	.word	0x200000b4
 80008b0:	40004400 	.word	0x40004400

080008b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008c8:	2002      	movs	r0, #2
 80008ca:	f7ff fdcd 	bl	8000468 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2004      	movs	r0, #4
 80008d0:	f7ff fdca 	bl	8000468 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff fdc7 	bl	8000468 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 410a 	mov.w	r1, #35328	@ 0x8a00
 80008e0:	481f      	ldr	r0, [pc, #124]	@ (8000960 <MX_GPIO_Init+0xac>)
 80008e2:	f000 fe13 	bl	800150c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin,
 80008e6:	2200      	movs	r2, #0
 80008e8:	2138      	movs	r1, #56	@ 0x38
 80008ea:	481e      	ldr	r0, [pc, #120]	@ (8000964 <MX_GPIO_Init+0xb0>)
 80008ec:	f000 fe0e 	bl	800150c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 80008f0:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 80008f4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fe:	2302      	movs	r3, #2
 8000900:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	4619      	mov	r1, r3
 8000906:	4816      	ldr	r0, [pc, #88]	@ (8000960 <MX_GPIO_Init+0xac>)
 8000908:	f000 fca0 	bl	800124c <HAL_GPIO_Init>

	/*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
	GPIO_InitStruct.Pin = FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin;
 800090c:	2338      	movs	r3, #56	@ 0x38
 800090e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4810      	ldr	r0, [pc, #64]	@ (8000964 <MX_GPIO_Init+0xb0>)
 8000922:	f000 fc93 	bl	800124c <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin B2_Pin */
	GPIO_InitStruct.Pin = B1_Pin | B2_Pin;
 8000926:	2303      	movs	r3, #3
 8000928:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800092a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800092e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000930:	2301      	movs	r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093c:	f000 fc86 	bl	800124c <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 8000940:	2340      	movs	r3, #64	@ 0x40
 8000942:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000944:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000948:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094a:	2301      	movs	r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	4804      	ldr	r0, [pc, #16]	@ (8000964 <MX_GPIO_Init+0xb0>)
 8000954:	f000 fc7a 	bl	800124c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000958:	bf00      	nop
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	48000400 	.word	0x48000400
 8000964:	48000800 	.word	0x48000800

08000968 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	if (radioIrq == IRQ_TX_DONE) {
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d10f      	bne.n	8000998 <DioIrqHndlr+0x30>
		i++;
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <DioIrqHndlr+0x60>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <DioIrqHndlr+0x60>)
 8000980:	6013      	str	r3, [r2, #0]
		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8000982:	4812      	ldr	r0, [pc, #72]	@ (80009cc <DioIrqHndlr+0x64>)
 8000984:	f007 fdf2 	bl	800856c <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_HP, RFSWITCH_RX);
 8000988:	2100      	movs	r1, #0
 800098a:	2002      	movs	r0, #2
 800098c:	f008 fa36 	bl	8008dfc <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFF);
 8000990:	480f      	ldr	r0, [pc, #60]	@ (80009d0 <DioIrqHndlr+0x68>)
 8000992:	f007 fc17 	bl	80081c4 <SUBGRF_SetRxBoosted>
	} else if (radioIrq == IRQ_RX_DONE) {
		SUBGRF_GetPayload(main_cmd, &pLen, PAYLOAD_LENGTH);
		HAL_UART_Transmit(&huart2, main_cmd, 5, 2000);
		i++;
	}
}
 8000996:	e013      	b.n	80009c0 <DioIrqHndlr+0x58>
	} else if (radioIrq == IRQ_RX_DONE) {
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d110      	bne.n	80009c0 <DioIrqHndlr+0x58>
		SUBGRF_GetPayload(main_cmd, &pLen, PAYLOAD_LENGTH);
 800099e:	2216      	movs	r2, #22
 80009a0:	490c      	ldr	r1, [pc, #48]	@ (80009d4 <DioIrqHndlr+0x6c>)
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <DioIrqHndlr+0x70>)
 80009a4:	f007 fa82 	bl	8007eac <SUBGRF_GetPayload>
		HAL_UART_Transmit(&huart2, main_cmd, 5, 2000);
 80009a8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80009ac:	2205      	movs	r2, #5
 80009ae:	490a      	ldr	r1, [pc, #40]	@ (80009d8 <DioIrqHndlr+0x70>)
 80009b0:	480a      	ldr	r0, [pc, #40]	@ (80009dc <DioIrqHndlr+0x74>)
 80009b2:	f003 fa3f 	bl	8003e34 <HAL_UART_Transmit>
		i++;
 80009b6:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <DioIrqHndlr+0x60>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	3301      	adds	r3, #1
 80009bc:	4a02      	ldr	r2, [pc, #8]	@ (80009c8 <DioIrqHndlr+0x60>)
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000164 	.word	0x20000164
 80009cc:	19f25968 	.word	0x19f25968
 80009d0:	000fffff 	.word	0x000fffff
 80009d4:	20000000 	.word	0x20000000
 80009d8:	2000015c 	.word	0x2000015c
 80009dc:	200000b4 	.word	0x200000b4

080009e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <Error_Handler+0x8>

080009ec <LL_AHB2_GRP1_EnableClock>:
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a10:	68fb      	ldr	r3, [r7, #12]
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a40:	68fb      	ldr	r3, [r7, #12]
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a70:	68fb      	ldr	r3, [r7, #12]
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a88:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000a8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a98:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff ffdb 	bl	8000a7c <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2032      	movs	r0, #50	@ 0x32
 8000acc:	f000 facd 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000ad0:	2032      	movs	r0, #50	@ 0x32
 8000ad2:	f000 fae4 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a09      	ldr	r2, [pc, #36]	@ (8000b14 <HAL_TIM_Base_MspInit+0x34>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d10b      	bne.n	8000b0a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000af2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000af6:	f7ff ffa9 	bl	8000a4c <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2018      	movs	r0, #24
 8000b00:	f000 fab3 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b04:	2018      	movs	r0, #24
 8000b06:	f000 faca 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40012c00 	.word	0x40012c00

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b096      	sub	sp, #88	@ 0x58
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2238      	movs	r2, #56	@ 0x38
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f008 ff23 	bl	8009984 <memset>
  if(huart->Instance==USART2)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb0 <HAL_UART_MspInit+0x98>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d12e      	bne.n	8000ba6 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b4c:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000b50:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 ff04 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b62:	f7ff ff3d 	bl	80009e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b66:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000b6a:	f7ff ff57 	bl	8000a1c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f7ff ff3c 	bl	80009ec <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000b74:	230c      	movs	r3, #12
 8000b76:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b84:	2307      	movs	r3, #7
 8000b86:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b92:	f000 fb5b 	bl	800124c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2025      	movs	r0, #37	@ 0x25
 8000b9c:	f000 fa65 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ba0:	2025      	movs	r0, #37	@ 0x25
 8000ba2:	f000 fa7c 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3758      	adds	r7, #88	@ 0x58
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <NMI_Handler+0x4>

08000bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f948 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c10:	4802      	ldr	r0, [pc, #8]	@ (8000c1c <TIM1_UP_IRQHandler+0x10>)
 8000c12:	f002 fd1f 	bl	8003654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000068 	.word	0x20000068

08000c20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <USART2_IRQHandler+0x10>)
 8000c26:	f003 f9d7 	bl	8003fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000b4 	.word	0x200000b4

08000c34 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000c3a:	f002 fac9 	bl	80031d0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000005c 	.word	0x2000005c

08000c48 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_GetTick+0x24>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d002      	beq.n	8000c6c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000c66:	f000 f85c 	bl	8000d22 <TIMER_IF_GetTimerValue>
 8000c6a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000168 	.word	0x20000168

08000c7c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f879 	bl	8000d7e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8000caa:	79fb      	ldrb	r3, [r7, #7]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr

08000cb6 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b085      	sub	sp, #20
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr

08000cce <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	@ (8000cf4 <TIMER_IF_SetTimerContext+0x10>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	2000016c 	.word	0x2000016c

08000cf8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000cfc:	4b02      	ldr	r3, [pc, #8]	@ (8000d08 <TIMER_IF_GetTimerContext+0x10>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	2000016c 	.word	0x2000016c

08000d0c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8000d16:	687b      	ldr	r3, [r7, #4]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8000d42:	687b      	ldr	r3, [r7, #4]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b085      	sub	sp, #20
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b085      	sub	sp, #20
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d90:	480d      	ldr	r0, [pc, #52]	@ (8000dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d94:	f7ff ff7e 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	@ (8000dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <LoopForever+0xe>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ddc <LoopForever+0x16>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dbe:	f008 fde9 	bl	8009994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dc2:	f7ff fbd7 	bl	8000574 <main>

08000dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc6:	e7fe      	b.n	8000dc6 <LoopForever>
  ldr   r0, =_estack
 8000dc8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dd4:	08009c80 	.word	0x08009c80
  ldr r2, =_sbss
 8000dd8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ddc:	20000334 	.word	0x20000334

08000de0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC_IRQHandler>
	...

08000de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dee:	2003      	movs	r0, #3
 8000df0:	f000 f930 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000df4:	f001 fbd8 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a09      	ldr	r2, [pc, #36]	@ (8000e20 <HAL_Init+0x3c>)
 8000dfc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f810 	bl	8000e24 <HAL_InitTick>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	e001      	b.n	8000e14 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e10:	f7ff fe4c 	bl	8000aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e30:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <HAL_InitTick+0x6c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d024      	beq.n	8000e82 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e38:	f001 fbb6 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <HAL_InitTick+0x6c>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	4619      	mov	r1, r3
 8000e44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e48:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f932 	bl	80010ba <HAL_SYSTICK_Config>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10f      	bne.n	8000e7c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b0f      	cmp	r3, #15
 8000e60:	d809      	bhi.n	8000e76 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e62:	2200      	movs	r2, #0
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6a:	f000 f8fe 	bl	800106a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e6e:	4a09      	ldr	r2, [pc, #36]	@ (8000e94 <HAL_InitTick+0x70>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	e007      	b.n	8000e86 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	e004      	b.n	8000e86 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e001      	b.n	8000e86 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000000c 	.word	0x2000000c
 8000e94:	20000008 	.word	0x20000008

08000e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e9c:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <HAL_IncTick+0x1c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <HAL_IncTick+0x20>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a03      	ldr	r2, [pc, #12]	@ (8000eb8 <HAL_IncTick+0x20>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	2000000c 	.word	0x2000000c
 8000eb8:	20000170 	.word	0x20000170

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4906      	ldr	r1, [pc, #24]	@ (8000f54 <__NVIC_EnableIRQ+0x34>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	@ (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	@ (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	@ 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f7ff ff90 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff2d 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff44 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff92 	bl	8000fac <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff61 	bl	8000f58 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff37 	bl	8000f20 <__NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffa4 	bl	8001010 <SysTick_Config>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e04f      	b.n	8001184 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d008      	beq.n	8001102 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2204      	movs	r2, #4
 80010f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e040      	b.n	8001184 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 020e 	bic.w	r2, r2, #14
 8001110:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800111c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001120:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0201 	bic.w	r2, r2, #1
 8001130:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f003 021c 	and.w	r2, r3, #28
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f202 	lsl.w	r2, r1, r2
 8001144:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800114e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00c      	beq.n	8001172 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001162:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001166:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001170:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d005      	beq.n	80011b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2204      	movs	r2, #4
 80011aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e047      	b.n	8001242 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 020e 	bic.w	r2, r2, #14
 80011c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0201 	bic.w	r2, r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	f003 021c 	and.w	r2, r3, #28
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80011fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00c      	beq.n	8001222 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001212:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001216:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001220:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	4798      	blx	r3
    }
  }
  return status;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b087      	sub	sp, #28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125a:	e140      	b.n	80014de <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2101      	movs	r1, #1
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8132 	beq.w	80014d8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b01      	cmp	r3, #1
 800127e:	d005      	beq.n	800128c <HAL_GPIO_Init+0x40>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d130      	bne.n	80012ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012c2:	2201      	movs	r2, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	f003 0201 	and.w	r2, r3, #1
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d017      	beq.n	800132a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d123      	bne.n	800137e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3208      	adds	r2, #8
 8001378:	6939      	ldr	r1, [r7, #16]
 800137a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0203 	and.w	r2, r3, #3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 808c 	beq.w	80014d8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80013c0:	4a4e      	ldr	r2, [pc, #312]	@ (80014fc <HAL_GPIO_Init+0x2b0>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	2207      	movs	r2, #7
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_Init+0x1bc>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a44      	ldr	r2, [pc, #272]	@ (8001500 <HAL_GPIO_Init+0x2b4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_Init+0x1b8>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a43      	ldr	r2, [pc, #268]	@ (8001504 <HAL_GPIO_Init+0x2b8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_Init+0x1b4>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e004      	b.n	800140a <HAL_GPIO_Init+0x1be>
 8001400:	2307      	movs	r3, #7
 8001402:	e002      	b.n	800140a <HAL_GPIO_Init+0x1be>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <HAL_GPIO_Init+0x1be>
 8001408:	2300      	movs	r3, #0
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	f002 0203 	and.w	r2, r2, #3
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	4093      	lsls	r3, r2
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800141a:	4938      	ldr	r1, [pc, #224]	@ (80014fc <HAL_GPIO_Init+0x2b0>)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001428:	4b37      	ldr	r3, [pc, #220]	@ (8001508 <HAL_GPIO_Init+0x2bc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800144c:	4a2e      	ldr	r2, [pc, #184]	@ (8001508 <HAL_GPIO_Init+0x2bc>)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001452:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <HAL_GPIO_Init+0x2bc>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001476:	4a24      	ldr	r2, [pc, #144]	@ (8001508 <HAL_GPIO_Init+0x2bc>)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <HAL_GPIO_Init+0x2bc>)
 800147e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001482:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80014a2:	4a19      	ldr	r2, [pc, #100]	@ (8001508 <HAL_GPIO_Init+0x2bc>)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80014aa:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <HAL_GPIO_Init+0x2bc>)
 80014ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014b0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80014d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001508 <HAL_GPIO_Init+0x2bc>)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3301      	adds	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f47f aeb7 	bne.w	800125c <HAL_GPIO_Init+0x10>
  }
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40010000 	.word	0x40010000
 8001500:	48000400 	.word	0x48000400
 8001504:	48000800 	.word	0x48000800
 8001508:	58000800 	.word	0x58000800

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001528:	e002      	b.n	8001530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
	...

0800153c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001540:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a03      	ldr	r2, [pc, #12]	@ (8001554 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	58000400 	.word	0x58000400

08001558 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800155c:	4b03      	ldr	r3, [pc, #12]	@ (800156c <HAL_PWREx_GetVoltageRange+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	58000400 	.word	0x58000400

08001570 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001580:	d101      	bne.n	8001586 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	58000400 	.word	0x58000400

08001594 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80015b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80015d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80015de:	d101      	bne.n	80015e4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001600:	6013      	str	r3, [r2, #0]
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800161c:	6013      	str	r3, [r2, #0]
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001634:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001638:	d101      	bne.n	800163e <LL_RCC_HSE_IsReady+0x18>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <LL_RCC_HSE_IsReady+0x1a>
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001672:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800168e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001692:	d101      	bne.n	8001698 <LL_RCC_HSI_IsReady+0x18>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <LL_RCC_HSI_IsReady+0x1a>
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80016aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	061b      	lsls	r3, r3, #24
 80016b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80016ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d101      	bne.n	80016e2 <LL_RCC_LSE_IsReady+0x18>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <LL_RCC_LSE_IsReady+0x1a>
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001718:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b02      	cmp	r3, #2
 800173e:	d101      	bne.n	8001744 <LL_RCC_LSI_IsReady+0x18>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <LL_RCC_LSI_IsReady+0x1a>
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6013      	str	r3, [r2, #0]
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800176e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6013      	str	r3, [r2, #0]
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b02      	cmp	r3, #2
 8001796:	d101      	bne.n	800179c <LL_RCC_MSI_IsReady+0x16>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <LL_RCC_MSI_IsReady+0x18>
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80017aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d101      	bne.n	80017bc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80017e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f023 0203 	bic.w	r2, r3, #3
 800182e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4313      	orrs	r3, r2
 8001836:	608b      	str	r3, [r1, #8]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 030c 	and.w	r3, r3, #12
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800186a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4313      	orrs	r3, r2
 8001872:	608b      	str	r3, [r1, #8]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800188a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800188e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001892:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4313      	orrs	r3, r2
 800189a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80018b8:	f023 020f 	bic.w	r2, r3, #15
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018c4:	4313      	orrs	r3, r2
 80018c6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800190c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800193e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800199c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80019b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80019c6:	d101      	bne.n	80019cc <LL_RCC_PLL_IsReady+0x18>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <LL_RCC_PLL_IsReady+0x1a>
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0303 	and.w	r3, r3, #3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a42:	d101      	bne.n	8001a48 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001a66:	d101      	bne.n	8001a6c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a8a:	d101      	bne.n	8001a90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001aac:	d101      	bne.n	8001ab2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001ace:	d101      	bne.n	8001ad4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e36f      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af2:	f7ff fea6 	bl	8001842 <LL_RCC_GetSysClkSource>
 8001af6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001af8:	f7ff ff8f 	bl	8001a1a <LL_RCC_PLL_GetMainSource>
 8001afc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0320 	and.w	r3, r3, #32
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80c4 	beq.w	8001c94 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_RCC_OscConfig+0x3e>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	2b0c      	cmp	r3, #12
 8001b16:	d176      	bne.n	8001c06 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d173      	bne.n	8001c06 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e353      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_OscConfig+0x68>
 8001b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b46:	e006      	b.n	8001b56 <HAL_RCC_OscConfig+0x76>
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d222      	bcs.n	8001ba0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fd5a 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e331      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fe2b 	bl	80017f4 <LL_RCC_MSI_SetCalibTrimming>
 8001b9e:	e021      	b.n	8001be4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001baa:	f043 0308 	orr.w	r3, r3, #8
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fe12 	bl	80017f4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fd1f 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e2f6      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001be4:	f000 fce0 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4aa7      	ldr	r2, [pc, #668]	@ (8001e88 <HAL_RCC_OscConfig+0x3a8>)
 8001bec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001bee:	4ba7      	ldr	r3, [pc, #668]	@ (8001e8c <HAL_RCC_OscConfig+0x3ac>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f916 	bl	8000e24 <HAL_InitTick>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001bfc:	7cfb      	ldrb	r3, [r7, #19]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d047      	beq.n	8001c92 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001c02:	7cfb      	ldrb	r3, [r7, #19]
 8001c04:	e2e5      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d02c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c0e:	f7ff fd9e 	bl	800174e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c12:	f7ff f81f 	bl	8000c54 <HAL_GetTick>
 8001c16:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c1a:	f7ff f81b 	bl	8000c54 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e2d2      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c2c:	f7ff fdab 	bl	8001786 <LL_RCC_MSI_IsReady>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f1      	beq.n	8001c1a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fdc7 	bl	80017f4 <LL_RCC_MSI_SetCalibTrimming>
 8001c66:	e015      	b.n	8001c94 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c68:	f7ff fd7f 	bl	800176a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c6c:	f7fe fff2 	bl	8000c54 <HAL_GetTick>
 8001c70:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c74:	f7fe ffee 	bl	8000c54 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e2a5      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c86:	f7ff fd7e 	bl	8001786 <LL_RCC_MSI_IsReady>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f1      	bne.n	8001c74 <HAL_RCC_OscConfig+0x194>
 8001c90:	e000      	b.n	8001c94 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c92:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d058      	beq.n	8001d52 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1d2>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	d108      	bne.n	8001cbe <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d105      	bne.n	8001cbe <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d14b      	bne.n	8001d52 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e289      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cdc:	d102      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x204>
 8001cde:	f7ff fc86 	bl	80015ee <LL_RCC_HSE_Enable>
 8001ce2:	e00d      	b.n	8001d00 <HAL_RCC_OscConfig+0x220>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001cec:	d104      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x218>
 8001cee:	f7ff fc51 	bl	8001594 <LL_RCC_HSE_EnableTcxo>
 8001cf2:	f7ff fc7c 	bl	80015ee <LL_RCC_HSE_Enable>
 8001cf6:	e003      	b.n	8001d00 <HAL_RCC_OscConfig+0x220>
 8001cf8:	f7ff fc87 	bl	800160a <LL_RCC_HSE_Disable>
 8001cfc:	f7ff fc58 	bl	80015b0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d012      	beq.n	8001d2e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7fe ffa4 	bl	8000c54 <HAL_GetTick>
 8001d0c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7fe ffa0 	bl	8000c54 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e257      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d22:	f7ff fc80 	bl	8001626 <LL_RCC_HSE_IsReady>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f1      	beq.n	8001d10 <HAL_RCC_OscConfig+0x230>
 8001d2c:	e011      	b.n	8001d52 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7fe ff91 	bl	8000c54 <HAL_GetTick>
 8001d32:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d36:	f7fe ff8d 	bl	8000c54 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b64      	cmp	r3, #100	@ 0x64
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e244      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d48:	f7ff fc6d 	bl	8001626 <LL_RCC_HSE_IsReady>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f1      	bne.n	8001d36 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d046      	beq.n	8001dec <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_OscConfig+0x290>
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d10e      	bne.n	8001d88 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d10b      	bne.n	8001d88 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e22a      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fc8e 	bl	80016a2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d86:	e031      	b.n	8001dec <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d019      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d90:	f7ff fc5a 	bl	8001648 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7fe ff5e 	bl	8000c54 <HAL_GetTick>
 8001d98:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7fe ff5a 	bl	8000c54 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e211      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001dae:	f7ff fc67 	bl	8001680 <LL_RCC_HSI_IsReady>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f1      	beq.n	8001d9c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fc70 	bl	80016a2 <LL_RCC_HSI_SetCalibTrimming>
 8001dc2:	e013      	b.n	8001dec <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc4:	f7ff fc4e 	bl	8001664 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7fe ff44 	bl	8000c54 <HAL_GetTick>
 8001dcc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7fe ff40 	bl	8000c54 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1f7      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001de2:	f7ff fc4d 	bl	8001680 <LL_RCC_HSI_IsReady>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f1      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d06e      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d056      	beq.n	8001eae <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e08:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69da      	ldr	r2, [r3, #28]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d031      	beq.n	8001e7c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e1d0      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d013      	beq.n	8001e62 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001e3a:	f7ff fc67 	bl	800170c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e3e:	f7fe ff09 	bl	8000c54 <HAL_GetTick>
 8001e42:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e46:	f7fe ff05 	bl	8000c54 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b11      	cmp	r3, #17
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e1bc      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001e58:	f7ff fc68 	bl	800172c <LL_RCC_LSI_IsReady>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f1      	bne.n	8001e46 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e6a:	f023 0210 	bic.w	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7c:	f7ff fc36 	bl	80016ec <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e80:	f7fe fee8 	bl	8000c54 <HAL_GetTick>
 8001e84:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001e86:	e00c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x3c2>
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7fe fee0 	bl	8000c54 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b11      	cmp	r3, #17
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e197      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001ea2:	f7ff fc43 	bl	800172c <LL_RCC_LSI_IsReady>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f1      	beq.n	8001e90 <HAL_RCC_OscConfig+0x3b0>
 8001eac:	e013      	b.n	8001ed6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eae:	f7ff fc2d 	bl	800170c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7fe fecf 	bl	8000c54 <HAL_GetTick>
 8001eb6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eba:	f7fe fecb 	bl	8000c54 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b11      	cmp	r3, #17
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e182      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001ecc:	f7ff fc2e 	bl	800172c <LL_RCC_LSI_IsReady>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f1      	bne.n	8001eba <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80d8 	beq.w	8002094 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001ee4:	f7ff fb44 	bl	8001570 <LL_PWR_IsEnabledBkUpAccess>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d113      	bne.n	8001f16 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001eee:	f7ff fb25 	bl	800153c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef2:	f7fe feaf 	bl	8000c54 <HAL_GetTick>
 8001ef6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efa:	f7fe feab 	bl	8000c54 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e162      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f0c:	f7ff fb30 	bl	8001570 <LL_PWR_IsEnabledBkUpAccess>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f1      	beq.n	8001efa <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d07b      	beq.n	8002016 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b85      	cmp	r3, #133	@ 0x85
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d109      	bne.n	8001f42 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f42:	f7fe fe87 	bl	8000c54 <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7fe fe79 	bl	8000c54 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e12e      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001f74:	f7ff fba9 	bl	80016ca <LL_RCC_LSE_IsReady>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ef      	beq.n	8001f5e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b81      	cmp	r3, #129	@ 0x81
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b85      	cmp	r3, #133	@ 0x85
 8001f8c:	d121      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7fe fe61 	bl	8000c54 <HAL_GetTick>
 8001f92:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe fe53 	bl	8000c54 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e108      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ec      	beq.n	8001faa <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001fd0:	e060      	b.n	8002094 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fe3f 	bl	8000c54 <HAL_GetTick>
 8001fd6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7fe fe31 	bl	8000c54 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e0e6      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ec      	bne.n	8001fee <HAL_RCC_OscConfig+0x50e>
 8002014:	e03e      	b.n	8002094 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7fe fe1d 	bl	8000c54 <HAL_GetTick>
 800201a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002024:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002028:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7fe fe0f 	bl	8000c54 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0c4      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ec      	bne.n	8002032 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7fe fdfc 	bl	8000c54 <HAL_GetTick>
 800205c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800205e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002066:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002072:	e00a      	b.n	800208a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7fe fdee 	bl	8000c54 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e0a3      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800208a:	f7ff fb1e 	bl	80016ca <LL_RCC_LSE_IsReady>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ef      	bne.n	8002074 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 8099 	beq.w	80021d0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	d06c      	beq.n	800217e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d14b      	bne.n	8002144 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	f7ff fc74 	bl	8001998 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fdd0 	bl	8000c54 <HAL_GetTick>
 80020b4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe fdcc 	bl	8000c54 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b0a      	cmp	r3, #10
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e083      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80020ca:	f7ff fc73 	bl	80019b4 <LL_RCC_PLL_IsReady>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f1      	bne.n	80020b8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	4b40      	ldr	r3, [pc, #256]	@ (80021dc <HAL_RCC_OscConfig+0x6fc>)
 80020dc:	4013      	ands	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020e6:	4311      	orrs	r1, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020ec:	0212      	lsls	r2, r2, #8
 80020ee:	4311      	orrs	r1, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020f4:	4311      	orrs	r1, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020fa:	4311      	orrs	r1, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002100:	430a      	orrs	r2, r1
 8002102:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002106:	4313      	orrs	r3, r2
 8002108:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210a:	f7ff fc37 	bl	800197c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800210e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800211c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7fe fd99 	bl	8000c54 <HAL_GetTick>
 8002122:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002126:	f7fe fd95 	bl	8000c54 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b0a      	cmp	r3, #10
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e04c      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002138:	f7ff fc3c 	bl	80019b4 <LL_RCC_PLL_IsReady>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f1      	beq.n	8002126 <HAL_RCC_OscConfig+0x646>
 8002142:	e045      	b.n	80021d0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	f7ff fc28 	bl	8001998 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe fd84 	bl	8000c54 <HAL_GetTick>
 800214c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002150:	f7fe fd80 	bl	8000c54 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b0a      	cmp	r3, #10
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e037      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002162:	f7ff fc27 	bl	80019b4 <LL_RCC_PLL_IsReady>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f1      	bne.n	8002150 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800216c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002176:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <HAL_RCC_OscConfig+0x700>)
 8002178:	4013      	ands	r3, r2
 800217a:	60cb      	str	r3, [r1, #12]
 800217c:	e028      	b.n	80021d0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e023      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	f003 0203 	and.w	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219c:	429a      	cmp	r2, r3
 800219e:	d115      	bne.n	80021cc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d10e      	bne.n	80021cc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d106      	bne.n	80021cc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3720      	adds	r7, #32
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	11c1808c 	.word	0x11c1808c
 80021e0:	eefefffc 	.word	0xeefefffc

080021e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e12c      	b.n	8002452 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b98      	ldr	r3, [pc, #608]	@ (800245c <HAL_RCC_ClockConfig+0x278>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d91b      	bls.n	800223e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b95      	ldr	r3, [pc, #596]	@ (800245c <HAL_RCC_ClockConfig+0x278>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4993      	ldr	r1, [pc, #588]	@ (800245c <HAL_RCC_ClockConfig+0x278>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002216:	f7fe fd1d 	bl	8000c54 <HAL_GetTick>
 800221a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221c:	e008      	b.n	8002230 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800221e:	f7fe fd19 	bl	8000c54 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e110      	b.n	8002452 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002230:	4b8a      	ldr	r3, [pc, #552]	@ (800245c <HAL_RCC_ClockConfig+0x278>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d1ef      	bne.n	800221e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d016      	beq.n	8002278 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fb02 	bl	8001858 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002254:	f7fe fcfe 	bl	8000c54 <HAL_GetTick>
 8002258:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800225c:	f7fe fcfa 	bl	8000c54 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e0f1      	b.n	8002452 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800226e:	f7ff fbdf 	bl	8001a30 <LL_RCC_IsActiveFlag_HPRE>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f1      	beq.n	800225c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d016      	beq.n	80022b2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff faf8 	bl	800187e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800228e:	f7fe fce1 	bl	8000c54 <HAL_GetTick>
 8002292:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002296:	f7fe fcdd 	bl	8000c54 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e0d4      	b.n	8002452 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80022a8:	f7ff fbd3 	bl	8001a52 <LL_RCC_IsActiveFlag_C2HPRE>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f1      	beq.n	8002296 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d016      	beq.n	80022ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff faf0 	bl	80018a8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022c8:	f7fe fcc4 	bl	8000c54 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022d0:	f7fe fcc0 	bl	8000c54 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e0b7      	b.n	8002452 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80022e2:	f7ff fbc8 	bl	8001a76 <LL_RCC_IsActiveFlag_SHDHPRE>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f1      	beq.n	80022d0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d016      	beq.n	8002326 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fae9 	bl	80018d4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002302:	f7fe fca7 	bl	8000c54 <HAL_GetTick>
 8002306:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800230a:	f7fe fca3 	bl	8000c54 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e09a      	b.n	8002452 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800231c:	f7ff fbbd 	bl	8001a9a <LL_RCC_IsActiveFlag_PPRE1>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f1      	beq.n	800230a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d017      	beq.n	8002362 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fade 	bl	80018fa <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800233e:	f7fe fc89 	bl	8000c54 <HAL_GetTick>
 8002342:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002344:	e008      	b.n	8002358 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002346:	f7fe fc85 	bl	8000c54 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e07c      	b.n	8002452 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002358:	f7ff fbb0 	bl	8001abc <LL_RCC_IsActiveFlag_PPRE2>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f1      	beq.n	8002346 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d043      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d106      	bne.n	8002384 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002376:	f7ff f956 	bl	8001626 <LL_RCC_HSE_IsReady>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d11e      	bne.n	80023be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e066      	b.n	8002452 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b03      	cmp	r3, #3
 800238a:	d106      	bne.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800238c:	f7ff fb12 	bl	80019b4 <LL_RCC_PLL_IsReady>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d113      	bne.n	80023be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e05b      	b.n	8002452 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80023a2:	f7ff f9f0 	bl	8001786 <LL_RCC_MSI_IsReady>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d108      	bne.n	80023be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e050      	b.n	8002452 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80023b0:	f7ff f966 	bl	8001680 <LL_RCC_HSI_IsReady>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e049      	b.n	8002452 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fa2a 	bl	800181c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c8:	f7fe fc44 	bl	8000c54 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d0:	f7fe fc40 	bl	8000c54 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e035      	b.n	8002452 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	f7ff fa2c 	bl	8001842 <LL_RCC_GetSysClkSource>
 80023ea:	4602      	mov	r2, r0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d1ec      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f6:	4b19      	ldr	r3, [pc, #100]	@ (800245c <HAL_RCC_ClockConfig+0x278>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d21b      	bcs.n	800243c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002404:	4b15      	ldr	r3, [pc, #84]	@ (800245c <HAL_RCC_ClockConfig+0x278>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 0207 	bic.w	r2, r3, #7
 800240c:	4913      	ldr	r1, [pc, #76]	@ (800245c <HAL_RCC_ClockConfig+0x278>)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002414:	f7fe fc1e 	bl	8000c54 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	e008      	b.n	800242e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800241c:	f7fe fc1a 	bl	8000c54 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e011      	b.n	8002452 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <HAL_RCC_ClockConfig+0x278>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d1ef      	bne.n	800241c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800243c:	f000 f8b4 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 8002440:	4603      	mov	r3, r0
 8002442:	4a07      	ldr	r2, [pc, #28]	@ (8002460 <HAL_RCC_ClockConfig+0x27c>)
 8002444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002446:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <HAL_RCC_ClockConfig+0x280>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fcea 	bl	8000e24 <HAL_InitTick>
 8002450:	4603      	mov	r3, r0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	58004000 	.word	0x58004000
 8002460:	20000004 	.word	0x20000004
 8002464:	20000008 	.word	0x20000008

08002468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002476:	f7ff f9e4 	bl	8001842 <LL_RCC_GetSysClkSource>
 800247a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800247c:	f7ff facd 	bl	8001a1a <LL_RCC_PLL_GetMainSource>
 8002480:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x2c>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d139      	bne.n	8002502 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d136      	bne.n	8002502 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002494:	f7ff f987 	bl	80017a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d115      	bne.n	80024ca <HAL_RCC_GetSysClockFreq+0x62>
 800249e:	f7ff f982 	bl	80017a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x4e>
 80024a8:	f7ff f98d 	bl	80017c6 <LL_RCC_MSI_GetRange>
 80024ac:	4603      	mov	r3, r0
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	e005      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x5a>
 80024b6:	f7ff f991 	bl	80017dc <LL_RCC_MSI_GetRangeAfterStandby>
 80024ba:	4603      	mov	r3, r0
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	4a36      	ldr	r2, [pc, #216]	@ (800259c <HAL_RCC_GetSysClockFreq+0x134>)
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	e014      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x8c>
 80024ca:	f7ff f96c 	bl	80017a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_GetSysClockFreq+0x7a>
 80024d4:	f7ff f977 	bl	80017c6 <LL_RCC_MSI_GetRange>
 80024d8:	4603      	mov	r3, r0
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	e005      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0x86>
 80024e2:	f7ff f97b 	bl	80017dc <LL_RCC_MSI_GetRangeAfterStandby>
 80024e6:	4603      	mov	r3, r0
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	4a2b      	ldr	r2, [pc, #172]	@ (800259c <HAL_RCC_GetSysClockFreq+0x134>)
 80024f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d115      	bne.n	8002528 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002500:	e012      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b04      	cmp	r3, #4
 8002506:	d102      	bne.n	800250e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002508:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	e00c      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b08      	cmp	r3, #8
 8002512:	d109      	bne.n	8002528 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002514:	f7ff f85a 	bl	80015cc <LL_RCC_HSE_IsEnabledDiv2>
 8002518:	4603      	mov	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	d102      	bne.n	8002524 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800251e:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e001      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002524:	4b1f      	ldr	r3, [pc, #124]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002526:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002528:	f7ff f98b 	bl	8001842 <LL_RCC_GetSysClkSource>
 800252c:	4603      	mov	r3, r0
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d12f      	bne.n	8002592 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002532:	f7ff fa72 	bl	8001a1a <LL_RCC_PLL_GetMainSource>
 8002536:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0xde>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d003      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0xe4>
 8002544:	e00d      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002546:	4b16      	ldr	r3, [pc, #88]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002548:	60fb      	str	r3, [r7, #12]
        break;
 800254a:	e00d      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800254c:	f7ff f83e 	bl	80015cc <LL_RCC_HSE_IsEnabledDiv2>
 8002550:	4603      	mov	r3, r0
 8002552:	2b01      	cmp	r3, #1
 8002554:	d102      	bne.n	800255c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002556:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002558:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800255a:	e005      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800255c:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800255e:	60fb      	str	r3, [r7, #12]
        break;
 8002560:	e002      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	60fb      	str	r3, [r7, #12]
        break;
 8002566:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002568:	f7ff fa35 	bl	80019d6 <LL_RCC_PLL_GetN>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	fb03 f402 	mul.w	r4, r3, r2
 8002574:	f7ff fa46 	bl	8001a04 <LL_RCC_PLL_GetDivider>
 8002578:	4603      	mov	r3, r0
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	3301      	adds	r3, #1
 800257e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002582:	f7ff fa34 	bl	80019ee <LL_RCC_PLL_GetR>
 8002586:	4603      	mov	r3, r0
 8002588:	0f5b      	lsrs	r3, r3, #29
 800258a:	3301      	adds	r3, #1
 800258c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002590:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002592:	697b      	ldr	r3, [r7, #20]
}
 8002594:	4618      	mov	r0, r3
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	bd90      	pop	{r4, r7, pc}
 800259c:	08009a9c 	.word	0x08009a9c
 80025a0:	00f42400 	.word	0x00f42400
 80025a4:	01e84800 	.word	0x01e84800

080025a8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a8:	b598      	push	{r3, r4, r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80025ac:	f7ff ff5c 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 80025b0:	4604      	mov	r4, r0
 80025b2:	f7ff f9b5 	bl	8001920 <LL_RCC_GetAHBPrescaler>
 80025b6:	4603      	mov	r3, r0
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	4a03      	ldr	r2, [pc, #12]	@ (80025cc <HAL_RCC_GetHCLKFreq+0x24>)
 80025c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd98      	pop	{r3, r4, r7, pc}
 80025cc:	08009a3c 	.word	0x08009a3c

080025d0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d0:	b598      	push	{r3, r4, r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80025d4:	f7ff ffe8 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025d8:	4604      	mov	r4, r0
 80025da:	f7ff f9b9 	bl	8001950 <LL_RCC_GetAPB1Prescaler>
 80025de:	4603      	mov	r3, r0
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	4a03      	ldr	r2, [pc, #12]	@ (80025f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd98      	pop	{r3, r4, r7, pc}
 80025f0:	08009a7c 	.word	0x08009a7c

080025f4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f4:	b598      	push	{r3, r4, r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80025f8:	f7ff ffd6 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025fc:	4604      	mov	r4, r0
 80025fe:	f7ff f9b2 	bl	8001966 <LL_RCC_GetAPB2Prescaler>
 8002602:	4603      	mov	r3, r0
 8002604:	0adb      	lsrs	r3, r3, #11
 8002606:	4a03      	ldr	r2, [pc, #12]	@ (8002614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd98      	pop	{r3, r4, r7, pc}
 8002614:	08009a7c 	.word	0x08009a7c

08002618 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	4a10      	ldr	r2, [pc, #64]	@ (800266c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002630:	f7ff f981 	bl	8001936 <LL_RCC_GetAHB3Prescaler>
 8002634:	4603      	mov	r3, r0
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	4a0c      	ldr	r2, [pc, #48]	@ (8002670 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	4a09      	ldr	r2, [pc, #36]	@ (8002674 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0c9c      	lsrs	r4, r3, #18
 8002654:	f7fe ff80 	bl	8001558 <HAL_PWREx_GetVoltageRange>
 8002658:	4603      	mov	r3, r0
 800265a:	4619      	mov	r1, r3
 800265c:	4620      	mov	r0, r4
 800265e:	f000 f80b 	bl	8002678 <RCC_SetFlashLatency>
 8002662:	4603      	mov	r3, r0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bd90      	pop	{r4, r7, pc}
 800266c:	08009a9c 	.word	0x08009a9c
 8002670:	08009a3c 	.word	0x08009a3c
 8002674:	431bde83 	.word	0x431bde83

08002678 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08e      	sub	sp, #56	@ 0x38
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002682:	4a3a      	ldr	r2, [pc, #232]	@ (800276c <RCC_SetFlashLatency+0xf4>)
 8002684:	f107 0320 	add.w	r3, r7, #32
 8002688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800268c:	6018      	str	r0, [r3, #0]
 800268e:	3304      	adds	r3, #4
 8002690:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002692:	4a37      	ldr	r2, [pc, #220]	@ (8002770 <RCC_SetFlashLatency+0xf8>)
 8002694:	f107 0318 	add.w	r3, r7, #24
 8002698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800269c:	6018      	str	r0, [r3, #0]
 800269e:	3304      	adds	r3, #4
 80026a0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80026a2:	4a34      	ldr	r2, [pc, #208]	@ (8002774 <RCC_SetFlashLatency+0xfc>)
 80026a4:	f107 030c 	add.w	r3, r7, #12
 80026a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80026aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80026ae:	2300      	movs	r3, #0
 80026b0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026b8:	d11b      	bne.n	80026f2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80026be:	e014      	b.n	80026ea <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80026c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	3338      	adds	r3, #56	@ 0x38
 80026c6:	443b      	add	r3, r7
 80026c8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80026cc:	461a      	mov	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d807      	bhi.n	80026e4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80026d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	3338      	adds	r3, #56	@ 0x38
 80026da:	443b      	add	r3, r7
 80026dc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80026e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80026e2:	e021      	b.n	8002728 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80026e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e6:	3301      	adds	r3, #1
 80026e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80026ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d9e7      	bls.n	80026c0 <RCC_SetFlashLatency+0x48>
 80026f0:	e01a      	b.n	8002728 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026f6:	e014      	b.n	8002722 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80026f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	3338      	adds	r3, #56	@ 0x38
 80026fe:	443b      	add	r3, r7
 8002700:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002704:	461a      	mov	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4293      	cmp	r3, r2
 800270a:	d807      	bhi.n	800271c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800270c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	3338      	adds	r3, #56	@ 0x38
 8002712:	443b      	add	r3, r7
 8002714:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002718:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800271a:	e005      	b.n	8002728 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800271c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271e:	3301      	adds	r3, #1
 8002720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002724:	2b02      	cmp	r3, #2
 8002726:	d9e7      	bls.n	80026f8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002728:	4b13      	ldr	r3, [pc, #76]	@ (8002778 <RCC_SetFlashLatency+0x100>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 0207 	bic.w	r2, r3, #7
 8002730:	4911      	ldr	r1, [pc, #68]	@ (8002778 <RCC_SetFlashLatency+0x100>)
 8002732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002738:	f7fe fa8c 	bl	8000c54 <HAL_GetTick>
 800273c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800273e:	e008      	b.n	8002752 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002740:	f7fe fa88 	bl	8000c54 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e007      	b.n	8002762 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002752:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <RCC_SetFlashLatency+0x100>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800275c:	429a      	cmp	r2, r3
 800275e:	d1ef      	bne.n	8002740 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3738      	adds	r7, #56	@ 0x38
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	080099fc 	.word	0x080099fc
 8002770:	08009a04 	.word	0x08009a04
 8002774:	08009a0c 	.word	0x08009a0c
 8002778:	58004000 	.word	0x58004000

0800277c <LL_RCC_LSE_IsReady>:
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d101      	bne.n	8002794 <LL_RCC_LSE_IsReady+0x18>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <LL_RCC_LSE_IsReady+0x1a>
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <LL_RCC_SetUSARTClockSource>:
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80027a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0c1b      	lsrs	r3, r3, #16
 80027b2:	43db      	mvns	r3, r3
 80027b4:	401a      	ands	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <LL_RCC_SetI2SClockSource>:
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80027d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <LL_RCC_SetLPUARTClockSource>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002808:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800280c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <LL_RCC_SetI2CClockSource>:
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800282a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800283a:	43db      	mvns	r3, r3
 800283c:	401a      	ands	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002846:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <LL_RCC_SetLPTIMClockSource>:
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002866:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	041b      	lsls	r3, r3, #16
 8002870:	43db      	mvns	r3, r3
 8002872:	401a      	ands	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	041b      	lsls	r3, r3, #16
 8002878:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <LL_RCC_SetRNGClockSource>:
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80028a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <LL_RCC_SetADCClockSource>:
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80028be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <LL_RCC_SetRTCClockSource>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80028e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <LL_RCC_GetRTCClockSource>:
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <LL_RCC_ForceBackupDomainReset>:
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002936:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800293a:	bf00      	nop
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002956:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
	...

08002964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002970:	2300      	movs	r3, #0
 8002972:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002974:	2300      	movs	r3, #0
 8002976:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d058      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002984:	f7fe fdda 	bl	800153c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002988:	f7fe f964 	bl	8000c54 <HAL_GetTick>
 800298c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800298e:	e009      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002990:	f7fe f960 	bl	8000c54 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d902      	bls.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	74fb      	strb	r3, [r7, #19]
        break;
 80029a2:	e006      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80029a4:	4b7b      	ldr	r3, [pc, #492]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029b0:	d1ee      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d13c      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80029b8:	f7ff ffa7 	bl	800290a <LL_RCC_GetRTCClockSource>
 80029bc:	4602      	mov	r2, r0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d00f      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029d2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029d4:	f7ff ffa5 	bl	8002922 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029d8:	f7ff ffb3 	bl	8002942 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d014      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe f930 	bl	8000c54 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80029f6:	e00b      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fe f92c 	bl	8000c54 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d902      	bls.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	74fb      	strb	r3, [r7, #19]
            break;
 8002a0e:	e004      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002a10:	f7ff feb4 	bl	800277c <LL_RCC_LSE_IsReady>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d1ee      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff5b 	bl	80028e0 <LL_RCC_SetRTCClockSource>
 8002a2a:	e004      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
 8002a30:	e001      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a32:	7cfb      	ldrb	r3, [r7, #19]
 8002a34:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d004      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fea9 	bl	800279e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d004      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fe9e 	bl	800279e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d004      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fec0 	bl	80027f8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fee6 	bl	800285a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fedb 	bl	800285a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d004      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fed0 	bl	800285a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fea9 	bl	8002822 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d004      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fe9e 	bl	8002822 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fe93 	bl	8002822 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d011      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fe5e 	bl	80027ce <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d010      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fea5 	bl	800288c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d107      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b58:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d011      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fea3 	bl	80028b6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b78:	d107      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b88:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002b8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	58000400 	.word	0x58000400

08002b98 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002ba8:	4904      	ldr	r1, [pc, #16]	@ (8002bbc <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	58000400 	.word	0x58000400

08002bc0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002bc4:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bca:	4a04      	ldr	r2, [pc, #16]	@ (8002bdc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	58000400 	.word	0x58000400

08002be0 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002be4:	4b05      	ldr	r3, [pc, #20]	@ (8002bfc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bea:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002bec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	58000400 	.word	0x58000400

08002c00 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002c04:	4b03      	ldr	r3, [pc, #12]	@ (8002c14 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002c06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c0a:	619a      	str	r2, [r3, #24]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	58000400 	.word	0x58000400

08002c18 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d101      	bne.n	8002c2c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	58000400 	.word	0x58000400

08002c3c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d101      	bne.n	8002c50 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	58000400 	.word	0x58000400

08002c60 <LL_RCC_RF_DisableReset>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_IsRFUnderReset>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c94:	d101      	bne.n	8002c9a <LL_RCC_IsRFUnderReset+0x1a>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <LL_RCC_IsRFUnderReset+0x1c>
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002cac:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <LL_EXTI_EnableIT_32_63+0x24>)
 8002cae:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002cb2:	4905      	ldr	r1, [pc, #20]	@ (8002cc8 <LL_EXTI_EnableIT_32_63+0x24>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	58000800 	.word	0x58000800

08002ccc <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d103      	bne.n	8002ce2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
    return status;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	e052      	b.n	8002d88 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	799b      	ldrb	r3, [r3, #6]
 8002cea:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8002cec:	7bbb      	ldrb	r3, [r7, #14]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_SUBGHZ_Init+0x2c>
 8002cf2:	7bbb      	ldrb	r3, [r7, #14]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d109      	bne.n	8002d0c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fd feda 	bl	8000ab8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8002d04:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002d08:	f7ff ffcc 	bl	8002ca4 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8002d0c:	7bbb      	ldrb	r3, [r7, #14]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d126      	bne.n	8002d60 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8002d18:	f7ff ffa2 	bl	8002c60 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002d90 <HAL_SUBGHZ_Init+0xc4>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	0cdb      	lsrs	r3, r3, #19
 8002d2a:	2264      	movs	r2, #100	@ 0x64
 8002d2c:	fb02 f303 	mul.w	r3, r2, r3
 8002d30:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	609a      	str	r2, [r3, #8]
        break;
 8002d42:	e007      	b.n	8002d54 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8002d4a:	f7ff ff99 	bl	8002c80 <LL_RCC_IsRFUnderReset>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ee      	bne.n	8002d32 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002d54:	f7ff ff34 	bl	8002bc0 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8002d58:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002d5c:	f7ff ff1c 	bl	8002b98 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8002d60:	f7ff ff4e 	bl	8002c00 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 faac 	bl	80032cc <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	719a      	strb	r2, [r3, #6]

  return status;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000004 	.word	0x20000004

08002d94 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	460b      	mov	r3, r1
 8002da2:	817b      	strh	r3, [r7, #10]
 8002da4:	4613      	mov	r3, r2
 8002da6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	799b      	ldrb	r3, [r3, #6]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d14a      	bne.n	8002e48 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	795b      	ldrb	r3, [r3, #5]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_SUBGHZ_WriteRegisters+0x2a>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e045      	b.n	8002e4a <HAL_SUBGHZ_WriteRegisters+0xb6>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fb4c 	bl	8003468 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002dd0:	f7ff ff06 	bl	8002be0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8002dd4:	210d      	movs	r1, #13
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fa98 	bl	800330c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8002ddc:	897b      	ldrh	r3, [r7, #10]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	4619      	mov	r1, r3
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fa90 	bl	800330c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8002dec:	897b      	ldrh	r3, [r7, #10]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	4619      	mov	r1, r3
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fa8a 	bl	800330c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	82bb      	strh	r3, [r7, #20]
 8002dfc:	e00a      	b.n	8002e14 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002dfe:	8abb      	ldrh	r3, [r7, #20]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	4619      	mov	r1, r3
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fa7f 	bl	800330c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002e0e:	8abb      	ldrh	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	82bb      	strh	r3, [r7, #20]
 8002e14:	8aba      	ldrh	r2, [r7, #20]
 8002e16:	893b      	ldrh	r3, [r7, #8]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d3f0      	bcc.n	8002dfe <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002e1c:	f7ff fed0 	bl	8002bc0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fb45 	bl	80034b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	75fb      	strb	r3, [r7, #23]
 8002e32:	e001      	b.n	8002e38 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	715a      	strb	r2, [r3, #5]

    return status;
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	e000      	b.n	8002e4a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002e48:	2302      	movs	r3, #2
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b088      	sub	sp, #32
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	460b      	mov	r3, r1
 8002e60:	817b      	strh	r3, [r7, #10]
 8002e62:	4613      	mov	r3, r2
 8002e64:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	799b      	ldrb	r3, [r3, #6]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d14a      	bne.n	8002f0a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	795b      	ldrb	r3, [r3, #5]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e045      	b.n	8002f0c <HAL_SUBGHZ_ReadRegisters+0xba>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 faee 	bl	8003468 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002e8c:	f7ff fea8 	bl	8002be0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8002e90:	211d      	movs	r1, #29
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fa3a 	bl	800330c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8002e98:	897b      	ldrh	r3, [r7, #10]
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fa32 	bl	800330c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8002ea8:	897b      	ldrh	r3, [r7, #10]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	4619      	mov	r1, r3
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fa2c 	bl	800330c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fa28 	bl	800330c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	82fb      	strh	r3, [r7, #22]
 8002ec0:	e009      	b.n	8002ed6 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002ec2:	69b9      	ldr	r1, [r7, #24]
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 fa77 	bl	80033b8 <SUBGHZSPI_Receive>
      pData++;
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002ed0:	8afb      	ldrh	r3, [r7, #22]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	82fb      	strh	r3, [r7, #22]
 8002ed6:	8afa      	ldrh	r2, [r7, #22]
 8002ed8:	893b      	ldrh	r3, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3f1      	bcc.n	8002ec2 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002ede:	f7ff fe6f 	bl	8002bc0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fae4 	bl	80034b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	e001      	b.n	8002efa <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	715a      	strb	r2, [r3, #5]

    return status;
 8002f06:	7ffb      	ldrb	r3, [r7, #31]
 8002f08:	e000      	b.n	8002f0c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	460b      	mov	r3, r1
 8002f22:	72fb      	strb	r3, [r7, #11]
 8002f24:	4613      	mov	r3, r2
 8002f26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	799b      	ldrb	r3, [r3, #6]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d14a      	bne.n	8002fc8 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	795b      	ldrb	r3, [r3, #5]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e045      	b.n	8002fca <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fa8f 	bl	8003468 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
 8002f4c:	2b84      	cmp	r3, #132	@ 0x84
 8002f4e:	d002      	beq.n	8002f56 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002f50:	7afb      	ldrb	r3, [r7, #11]
 8002f52:	2b94      	cmp	r3, #148	@ 0x94
 8002f54:	d103      	bne.n	8002f5e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	711a      	strb	r2, [r3, #4]
 8002f5c:	e002      	b.n	8002f64 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002f64:	f7ff fe3c 	bl	8002be0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002f68:	7afb      	ldrb	r3, [r7, #11]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f9cd 	bl	800330c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002f72:	2300      	movs	r3, #0
 8002f74:	82bb      	strh	r3, [r7, #20]
 8002f76:	e00a      	b.n	8002f8e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002f78:	8abb      	ldrh	r3, [r7, #20]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	4619      	mov	r1, r3
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f9c2 	bl	800330c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002f88:	8abb      	ldrh	r3, [r7, #20]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	82bb      	strh	r3, [r7, #20]
 8002f8e:	8aba      	ldrh	r2, [r7, #20]
 8002f90:	893b      	ldrh	r3, [r7, #8]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d3f0      	bcc.n	8002f78 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002f96:	f7ff fe13 	bl	8002bc0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8002f9a:	7afb      	ldrb	r3, [r7, #11]
 8002f9c:	2b84      	cmp	r3, #132	@ 0x84
 8002f9e:	d002      	beq.n	8002fa6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fa85 	bl	80034b0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
 8002fb2:	e001      	b.n	8002fb8 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	715a      	strb	r2, [r3, #5]

    return status;
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	e000      	b.n	8002fca <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
  }
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b088      	sub	sp, #32
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	460b      	mov	r3, r1
 8002fe0:	72fb      	strb	r3, [r7, #11]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	799b      	ldrb	r3, [r3, #6]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d13d      	bne.n	8003070 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	795b      	ldrb	r3, [r3, #5]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e038      	b.n	8003072 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fa2e 	bl	8003468 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800300c:	f7ff fde8 	bl	8002be0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	4619      	mov	r1, r3
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f979 	bl	800330c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800301a:	2100      	movs	r1, #0
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f975 	bl	800330c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003022:	2300      	movs	r3, #0
 8003024:	82fb      	strh	r3, [r7, #22]
 8003026:	e009      	b.n	800303c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003028:	69b9      	ldr	r1, [r7, #24]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f9c4 	bl	80033b8 <SUBGHZSPI_Receive>
      pData++;
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	3301      	adds	r3, #1
 8003034:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003036:	8afb      	ldrh	r3, [r7, #22]
 8003038:	3301      	adds	r3, #1
 800303a:	82fb      	strh	r3, [r7, #22]
 800303c:	8afa      	ldrh	r2, [r7, #22]
 800303e:	893b      	ldrh	r3, [r7, #8]
 8003040:	429a      	cmp	r2, r3
 8003042:	d3f1      	bcc.n	8003028 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003044:	f7ff fdbc 	bl	8002bc0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fa31 	bl	80034b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e001      	b.n	8003060 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	715a      	strb	r2, [r3, #5]

    return status;
 800306c:	7ffb      	ldrb	r3, [r7, #31]
 800306e:	e000      	b.n	8003072 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	461a      	mov	r2, r3
 8003086:	460b      	mov	r3, r1
 8003088:	72fb      	strb	r3, [r7, #11]
 800308a:	4613      	mov	r3, r2
 800308c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	799b      	ldrb	r3, [r3, #6]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d13e      	bne.n	8003116 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	795b      	ldrb	r3, [r3, #5]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e039      	b.n	8003118 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f9dc 	bl	8003468 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80030b0:	f7ff fd96 	bl	8002be0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80030b4:	210e      	movs	r1, #14
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f928 	bl	800330c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80030bc:	7afb      	ldrb	r3, [r7, #11]
 80030be:	4619      	mov	r1, r3
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f923 	bl	800330c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	82bb      	strh	r3, [r7, #20]
 80030ca:	e00a      	b.n	80030e2 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80030cc:	8abb      	ldrh	r3, [r7, #20]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f918 	bl	800330c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80030dc:	8abb      	ldrh	r3, [r7, #20]
 80030de:	3301      	adds	r3, #1
 80030e0:	82bb      	strh	r3, [r7, #20]
 80030e2:	8aba      	ldrh	r2, [r7, #20]
 80030e4:	893b      	ldrh	r3, [r7, #8]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d3f0      	bcc.n	80030cc <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80030ea:	f7ff fd69 	bl	8002bc0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f9de 	bl	80034b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75fb      	strb	r3, [r7, #23]
 8003100:	e001      	b.n	8003106 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	715a      	strb	r2, [r3, #5]

    return status;
 8003112:	7dfb      	ldrb	r3, [r7, #23]
 8003114:	e000      	b.n	8003118 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	461a      	mov	r2, r3
 800312c:	460b      	mov	r3, r1
 800312e:	72fb      	strb	r3, [r7, #11]
 8003130:	4613      	mov	r3, r2
 8003132:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	799b      	ldrb	r3, [r3, #6]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d141      	bne.n	80031c6 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	795b      	ldrb	r3, [r3, #5]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800314a:	2302      	movs	r3, #2
 800314c:	e03c      	b.n	80031c8 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f987 	bl	8003468 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800315a:	f7ff fd41 	bl	8002be0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800315e:	211e      	movs	r1, #30
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f8d3 	bl	800330c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003166:	7afb      	ldrb	r3, [r7, #11]
 8003168:	4619      	mov	r1, r3
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f8ce 	bl	800330c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003170:	2100      	movs	r1, #0
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f8ca 	bl	800330c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003178:	2300      	movs	r3, #0
 800317a:	82fb      	strh	r3, [r7, #22]
 800317c:	e009      	b.n	8003192 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800317e:	69b9      	ldr	r1, [r7, #24]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f919 	bl	80033b8 <SUBGHZSPI_Receive>
      pData++;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	3301      	adds	r3, #1
 800318a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800318c:	8afb      	ldrh	r3, [r7, #22]
 800318e:	3301      	adds	r3, #1
 8003190:	82fb      	strh	r3, [r7, #22]
 8003192:	8afa      	ldrh	r2, [r7, #22]
 8003194:	893b      	ldrh	r3, [r7, #8]
 8003196:	429a      	cmp	r2, r3
 8003198:	d3f1      	bcc.n	800317e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800319a:	f7ff fd11 	bl	8002bc0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f986 	bl	80034b0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e001      	b.n	80031b6 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	715a      	strb	r2, [r3, #5]

    return status;
 80031c2:	7ffb      	ldrb	r3, [r7, #31]
 80031c4:	e000      	b.n	80031c8 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
  }
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3720      	adds	r7, #32
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80031d8:	2300      	movs	r3, #0
 80031da:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80031dc:	f107 020c 	add.w	r2, r7, #12
 80031e0:	2302      	movs	r3, #2
 80031e2:	2112      	movs	r1, #18
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fef4 	bl	8002fd2 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80031ea:	7b3b      	ldrb	r3, [r7, #12]
 80031ec:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80031ee:	89fb      	ldrh	r3, [r7, #14]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	b21a      	sxth	r2, r3
 80031f4:	7b7b      	ldrb	r3, [r7, #13]
 80031f6:	b21b      	sxth	r3, r3
 80031f8:	4313      	orrs	r3, r2
 80031fa:	b21b      	sxth	r3, r3
 80031fc:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80031fe:	f107 020c 	add.w	r2, r7, #12
 8003202:	2302      	movs	r3, #2
 8003204:	2102      	movs	r1, #2
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff fe84 	bl	8002f14 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800320c:	89fb      	ldrh	r3, [r7, #14]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f005 fe54 	bl	8008ec4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800321c:	89fb      	ldrh	r3, [r7, #14]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f005 fe5a 	bl	8008ee0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800322c:	89fb      	ldrh	r3, [r7, #14]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f005 feaa 	bl	8008f90 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800323c:	89fb      	ldrh	r3, [r7, #14]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f005 feb0 	bl	8008fac <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800324c:	89fb      	ldrh	r3, [r7, #14]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f005 feb6 	bl	8008fc8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800325c:	89fb      	ldrh	r3, [r7, #14]
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f005 fe84 	bl	8008f74 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800326c:	89fb      	ldrh	r3, [r7, #14]
 800326e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f005 fe40 	bl	8008efc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800327c:	89fb      	ldrh	r3, [r7, #14]
 800327e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003286:	89fb      	ldrh	r3, [r7, #14]
 8003288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d004      	beq.n	800329a <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003290:	2101      	movs	r1, #1
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f005 fe40 	bl	8008f18 <HAL_SUBGHZ_CADStatusCallback>
 8003298:	e003      	b.n	80032a2 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800329a:	2100      	movs	r1, #0
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f005 fe3b 	bl	8008f18 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80032a2:	89fb      	ldrh	r3, [r7, #14]
 80032a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f005 fe51 	bl	8008f54 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80032b2:	89fb      	ldrh	r3, [r7, #14]
 80032b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f005 fe91 	bl	8008fe4 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80032d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <SUBGHZSPI_Init+0x3c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003308 <SUBGHZSPI_Init+0x3c>)
 80032da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032de:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80032e0:	4a09      	ldr	r2, [pc, #36]	@ (8003308 <SUBGHZSPI_Init+0x3c>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80032e8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80032ea:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <SUBGHZSPI_Init+0x3c>)
 80032ec:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80032f0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80032f2:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <SUBGHZSPI_Init+0x3c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a04      	ldr	r2, [pc, #16]	@ (8003308 <SUBGHZSPI_Init+0x3c>)
 80032f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032fc:	6013      	str	r3, [r2, #0]
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	58010000 	.word	0x58010000

0800330c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800331c:	4b23      	ldr	r3, [pc, #140]	@ (80033ac <SUBGHZSPI_Transmit+0xa0>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	0cdb      	lsrs	r3, r3, #19
 800332a:	2264      	movs	r2, #100	@ 0x64
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	609a      	str	r2, [r3, #8]
      break;
 8003342:	e008      	b.n	8003356 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3b01      	subs	r3, #1
 8003348:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800334a:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <SUBGHZSPI_Transmit+0xa4>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b02      	cmp	r3, #2
 8003354:	d1ed      	bne.n	8003332 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003356:	4b17      	ldr	r3, [pc, #92]	@ (80033b4 <SUBGHZSPI_Transmit+0xa8>)
 8003358:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003360:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <SUBGHZSPI_Transmit+0xa0>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	0cdb      	lsrs	r3, r3, #19
 800336e:	2264      	movs	r2, #100	@ 0x64
 8003370:	fb02 f303 	mul.w	r3, r2, r3
 8003374:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d105      	bne.n	8003388 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	609a      	str	r2, [r3, #8]
      break;
 8003386:	e008      	b.n	800339a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3b01      	subs	r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800338e:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <SUBGHZSPI_Transmit+0xa4>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d1ed      	bne.n	8003376 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800339a:	4b05      	ldr	r3, [pc, #20]	@ (80033b0 <SUBGHZSPI_Transmit+0xa4>)
 800339c:	68db      	ldr	r3, [r3, #12]

  return status;
 800339e:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000004 	.word	0x20000004
 80033b0:	58010000 	.word	0x58010000
 80033b4:	5801000c 	.word	0x5801000c

080033b8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80033c6:	4b25      	ldr	r3, [pc, #148]	@ (800345c <SUBGHZSPI_Receive+0xa4>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	0cdb      	lsrs	r3, r3, #19
 80033d4:	2264      	movs	r2, #100	@ 0x64
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	609a      	str	r2, [r3, #8]
      break;
 80033ec:	e008      	b.n	8003400 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80033f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003460 <SUBGHZSPI_Receive+0xa8>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d1ed      	bne.n	80033dc <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003400:	4b18      	ldr	r3, [pc, #96]	@ (8003464 <SUBGHZSPI_Receive+0xac>)
 8003402:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	22ff      	movs	r2, #255	@ 0xff
 8003408:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800340a:	4b14      	ldr	r3, [pc, #80]	@ (800345c <SUBGHZSPI_Receive+0xa4>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	0cdb      	lsrs	r3, r3, #19
 8003418:	2264      	movs	r2, #100	@ 0x64
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	609a      	str	r2, [r3, #8]
      break;
 8003430:	e008      	b.n	8003444 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3b01      	subs	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003438:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <SUBGHZSPI_Receive+0xa8>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d1ed      	bne.n	8003420 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003444:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <SUBGHZSPI_Receive+0xa8>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	701a      	strb	r2, [r3, #0]

  return status;
 800344e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003450:	4618      	mov	r0, r3
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000004 	.word	0x20000004
 8003460:	58010000 	.word	0x58010000
 8003464:	5801000c 	.word	0x5801000c

08003468 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	791b      	ldrb	r3, [r3, #4]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d111      	bne.n	800349c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003478:	4b0c      	ldr	r3, [pc, #48]	@ (80034ac <SUBGHZ_CheckDeviceReady+0x44>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003488:	f7ff fbaa 	bl	8002be0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3b01      	subs	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f9      	bne.n	800348c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003498:	f7ff fb92 	bl	8002bc0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f807 	bl	80034b0 <SUBGHZ_WaitOnBusy>
 80034a2:	4603      	mov	r3, r0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20000004 	.word	0x20000004

080034b0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80034bc:	4b12      	ldr	r3, [pc, #72]	@ (8003508 <SUBGHZ_WaitOnBusy+0x58>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	0d1b      	lsrs	r3, r3, #20
 80034ca:	2264      	movs	r2, #100	@ 0x64
 80034cc:	fb02 f303 	mul.w	r3, r2, r3
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80034d2:	f7ff fbb3 	bl	8002c3c <LL_PWR_IsActiveFlag_RFBUSYMS>
 80034d6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d105      	bne.n	80034ea <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	609a      	str	r2, [r3, #8]
      break;
 80034e8:	e009      	b.n	80034fe <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80034f0:	f7ff fb92 	bl	8002c18 <LL_PWR_IsActiveFlag_RFBUSYS>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d0e9      	beq.n	80034d2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000004 	.word	0x20000004

0800350c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e049      	b.n	80035b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd fad4 	bl	8000ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f000 fa8e 	bl	8003a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d001      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e036      	b.n	8003642 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a16      	ldr	r2, [pc, #88]	@ (800364c <HAL_TIM_Base_Start_IT+0x90>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x44>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035fe:	d115      	bne.n	800362c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <HAL_TIM_Base_Start_IT+0x94>)
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b06      	cmp	r3, #6
 8003610:	d015      	beq.n	800363e <HAL_TIM_Base_Start_IT+0x82>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003618:	d011      	beq.n	800363e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	e008      	b.n	800363e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e000      	b.n	8003640 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	40012c00 	.word	0x40012c00
 8003650:	00010007 	.word	0x00010007

08003654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b02      	cmp	r3, #2
 8003668:	d122      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b02      	cmp	r3, #2
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0202 	mvn.w	r2, #2
 8003680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f9cd 	bl	8003a36 <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f9c0 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f9cf 	bl	8003a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d122      	bne.n	8003704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0204 	mvn.w	r2, #4
 80036d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2202      	movs	r2, #2
 80036da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f9a3 	bl	8003a36 <HAL_TIM_IC_CaptureCallback>
 80036f0:	e005      	b.n	80036fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f996 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f9a5 	bl	8003a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b08      	cmp	r3, #8
 8003710:	d122      	bne.n	8003758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b08      	cmp	r3, #8
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0208 	mvn.w	r2, #8
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2204      	movs	r2, #4
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f979 	bl	8003a36 <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f96c 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f97b 	bl	8003a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b10      	cmp	r3, #16
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b10      	cmp	r3, #16
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0210 	mvn.w	r2, #16
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2208      	movs	r2, #8
 8003782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f94f 	bl	8003a36 <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f942 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f951 	bl	8003a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d10e      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d107      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0201 	mvn.w	r2, #1
 80037d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fc fe60 	bl	8000498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e2:	2b80      	cmp	r3, #128	@ 0x80
 80037e4:	d10e      	bne.n	8003804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f0:	2b80      	cmp	r3, #128	@ 0x80
 80037f2:	d107      	bne.n	8003804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa95 	bl	8003d2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003812:	d10e      	bne.n	8003832 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381e:	2b80      	cmp	r3, #128	@ 0x80
 8003820:	d107      	bne.n	8003832 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800382a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fa87 	bl	8003d40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383c:	2b40      	cmp	r3, #64	@ 0x40
 800383e:	d10e      	bne.n	800385e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384a:	2b40      	cmp	r3, #64	@ 0x40
 800384c:	d107      	bne.n	800385e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f8fe 	bl	8003a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b20      	cmp	r3, #32
 800386a:	d10e      	bne.n	800388a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b20      	cmp	r3, #32
 8003878:	d107      	bne.n	800388a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f06f 0220 	mvn.w	r2, #32
 8003882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fa49 	bl	8003d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_TIM_ConfigClockSource+0x1c>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e0b6      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x18a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80038cc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ea:	d03e      	beq.n	800396a <HAL_TIM_ConfigClockSource+0xd8>
 80038ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038f0:	f200 8087 	bhi.w	8003a02 <HAL_TIM_ConfigClockSource+0x170>
 80038f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f8:	f000 8086 	beq.w	8003a08 <HAL_TIM_ConfigClockSource+0x176>
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003900:	d87f      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x170>
 8003902:	2b70      	cmp	r3, #112	@ 0x70
 8003904:	d01a      	beq.n	800393c <HAL_TIM_ConfigClockSource+0xaa>
 8003906:	2b70      	cmp	r3, #112	@ 0x70
 8003908:	d87b      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x170>
 800390a:	2b60      	cmp	r3, #96	@ 0x60
 800390c:	d050      	beq.n	80039b0 <HAL_TIM_ConfigClockSource+0x11e>
 800390e:	2b60      	cmp	r3, #96	@ 0x60
 8003910:	d877      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x170>
 8003912:	2b50      	cmp	r3, #80	@ 0x50
 8003914:	d03c      	beq.n	8003990 <HAL_TIM_ConfigClockSource+0xfe>
 8003916:	2b50      	cmp	r3, #80	@ 0x50
 8003918:	d873      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x170>
 800391a:	2b40      	cmp	r3, #64	@ 0x40
 800391c:	d058      	beq.n	80039d0 <HAL_TIM_ConfigClockSource+0x13e>
 800391e:	2b40      	cmp	r3, #64	@ 0x40
 8003920:	d86f      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x170>
 8003922:	2b30      	cmp	r3, #48	@ 0x30
 8003924:	d064      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0x15e>
 8003926:	2b30      	cmp	r3, #48	@ 0x30
 8003928:	d86b      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x170>
 800392a:	2b20      	cmp	r3, #32
 800392c:	d060      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0x15e>
 800392e:	2b20      	cmp	r3, #32
 8003930:	d867      	bhi.n	8003a02 <HAL_TIM_ConfigClockSource+0x170>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d05c      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0x15e>
 8003936:	2b10      	cmp	r3, #16
 8003938:	d05a      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0x15e>
 800393a:	e062      	b.n	8003a02 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800394c:	f000 f969 	bl	8003c22 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800395e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	609a      	str	r2, [r3, #8]
      break;
 8003968:	e04f      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800397a:	f000 f952 	bl	8003c22 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800398c:	609a      	str	r2, [r3, #8]
      break;
 800398e:	e03c      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800399c:	461a      	mov	r2, r3
 800399e:	f000 f8c7 	bl	8003b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2150      	movs	r1, #80	@ 0x50
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 f91e 	bl	8003bea <TIM_ITRx_SetConfig>
      break;
 80039ae:	e02c      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039bc:	461a      	mov	r2, r3
 80039be:	f000 f8e5 	bl	8003b8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2160      	movs	r1, #96	@ 0x60
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 f90e 	bl	8003bea <TIM_ITRx_SetConfig>
      break;
 80039ce:	e01c      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039dc:	461a      	mov	r2, r3
 80039de:	f000 f8a7 	bl	8003b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2140      	movs	r1, #64	@ 0x40
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f8fe 	bl	8003bea <TIM_ITRx_SetConfig>
      break;
 80039ee:	e00c      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f000 f8f5 	bl	8003bea <TIM_ITRx_SetConfig>
      break;
 8003a00:	e003      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	73fb      	strb	r3, [r7, #15]
      break;
 8003a06:	e000      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a29      	ldr	r2, [pc, #164]	@ (8003b24 <TIM_Base_SetConfig+0xb8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <TIM_Base_SetConfig+0x20>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8a:	d108      	bne.n	8003a9e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a20      	ldr	r2, [pc, #128]	@ (8003b24 <TIM_Base_SetConfig+0xb8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00b      	beq.n	8003abe <TIM_Base_SetConfig+0x52>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aac:	d007      	beq.n	8003abe <TIM_Base_SetConfig+0x52>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b28 <TIM_Base_SetConfig+0xbc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_Base_SetConfig+0x52>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b2c <TIM_Base_SetConfig+0xc0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d108      	bne.n	8003ad0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a0b      	ldr	r2, [pc, #44]	@ (8003b24 <TIM_Base_SetConfig+0xb8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d007      	beq.n	8003b0c <TIM_Base_SetConfig+0xa0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a0a      	ldr	r2, [pc, #40]	@ (8003b28 <TIM_Base_SetConfig+0xbc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_Base_SetConfig+0xa0>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a09      	ldr	r2, [pc, #36]	@ (8003b2c <TIM_Base_SetConfig+0xc0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d103      	bne.n	8003b14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	615a      	str	r2, [r3, #20]
}
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40014400 	.word	0x40014400
 8003b2c:	40014800 	.word	0x40014800

08003b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	f023 0201 	bic.w	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f023 030a 	bic.w	r3, r3, #10
 8003b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	621a      	str	r2, [r3, #32]
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr

08003b8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f023 0210 	bic.w	r2, r3, #16
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	031b      	lsls	r3, r3, #12
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	621a      	str	r2, [r3, #32]
}
 8003be0:	bf00      	nop
 8003be2:	371c      	adds	r7, #28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr

08003bea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b085      	sub	sp, #20
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f043 0307 	orr.w	r3, r3, #7
 8003c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	609a      	str	r2, [r3, #8]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b087      	sub	sp, #28
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	021a      	lsls	r2, r3, #8
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	609a      	str	r2, [r3, #8]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e04a      	b.n	8003d0e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d108      	bne.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003ca8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a11      	ldr	r2, [pc, #68]	@ (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d004      	beq.n	8003ce2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ce8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr
 8003d18:	40012c00 	.word	0x40012c00

08003d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <LL_RCC_GetUSARTClockSource>:
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	401a      	ands	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	4313      	orrs	r3, r2
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <LL_RCC_GetLPUARTClockSource>:
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d82:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4013      	ands	r3, r2
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e042      	b.n	8003e2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7fc fead 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2224      	movs	r2, #36	@ 0x24
 8003dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fc40 	bl	800465c <UART_SetConfig>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e022      	b.n	8003e2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fea8 	bl	8004b44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 ff2e 	bl	8004c86 <UART_CheckIdleState>
 8003e2a:	4603      	mov	r3, r0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	@ 0x28
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d173      	bne.n	8003f36 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_UART_Transmit+0x26>
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e06c      	b.n	8003f38 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2221      	movs	r2, #33	@ 0x21
 8003e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e6e:	f7fc fef1 	bl	8000c54 <HAL_GetTick>
 8003e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	88fa      	ldrh	r2, [r7, #6]
 8003e78:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	88fa      	ldrh	r2, [r7, #6]
 8003e80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e8c:	d108      	bne.n	8003ea0 <HAL_UART_Transmit+0x6c>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	e003      	b.n	8003ea8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ea8:	e02c      	b.n	8003f04 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2180      	movs	r1, #128	@ 0x80
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 ff34 	bl	8004d22 <UART_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e039      	b.n	8003f38 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10b      	bne.n	8003ee2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	3302      	adds	r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	e007      	b.n	8003ef2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	781a      	ldrb	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1cc      	bne.n	8003eaa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2200      	movs	r2, #0
 8003f18:	2140      	movs	r1, #64	@ 0x40
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 ff01 	bl	8004d22 <UART_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e006      	b.n	8003f38 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e000      	b.n	8003f38 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
  }
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d137      	bne.n	8003fc8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_UART_Receive_IT+0x24>
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e030      	b.n	8003fca <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a18      	ldr	r2, [pc, #96]	@ (8003fd4 <HAL_UART_Receive_IT+0x94>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d01f      	beq.n	8003fb8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d018      	beq.n	8003fb8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	613b      	str	r3, [r7, #16]
   return(result);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	623b      	str	r3, [r7, #32]
 8003fa6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	69f9      	ldr	r1, [r7, #28]
 8003faa:	6a3a      	ldr	r2, [r7, #32]
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e6      	bne.n	8003f86 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 ff78 	bl	8004eb4 <UART_Start_Receive_IT>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	e000      	b.n	8003fca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
  }
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3728      	adds	r7, #40	@ 0x28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40008000 	.word	0x40008000

08003fd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b0ba      	sub	sp, #232	@ 0xe8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ffe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004002:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004006:	4013      	ands	r3, r2
 8004008:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800400c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d11b      	bne.n	800404c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d105      	bne.n	8004038 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800402c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d009      	beq.n	800404c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 82e3 	beq.w	8004608 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
      }
      return;
 800404a:	e2dd      	b.n	8004608 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800404c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 8123 	beq.w	800429c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004056:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800405a:	4b8d      	ldr	r3, [pc, #564]	@ (8004290 <HAL_UART_IRQHandler+0x2b8>)
 800405c:	4013      	ands	r3, r2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004062:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004066:	4b8b      	ldr	r3, [pc, #556]	@ (8004294 <HAL_UART_IRQHandler+0x2bc>)
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8116 	beq.w	800429c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d011      	beq.n	80040a0 <HAL_UART_IRQHandler+0xc8>
 800407c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2201      	movs	r2, #1
 800408e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004096:	f043 0201 	orr.w	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d011      	beq.n	80040d0 <HAL_UART_IRQHandler+0xf8>
 80040ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00b      	beq.n	80040d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2202      	movs	r2, #2
 80040be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d011      	beq.n	8004100 <HAL_UART_IRQHandler+0x128>
 80040dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00b      	beq.n	8004100 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2204      	movs	r2, #4
 80040ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f6:	f043 0202 	orr.w	r2, r3, #2
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d017      	beq.n	800413c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800410c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004118:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800411c:	4b5c      	ldr	r3, [pc, #368]	@ (8004290 <HAL_UART_IRQHandler+0x2b8>)
 800411e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00b      	beq.n	800413c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2208      	movs	r2, #8
 800412a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004132:	f043 0208 	orr.w	r2, r3, #8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800413c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004140:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004144:	2b00      	cmp	r3, #0
 8004146:	d012      	beq.n	800416e <HAL_UART_IRQHandler+0x196>
 8004148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800414c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00c      	beq.n	800416e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800415c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004164:	f043 0220 	orr.w	r2, r3, #32
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8249 	beq.w	800460c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d013      	beq.n	80041ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c2:	2b40      	cmp	r3, #64	@ 0x40
 80041c4:	d005      	beq.n	80041d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d054      	beq.n	800427c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 ff8e 	bl	80050f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e2:	2b40      	cmp	r3, #64	@ 0x40
 80041e4:	d146      	bne.n	8004274 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3308      	adds	r3, #8
 80041ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3308      	adds	r3, #8
 800420e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004212:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004216:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800421e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800422a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1d9      	bne.n	80041e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004238:	2b00      	cmp	r3, #0
 800423a:	d017      	beq.n	800426c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004242:	4a15      	ldr	r2, [pc, #84]	@ (8004298 <HAL_UART_IRQHandler+0x2c0>)
 8004244:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800424c:	4618      	mov	r0, r3
 800424e:	f7fc ff9e 	bl	800118e <HAL_DMA_Abort_IT>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d019      	beq.n	800428c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800425e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004266:	4610      	mov	r0, r2
 8004268:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426a:	e00f      	b.n	800428c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f9e0 	bl	8004632 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004272:	e00b      	b.n	800428c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f9dc 	bl	8004632 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427a:	e007      	b.n	800428c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f9d8 	bl	8004632 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800428a:	e1bf      	b.n	800460c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	bf00      	nop
    return;
 800428e:	e1bd      	b.n	800460c <HAL_UART_IRQHandler+0x634>
 8004290:	10000001 	.word	0x10000001
 8004294:	04000120 	.word	0x04000120
 8004298:	080051bf 	.word	0x080051bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	f040 8153 	bne.w	800454c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 814c 	beq.w	800454c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8145 	beq.w	800454c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2210      	movs	r2, #16
 80042c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d4:	2b40      	cmp	r3, #64	@ 0x40
 80042d6:	f040 80bb 	bne.w	8004450 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 818f 	beq.w	8004610 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042fc:	429a      	cmp	r2, r3
 80042fe:	f080 8187 	bcs.w	8004610 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004308:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 8087 	bne.w	800442e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004334:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800433c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800434a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800434e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004356:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004362:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1da      	bne.n	8004320 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3308      	adds	r3, #8
 8004370:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800437a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3308      	adds	r3, #8
 800438a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800438e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004392:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004396:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e1      	bne.n	800436a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3308      	adds	r3, #8
 80043ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3308      	adds	r3, #8
 80043c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80043ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e3      	bne.n	80043a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043fc:	f023 0310 	bic.w	r3, r3, #16
 8004400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800440e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004410:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004414:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800441c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e4      	bne.n	80043ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc fe52 	bl	80010d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004440:	b29b      	uxth	r3, r3
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	b29b      	uxth	r3, r3
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f8fb 	bl	8004644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800444e:	e0df      	b.n	8004610 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800445c:	b29b      	uxth	r3, r3
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80d1 	beq.w	8004614 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004472:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80cc 	beq.w	8004614 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800448a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004490:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800449e:	647b      	str	r3, [r7, #68]	@ 0x44
 80044a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e4      	bne.n	800447c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3308      	adds	r3, #8
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	623b      	str	r3, [r7, #32]
   return(result);
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044da:	633a      	str	r2, [r7, #48]	@ 0x30
 80044dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e1      	bne.n	80044b2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0310 	bic.w	r3, r3, #16
 8004516:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004524:	61fb      	str	r3, [r7, #28]
 8004526:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	69b9      	ldr	r1, [r7, #24]
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	617b      	str	r3, [r7, #20]
   return(result);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e4      	bne.n	8004502 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800453e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004542:	4619      	mov	r1, r3
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f87d 	bl	8004644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800454a:	e063      	b.n	8004614 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800454c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004550:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00e      	beq.n	8004576 <HAL_UART_IRQHandler+0x59e>
 8004558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800455c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800456c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f001 fb82 	bl	8005c78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004574:	e051      	b.n	800461a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457e:	2b00      	cmp	r3, #0
 8004580:	d014      	beq.n	80045ac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458a:	2b00      	cmp	r3, #0
 800458c:	d105      	bne.n	800459a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800458e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004592:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d03a      	beq.n	8004618 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	4798      	blx	r3
    }
    return;
 80045aa:	e035      	b.n	8004618 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <HAL_UART_IRQHandler+0x5f4>
 80045b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fe10 	bl	80051ea <UART_EndTransmit_IT>
    return;
 80045ca:	e026      	b.n	800461a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80045cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <HAL_UART_IRQHandler+0x614>
 80045d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f001 fb59 	bl	8005c9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045ea:	e016      	b.n	800461a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80045ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d010      	beq.n	800461a <HAL_UART_IRQHandler+0x642>
 80045f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	da0c      	bge.n	800461a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f001 fb42 	bl	8005c8a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004606:	e008      	b.n	800461a <HAL_UART_IRQHandler+0x642>
      return;
 8004608:	bf00      	nop
 800460a:	e006      	b.n	800461a <HAL_UART_IRQHandler+0x642>
    return;
 800460c:	bf00      	nop
 800460e:	e004      	b.n	800461a <HAL_UART_IRQHandler+0x642>
      return;
 8004610:	bf00      	nop
 8004612:	e002      	b.n	800461a <HAL_UART_IRQHandler+0x642>
      return;
 8004614:	bf00      	nop
 8004616:	e000      	b.n	800461a <HAL_UART_IRQHandler+0x642>
    return;
 8004618:	bf00      	nop
  }
}
 800461a:	37e8      	adds	r7, #232	@ 0xe8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr
	...

0800465c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800465c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004660:	b08c      	sub	sp, #48	@ 0x30
 8004662:	af00      	add	r7, sp, #0
 8004664:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	431a      	orrs	r2, r3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	431a      	orrs	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	4313      	orrs	r3, r2
 8004682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b94      	ldr	r3, [pc, #592]	@ (80048dc <UART_SetConfig+0x280>)
 800468c:	4013      	ands	r3, r2
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004694:	430b      	orrs	r3, r1
 8004696:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a89      	ldr	r2, [pc, #548]	@ (80048e0 <UART_SetConfig+0x284>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046c4:	4313      	orrs	r3, r2
 80046c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80046d2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046dc:	430b      	orrs	r3, r1
 80046de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e6:	f023 010f 	bic.w	r1, r3, #15
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a7a      	ldr	r2, [pc, #488]	@ (80048e4 <UART_SetConfig+0x288>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d127      	bne.n	8004750 <UART_SetConfig+0xf4>
 8004700:	2003      	movs	r0, #3
 8004702:	f7ff fb26 	bl	8003d52 <LL_RCC_GetUSARTClockSource>
 8004706:	4603      	mov	r3, r0
 8004708:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800470c:	2b03      	cmp	r3, #3
 800470e:	d81b      	bhi.n	8004748 <UART_SetConfig+0xec>
 8004710:	a201      	add	r2, pc, #4	@ (adr r2, 8004718 <UART_SetConfig+0xbc>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	08004729 	.word	0x08004729
 800471c:	08004739 	.word	0x08004739
 8004720:	08004731 	.word	0x08004731
 8004724:	08004741 	.word	0x08004741
 8004728:	2301      	movs	r3, #1
 800472a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800472e:	e080      	b.n	8004832 <UART_SetConfig+0x1d6>
 8004730:	2302      	movs	r3, #2
 8004732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004736:	e07c      	b.n	8004832 <UART_SetConfig+0x1d6>
 8004738:	2304      	movs	r3, #4
 800473a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800473e:	e078      	b.n	8004832 <UART_SetConfig+0x1d6>
 8004740:	2308      	movs	r3, #8
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004746:	e074      	b.n	8004832 <UART_SetConfig+0x1d6>
 8004748:	2310      	movs	r3, #16
 800474a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800474e:	e070      	b.n	8004832 <UART_SetConfig+0x1d6>
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a64      	ldr	r2, [pc, #400]	@ (80048e8 <UART_SetConfig+0x28c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d138      	bne.n	80047cc <UART_SetConfig+0x170>
 800475a:	200c      	movs	r0, #12
 800475c:	f7ff faf9 	bl	8003d52 <LL_RCC_GetUSARTClockSource>
 8004760:	4603      	mov	r3, r0
 8004762:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004766:	2b0c      	cmp	r3, #12
 8004768:	d82c      	bhi.n	80047c4 <UART_SetConfig+0x168>
 800476a:	a201      	add	r2, pc, #4	@ (adr r2, 8004770 <UART_SetConfig+0x114>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	080047a5 	.word	0x080047a5
 8004774:	080047c5 	.word	0x080047c5
 8004778:	080047c5 	.word	0x080047c5
 800477c:	080047c5 	.word	0x080047c5
 8004780:	080047b5 	.word	0x080047b5
 8004784:	080047c5 	.word	0x080047c5
 8004788:	080047c5 	.word	0x080047c5
 800478c:	080047c5 	.word	0x080047c5
 8004790:	080047ad 	.word	0x080047ad
 8004794:	080047c5 	.word	0x080047c5
 8004798:	080047c5 	.word	0x080047c5
 800479c:	080047c5 	.word	0x080047c5
 80047a0:	080047bd 	.word	0x080047bd
 80047a4:	2300      	movs	r3, #0
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047aa:	e042      	b.n	8004832 <UART_SetConfig+0x1d6>
 80047ac:	2302      	movs	r3, #2
 80047ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047b2:	e03e      	b.n	8004832 <UART_SetConfig+0x1d6>
 80047b4:	2304      	movs	r3, #4
 80047b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ba:	e03a      	b.n	8004832 <UART_SetConfig+0x1d6>
 80047bc:	2308      	movs	r3, #8
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047c2:	e036      	b.n	8004832 <UART_SetConfig+0x1d6>
 80047c4:	2310      	movs	r3, #16
 80047c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ca:	e032      	b.n	8004832 <UART_SetConfig+0x1d6>
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a43      	ldr	r2, [pc, #268]	@ (80048e0 <UART_SetConfig+0x284>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d12a      	bne.n	800482c <UART_SetConfig+0x1d0>
 80047d6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80047da:	f7ff facc 	bl	8003d76 <LL_RCC_GetLPUARTClockSource>
 80047de:	4603      	mov	r3, r0
 80047e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047e4:	d01a      	beq.n	800481c <UART_SetConfig+0x1c0>
 80047e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047ea:	d81b      	bhi.n	8004824 <UART_SetConfig+0x1c8>
 80047ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047f0:	d00c      	beq.n	800480c <UART_SetConfig+0x1b0>
 80047f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047f6:	d815      	bhi.n	8004824 <UART_SetConfig+0x1c8>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <UART_SetConfig+0x1a8>
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004800:	d008      	beq.n	8004814 <UART_SetConfig+0x1b8>
 8004802:	e00f      	b.n	8004824 <UART_SetConfig+0x1c8>
 8004804:	2300      	movs	r3, #0
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800480a:	e012      	b.n	8004832 <UART_SetConfig+0x1d6>
 800480c:	2302      	movs	r3, #2
 800480e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004812:	e00e      	b.n	8004832 <UART_SetConfig+0x1d6>
 8004814:	2304      	movs	r3, #4
 8004816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800481a:	e00a      	b.n	8004832 <UART_SetConfig+0x1d6>
 800481c:	2308      	movs	r3, #8
 800481e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004822:	e006      	b.n	8004832 <UART_SetConfig+0x1d6>
 8004824:	2310      	movs	r3, #16
 8004826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800482a:	e002      	b.n	8004832 <UART_SetConfig+0x1d6>
 800482c:	2310      	movs	r3, #16
 800482e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a2a      	ldr	r2, [pc, #168]	@ (80048e0 <UART_SetConfig+0x284>)
 8004838:	4293      	cmp	r3, r2
 800483a:	f040 80a4 	bne.w	8004986 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800483e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004842:	2b08      	cmp	r3, #8
 8004844:	d823      	bhi.n	800488e <UART_SetConfig+0x232>
 8004846:	a201      	add	r2, pc, #4	@ (adr r2, 800484c <UART_SetConfig+0x1f0>)
 8004848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484c:	08004871 	.word	0x08004871
 8004850:	0800488f 	.word	0x0800488f
 8004854:	08004879 	.word	0x08004879
 8004858:	0800488f 	.word	0x0800488f
 800485c:	0800487f 	.word	0x0800487f
 8004860:	0800488f 	.word	0x0800488f
 8004864:	0800488f 	.word	0x0800488f
 8004868:	0800488f 	.word	0x0800488f
 800486c:	08004887 	.word	0x08004887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004870:	f7fd feae 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 8004874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004876:	e010      	b.n	800489a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004878:	4b1c      	ldr	r3, [pc, #112]	@ (80048ec <UART_SetConfig+0x290>)
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800487c:	e00d      	b.n	800489a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800487e:	f7fd fdf3 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8004882:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004884:	e009      	b.n	800489a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800488c:	e005      	b.n	800489a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004898:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 8137 	beq.w	8004b10 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a6:	4a12      	ldr	r2, [pc, #72]	@ (80048f0 <UART_SetConfig+0x294>)
 80048a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ac:	461a      	mov	r2, r3
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d305      	bcc.n	80048d2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d910      	bls.n	80048f4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80048d8:	e11a      	b.n	8004b10 <UART_SetConfig+0x4b4>
 80048da:	bf00      	nop
 80048dc:	cfff69f3 	.word	0xcfff69f3
 80048e0:	40008000 	.word	0x40008000
 80048e4:	40013800 	.word	0x40013800
 80048e8:	40004400 	.word	0x40004400
 80048ec:	00f42400 	.word	0x00f42400
 80048f0:	08009b08 	.word	0x08009b08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f6:	2200      	movs	r2, #0
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	60fa      	str	r2, [r7, #12]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	4a8e      	ldr	r2, [pc, #568]	@ (8004b3c <UART_SetConfig+0x4e0>)
 8004902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004906:	b29b      	uxth	r3, r3
 8004908:	2200      	movs	r2, #0
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004912:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004916:	f7fb fc2f 	bl	8000178 <__aeabi_uldivmod>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4610      	mov	r0, r2
 8004920:	4619      	mov	r1, r3
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	020b      	lsls	r3, r1, #8
 800492c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004930:	0202      	lsls	r2, r0, #8
 8004932:	6979      	ldr	r1, [r7, #20]
 8004934:	6849      	ldr	r1, [r1, #4]
 8004936:	0849      	lsrs	r1, r1, #1
 8004938:	2000      	movs	r0, #0
 800493a:	460c      	mov	r4, r1
 800493c:	4605      	mov	r5, r0
 800493e:	eb12 0804 	adds.w	r8, r2, r4
 8004942:	eb43 0905 	adc.w	r9, r3, r5
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	469a      	mov	sl, r3
 800494e:	4693      	mov	fp, r2
 8004950:	4652      	mov	r2, sl
 8004952:	465b      	mov	r3, fp
 8004954:	4640      	mov	r0, r8
 8004956:	4649      	mov	r1, r9
 8004958:	f7fb fc0e 	bl	8000178 <__aeabi_uldivmod>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4613      	mov	r3, r2
 8004962:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800496a:	d308      	bcc.n	800497e <UART_SetConfig+0x322>
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004972:	d204      	bcs.n	800497e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	60da      	str	r2, [r3, #12]
 800497c:	e0c8      	b.n	8004b10 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004984:	e0c4      	b.n	8004b10 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800498e:	d167      	bne.n	8004a60 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004990:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004994:	2b08      	cmp	r3, #8
 8004996:	d828      	bhi.n	80049ea <UART_SetConfig+0x38e>
 8004998:	a201      	add	r2, pc, #4	@ (adr r2, 80049a0 <UART_SetConfig+0x344>)
 800499a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499e:	bf00      	nop
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049cd 	.word	0x080049cd
 80049a8:	080049d5 	.word	0x080049d5
 80049ac:	080049eb 	.word	0x080049eb
 80049b0:	080049db 	.word	0x080049db
 80049b4:	080049eb 	.word	0x080049eb
 80049b8:	080049eb 	.word	0x080049eb
 80049bc:	080049eb 	.word	0x080049eb
 80049c0:	080049e3 	.word	0x080049e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c4:	f7fd fe04 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 80049c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049ca:	e014      	b.n	80049f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049cc:	f7fd fe12 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 80049d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049d2:	e010      	b.n	80049f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004b40 <UART_SetConfig+0x4e4>)
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049d8:	e00d      	b.n	80049f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049da:	f7fd fd45 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 80049de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049e0:	e009      	b.n	80049f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049e8:	e005      	b.n	80049f6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8089 	beq.w	8004b10 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	4a4e      	ldr	r2, [pc, #312]	@ (8004b3c <UART_SetConfig+0x4e0>)
 8004a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a10:	005a      	lsls	r2, r3, #1
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	441a      	add	r2, r3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	2b0f      	cmp	r3, #15
 8004a28:	d916      	bls.n	8004a58 <UART_SetConfig+0x3fc>
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a30:	d212      	bcs.n	8004a58 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	f023 030f 	bic.w	r3, r3, #15
 8004a3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	085b      	lsrs	r3, r3, #1
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	8bfb      	ldrh	r3, [r7, #30]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	8bfa      	ldrh	r2, [r7, #30]
 8004a54:	60da      	str	r2, [r3, #12]
 8004a56:	e05b      	b.n	8004b10 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a5e:	e057      	b.n	8004b10 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d828      	bhi.n	8004aba <UART_SetConfig+0x45e>
 8004a68:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <UART_SetConfig+0x414>)
 8004a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6e:	bf00      	nop
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004a9d 	.word	0x08004a9d
 8004a78:	08004aa5 	.word	0x08004aa5
 8004a7c:	08004abb 	.word	0x08004abb
 8004a80:	08004aab 	.word	0x08004aab
 8004a84:	08004abb 	.word	0x08004abb
 8004a88:	08004abb 	.word	0x08004abb
 8004a8c:	08004abb 	.word	0x08004abb
 8004a90:	08004ab3 	.word	0x08004ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a94:	f7fd fd9c 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 8004a98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a9a:	e014      	b.n	8004ac6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a9c:	f7fd fdaa 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8004aa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004aa2:	e010      	b.n	8004ac6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa4:	4b26      	ldr	r3, [pc, #152]	@ (8004b40 <UART_SetConfig+0x4e4>)
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004aa8:	e00d      	b.n	8004ac6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aaa:	f7fd fcdd 	bl	8002468 <HAL_RCC_GetSysClockFreq>
 8004aae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ab0:	e009      	b.n	8004ac6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ab8:	e005      	b.n	8004ac6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ac4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d021      	beq.n	8004b10 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b3c <UART_SetConfig+0x4e0>)
 8004ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	085b      	lsrs	r3, r3, #1
 8004ae4:	441a      	add	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	2b0f      	cmp	r3, #15
 8004af4:	d909      	bls.n	8004b0a <UART_SetConfig+0x4ae>
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004afc:	d205      	bcs.n	8004b0a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60da      	str	r2, [r3, #12]
 8004b08:	e002      	b.n	8004b10 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2200      	movs	r2, #0
 8004b24:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004b2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3730      	adds	r7, #48	@ 0x30
 8004b34:	46bd      	mov	sp, r7
 8004b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b3a:	bf00      	nop
 8004b3c:	08009b08 	.word	0x08009b08
 8004b40:	00f42400 	.word	0x00f42400

08004b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01a      	beq.n	8004c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c42:	d10a      	bne.n	8004c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr

08004c86 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b086      	sub	sp, #24
 8004c8a:	af02      	add	r7, sp, #8
 8004c8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c96:	f7fb ffdd 	bl	8000c54 <HAL_GetTick>
 8004c9a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d10e      	bne.n	8004cc8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004caa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f832 	bl	8004d22 <UART_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e028      	b.n	8004d1a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d10e      	bne.n	8004cf4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f81c 	bl	8004d22 <UART_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e012      	b.n	8004d1a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b09c      	sub	sp, #112	@ 0x70
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d32:	e0a9      	b.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3a:	f000 80a5 	beq.w	8004e88 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3e:	f7fb ff89 	bl	8000c54 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d302      	bcc.n	8004d54 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d140      	bne.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d64:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004d68:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d74:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004d78:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e6      	bne.n	8004d54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3308      	adds	r3, #8
 8004da4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004da6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004da8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004dac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e5      	bne.n	8004d86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e069      	b.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d051      	beq.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004df2:	d149      	bne.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dfc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e1e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e6      	bne.n	8004dfe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3308      	adds	r3, #8
 8004e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
 8004e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f023 0301 	bic.w	r3, r3, #1
 8004e46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e50:	623a      	str	r2, [r7, #32]
 8004e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	69f9      	ldr	r1, [r7, #28]
 8004e56:	6a3a      	ldr	r2, [r7, #32]
 8004e58:	e841 2300 	strex	r3, r2, [r1]
 8004e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e5      	bne.n	8004e30 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e010      	b.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69da      	ldr	r2, [r3, #28]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4013      	ands	r3, r2
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	79fb      	ldrb	r3, [r7, #7]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	f43f af46 	beq.w	8004d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3770      	adds	r7, #112	@ 0x70
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b0a3      	sub	sp, #140	@ 0x8c
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	88fa      	ldrh	r2, [r7, #6]
 8004ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ee6:	d10e      	bne.n	8004f06 <UART_Start_Receive_IT+0x52>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d105      	bne.n	8004efc <UART_Start_Receive_IT+0x48>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004ef6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004efa:	e02d      	b.n	8004f58 <UART_Start_Receive_IT+0xa4>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	22ff      	movs	r2, #255	@ 0xff
 8004f00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004f04:	e028      	b.n	8004f58 <UART_Start_Receive_IT+0xa4>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10d      	bne.n	8004f2a <UART_Start_Receive_IT+0x76>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d104      	bne.n	8004f20 <UART_Start_Receive_IT+0x6c>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	22ff      	movs	r2, #255	@ 0xff
 8004f1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004f1e:	e01b      	b.n	8004f58 <UART_Start_Receive_IT+0xa4>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	227f      	movs	r2, #127	@ 0x7f
 8004f24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004f28:	e016      	b.n	8004f58 <UART_Start_Receive_IT+0xa4>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f32:	d10d      	bne.n	8004f50 <UART_Start_Receive_IT+0x9c>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <UART_Start_Receive_IT+0x92>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	227f      	movs	r2, #127	@ 0x7f
 8004f40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004f44:	e008      	b.n	8004f58 <UART_Start_Receive_IT+0xa4>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	223f      	movs	r2, #63	@ 0x3f
 8004f4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004f4e:	e003      	b.n	8004f58 <UART_Start_Receive_IT+0xa4>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2222      	movs	r2, #34	@ 0x22
 8004f64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004f78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3308      	adds	r3, #8
 8004f88:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004f8c:	673a      	str	r2, [r7, #112]	@ 0x70
 8004f8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004f92:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004f9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e3      	bne.n	8004f68 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fa8:	d14f      	bne.n	800504a <UART_Start_Receive_IT+0x196>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004fb0:	88fa      	ldrh	r2, [r7, #6]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d349      	bcc.n	800504a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fbe:	d107      	bne.n	8004fd0 <UART_Start_Receive_IT+0x11c>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d103      	bne.n	8004fd0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4a46      	ldr	r2, [pc, #280]	@ (80050e4 <UART_Start_Receive_IT+0x230>)
 8004fcc:	675a      	str	r2, [r3, #116]	@ 0x74
 8004fce:	e002      	b.n	8004fd6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a45      	ldr	r2, [pc, #276]	@ (80050e8 <UART_Start_Receive_IT+0x234>)
 8004fd4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01a      	beq.n	8005014 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ff2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005000:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005002:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005006:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800500e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e4      	bne.n	8004fde <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005026:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800502a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3308      	adds	r3, #8
 8005032:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005034:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005036:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800503a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e5      	bne.n	8005014 <UART_Start_Receive_IT+0x160>
 8005048:	e046      	b.n	80050d8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005052:	d107      	bne.n	8005064 <UART_Start_Receive_IT+0x1b0>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d103      	bne.n	8005064 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a23      	ldr	r2, [pc, #140]	@ (80050ec <UART_Start_Receive_IT+0x238>)
 8005060:	675a      	str	r2, [r3, #116]	@ 0x74
 8005062:	e002      	b.n	800506a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4a22      	ldr	r2, [pc, #136]	@ (80050f0 <UART_Start_Receive_IT+0x23c>)
 8005068:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d019      	beq.n	80050a6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005086:	677b      	str	r3, [r7, #116]	@ 0x74
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005090:	637b      	str	r3, [r7, #52]	@ 0x34
 8005092:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005096:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800509e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e6      	bne.n	8005072 <UART_Start_Receive_IT+0x1be>
 80050a4:	e018      	b.n	80050d8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	613b      	str	r3, [r7, #16]
   return(result);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f043 0320 	orr.w	r3, r3, #32
 80050ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	69f9      	ldr	r1, [r7, #28]
 80050ca:	6a3a      	ldr	r2, [r7, #32]
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e6      	bne.n	80050a6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	378c      	adds	r7, #140	@ 0x8c
 80050de:	46bd      	mov	sp, r7
 80050e0:	bc80      	pop	{r7}
 80050e2:	4770      	bx	lr
 80050e4:	08005911 	.word	0x08005911
 80050e8:	080055b1 	.word	0x080055b1
 80050ec:	080053f9 	.word	0x080053f9
 80050f0:	08005241 	.word	0x08005241

080050f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b095      	sub	sp, #84	@ 0x54
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800511a:	643b      	str	r3, [r7, #64]	@ 0x40
 800511c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005120:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e6      	bne.n	80050fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3308      	adds	r3, #8
 8005134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	61fb      	str	r3, [r7, #28]
   return(result);
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3308      	adds	r3, #8
 8005150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005152:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005154:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005156:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005158:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1e3      	bne.n	800512e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800516a:	2b01      	cmp	r3, #1
 800516c:	d118      	bne.n	80051a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	e853 3f00 	ldrex	r3, [r3]
 800517a:	60bb      	str	r3, [r7, #8]
   return(result);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f023 0310 	bic.w	r3, r3, #16
 8005182:	647b      	str	r3, [r7, #68]	@ 0x44
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	461a      	mov	r2, r3
 800518a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005190:	6979      	ldr	r1, [r7, #20]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	e841 2300 	strex	r3, r2, [r1]
 8005198:	613b      	str	r3, [r7, #16]
   return(result);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e6      	bne.n	800516e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80051b4:	bf00      	nop
 80051b6:	3754      	adds	r7, #84	@ 0x54
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr

080051be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff fa28 	bl	8004632 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051e2:	bf00      	nop
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b088      	sub	sp, #32
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6979      	ldr	r1, [r7, #20]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	613b      	str	r3, [r7, #16]
   return(result);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e6      	bne.n	80051f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff f9f4 	bl	8004620 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005238:	bf00      	nop
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b09c      	sub	sp, #112	@ 0x70
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800524e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005258:	2b22      	cmp	r3, #34	@ 0x22
 800525a:	f040 80be 	bne.w	80053da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005268:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800526c:	b2d9      	uxtb	r1, r3
 800526e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005272:	b2da      	uxtb	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005278:	400a      	ands	r2, r1
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f040 80a1 	bne.w	80053ea <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e6      	bne.n	80052a8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3308      	adds	r3, #8
 80052e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3308      	adds	r3, #8
 80052f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80052fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005300:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e5      	bne.n	80052da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a33      	ldr	r2, [pc, #204]	@ (80053f4 <UART_RxISR_8BIT+0x1b4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d01f      	beq.n	800536c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d018      	beq.n	800536c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	e853 3f00 	ldrex	r3, [r3]
 8005346:	623b      	str	r3, [r7, #32]
   return(result);
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800534e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005358:	633b      	str	r3, [r7, #48]	@ 0x30
 800535a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800535e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005360:	e841 2300 	strex	r3, r2, [r1]
 8005364:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e6      	bne.n	800533a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005370:	2b01      	cmp	r3, #1
 8005372:	d12e      	bne.n	80053d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	e853 3f00 	ldrex	r3, [r3]
 8005386:	60fb      	str	r3, [r7, #12]
   return(result);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0310 	bic.w	r3, r3, #16
 800538e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	69b9      	ldr	r1, [r7, #24]
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	e841 2300 	strex	r3, r2, [r1]
 80053a4:	617b      	str	r3, [r7, #20]
   return(result);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e6      	bne.n	800537a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b10      	cmp	r3, #16
 80053b8:	d103      	bne.n	80053c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2210      	movs	r2, #16
 80053c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff f93a 	bl	8004644 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053d0:	e00b      	b.n	80053ea <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fb f8b0 	bl	8000538 <HAL_UART_RxCpltCallback>
}
 80053d8:	e007      	b.n	80053ea <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699a      	ldr	r2, [r3, #24]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0208 	orr.w	r2, r2, #8
 80053e8:	619a      	str	r2, [r3, #24]
}
 80053ea:	bf00      	nop
 80053ec:	3770      	adds	r7, #112	@ 0x70
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40008000 	.word	0x40008000

080053f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b09c      	sub	sp, #112	@ 0x70
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005406:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005410:	2b22      	cmp	r3, #34	@ 0x22
 8005412:	f040 80be 	bne.w	8005592 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005424:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005426:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800542a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800542e:	4013      	ands	r3, r2
 8005430:	b29a      	uxth	r2, r3
 8005432:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005434:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543a:	1c9a      	adds	r2, r3, #2
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	f040 80a1 	bne.w	80055a2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800546e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005470:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005474:	667b      	str	r3, [r7, #100]	@ 0x64
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800547e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005480:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005484:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800548c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e6      	bne.n	8005460 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3308      	adds	r3, #8
 8005498:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3308      	adds	r3, #8
 80054b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80054b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e5      	bne.n	8005492 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a33      	ldr	r2, [pc, #204]	@ (80055ac <UART_RxISR_16BIT+0x1b4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d01f      	beq.n	8005524 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d018      	beq.n	8005524 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005506:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	461a      	mov	r2, r3
 800550e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005512:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e6      	bne.n	80054f2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d12e      	bne.n	800558a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	e853 3f00 	ldrex	r3, [r3]
 800553e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f023 0310 	bic.w	r3, r3, #16
 8005546:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	461a      	mov	r2, r3
 800554e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	6979      	ldr	r1, [r7, #20]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	e841 2300 	strex	r3, r2, [r1]
 800555c:	613b      	str	r3, [r7, #16]
   return(result);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1e6      	bne.n	8005532 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	2b10      	cmp	r3, #16
 8005570:	d103      	bne.n	800557a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2210      	movs	r2, #16
 8005578:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff f85e 	bl	8004644 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005588:	e00b      	b.n	80055a2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fa ffd4 	bl	8000538 <HAL_UART_RxCpltCallback>
}
 8005590:	e007      	b.n	80055a2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0208 	orr.w	r2, r2, #8
 80055a0:	619a      	str	r2, [r3, #24]
}
 80055a2:	bf00      	nop
 80055a4:	3770      	adds	r7, #112	@ 0x70
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40008000 	.word	0x40008000

080055b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b0ac      	sub	sp, #176	@ 0xb0
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80055be:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055e6:	2b22      	cmp	r3, #34	@ 0x22
 80055e8:	f040 8182 	bne.w	80058f0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80055f2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80055f6:	e125      	b.n	8005844 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fe:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005602:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005606:	b2d9      	uxtb	r1, r3
 8005608:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800560c:	b2da      	uxtb	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005612:	400a      	ands	r2, r1
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	b29a      	uxth	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800563e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	2b00      	cmp	r3, #0
 8005648:	d053      	beq.n	80056f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800564a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d011      	beq.n	800567a <UART_RxISR_8BIT_FIFOEN+0xca>
 8005656:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800565a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00b      	beq.n	800567a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2201      	movs	r2, #1
 8005668:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005670:	f043 0201 	orr.w	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800567a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d011      	beq.n	80056aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00b      	beq.n	80056aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2202      	movs	r2, #2
 8005698:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a0:	f043 0204 	orr.w	r2, r3, #4
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d011      	beq.n	80056da <UART_RxISR_8BIT_FIFOEN+0x12a>
 80056b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00b      	beq.n	80056da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2204      	movs	r2, #4
 80056c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056d0:	f043 0202 	orr.w	r2, r3, #2
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d006      	beq.n	80056f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7fe ffa4 	bl	8004632 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f040 80a2 	bne.w	8005844 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800570e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	461a      	mov	r2, r3
 800571e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005722:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005724:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005728:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005730:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e4      	bne.n	8005700 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3308      	adds	r3, #8
 800573c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005746:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3308      	adds	r3, #8
 800575a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800575e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005760:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005764:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800576c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e1      	bne.n	8005736 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a5f      	ldr	r2, [pc, #380]	@ (8005908 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d021      	beq.n	80057d4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01a      	beq.n	80057d4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80057c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80057c2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80057c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80057ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e4      	bne.n	800579e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d130      	bne.n	800583e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f2:	f023 0310 	bic.w	r3, r3, #16
 80057f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005804:	643b      	str	r3, [r7, #64]	@ 0x40
 8005806:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800580a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e4      	bne.n	80057e2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	2b10      	cmp	r3, #16
 8005824:	d103      	bne.n	800582e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2210      	movs	r2, #16
 800582c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005834:	4619      	mov	r1, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fe ff04 	bl	8004644 <HAL_UARTEx_RxEventCallback>
 800583c:	e002      	b.n	8005844 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fa fe7a 	bl	8000538 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005844:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005848:	2b00      	cmp	r3, #0
 800584a:	d006      	beq.n	800585a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800584c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	f47f aecf 	bne.w	80055f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005860:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005864:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005868:	2b00      	cmp	r3, #0
 800586a:	d049      	beq.n	8005900 <UART_RxISR_8BIT_FIFOEN+0x350>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005872:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005876:	429a      	cmp	r2, r3
 8005878:	d242      	bcs.n	8005900 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	61fb      	str	r3, [r7, #28]
   return(result);
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005890:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800589e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e3      	bne.n	800587a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a15      	ldr	r2, [pc, #84]	@ (800590c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80058b6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f043 0320 	orr.w	r3, r3, #32
 80058cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6979      	ldr	r1, [r7, #20]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	613b      	str	r3, [r7, #16]
   return(result);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e4      	bne.n	80058b8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058ee:	e007      	b.n	8005900 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0208 	orr.w	r2, r2, #8
 80058fe:	619a      	str	r2, [r3, #24]
}
 8005900:	bf00      	nop
 8005902:	37b0      	adds	r7, #176	@ 0xb0
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40008000 	.word	0x40008000
 800590c:	08005241 	.word	0x08005241

08005910 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b0ae      	sub	sp, #184	@ 0xb8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800591e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005946:	2b22      	cmp	r3, #34	@ 0x22
 8005948:	f040 8186 	bne.w	8005c58 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005952:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005956:	e129      	b.n	8005bac <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005966:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800596a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800596e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005972:	4013      	ands	r3, r2
 8005974:	b29a      	uxth	r2, r3
 8005976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800597a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005980:	1c9a      	adds	r2, r3, #2
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80059a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d053      	beq.n	8005a56 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d011      	beq.n	80059de <UART_RxISR_16BIT_FIFOEN+0xce>
 80059ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00b      	beq.n	80059de <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2201      	movs	r2, #1
 80059cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d4:	f043 0201 	orr.w	r2, r3, #1
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d011      	beq.n	8005a0e <UART_RxISR_16BIT_FIFOEN+0xfe>
 80059ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2202      	movs	r2, #2
 80059fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a04:	f043 0204 	orr.w	r2, r3, #4
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d011      	beq.n	8005a3e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005a1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a34:	f043 0202 	orr.w	r2, r3, #2
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d006      	beq.n	8005a56 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7fe fdf2 	bl	8004632 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f040 80a4 	bne.w	8005bac <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e2      	bne.n	8005a64 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005aae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ab0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ab4:	f023 0301 	bic.w	r3, r3, #1
 8005ab8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005ac6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005acc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e1      	bne.n	8005a9e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a5f      	ldr	r2, [pc, #380]	@ (8005c70 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d021      	beq.n	8005b3c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d01a      	beq.n	8005b3c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b2a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e4      	bne.n	8005b06 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d130      	bne.n	8005ba6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5a:	f023 0310 	bic.w	r3, r3, #16
 8005b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e4      	bne.n	8005b4a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	2b10      	cmp	r3, #16
 8005b8c:	d103      	bne.n	8005b96 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2210      	movs	r2, #16
 8005b94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fe fd50 	bl	8004644 <HAL_UARTEx_RxEventCallback>
 8005ba4:	e002      	b.n	8005bac <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fa fcc6 	bl	8000538 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005bac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d006      	beq.n	8005bc2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005bb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f47f aecb 	bne.w	8005958 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005bc8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005bcc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d049      	beq.n	8005c68 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005bda:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d242      	bcs.n	8005c68 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3308      	adds	r3, #8
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3308      	adds	r3, #8
 8005c02:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005c06:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e3      	bne.n	8005be2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a15      	ldr	r2, [pc, #84]	@ (8005c74 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005c1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f043 0320 	orr.w	r3, r3, #32
 8005c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c42:	61fb      	str	r3, [r7, #28]
 8005c44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	69b9      	ldr	r1, [r7, #24]
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e4      	bne.n	8005c20 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c56:	e007      	b.n	8005c68 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0208 	orr.w	r2, r2, #8
 8005c66:	619a      	str	r2, [r3, #24]
}
 8005c68:	bf00      	nop
 8005c6a:	37b8      	adds	r7, #184	@ 0xb8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40008000 	.word	0x40008000
 8005c74:	080053f9 	.word	0x080053f9

08005c78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr

08005c8a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr

08005c9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr

08005cae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e027      	b.n	8005d14 <HAL_UARTEx_DisableFifoMode+0x66>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2224      	movs	r2, #36	@ 0x24
 8005cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0201 	bic.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005cf2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bc80      	pop	{r7}
 8005d1c:	4770      	bx	lr

08005d1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d101      	bne.n	8005d36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d32:	2302      	movs	r3, #2
 8005d34:	e02d      	b.n	8005d92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2224      	movs	r2, #36	@ 0x24
 8005d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0201 	bic.w	r2, r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f850 	bl	8005e18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e02d      	b.n	8005e0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2224      	movs	r2, #36	@ 0x24
 8005dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f812 	bl	8005e18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d108      	bne.n	8005e3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e38:	e031      	b.n	8005e9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e3e:	2308      	movs	r3, #8
 8005e40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	0e5b      	lsrs	r3, r3, #25
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	0f5b      	lsrs	r3, r3, #29
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e62:	7bbb      	ldrb	r3, [r7, #14]
 8005e64:	7b3a      	ldrb	r2, [r7, #12]
 8005e66:	4910      	ldr	r1, [pc, #64]	@ (8005ea8 <UARTEx_SetNbDataToProcess+0x90>)
 8005e68:	5c8a      	ldrb	r2, [r1, r2]
 8005e6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e6e:	7b3a      	ldrb	r2, [r7, #12]
 8005e70:	490e      	ldr	r1, [pc, #56]	@ (8005eac <UARTEx_SetNbDataToProcess+0x94>)
 8005e72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e74:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	7b7a      	ldrb	r2, [r7, #13]
 8005e84:	4908      	ldr	r1, [pc, #32]	@ (8005ea8 <UARTEx_SetNbDataToProcess+0x90>)
 8005e86:	5c8a      	ldrb	r2, [r1, r2]
 8005e88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e8c:	7b7a      	ldrb	r2, [r7, #13]
 8005e8e:	4907      	ldr	r1, [pc, #28]	@ (8005eac <UARTEx_SetNbDataToProcess+0x94>)
 8005e90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e92:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e9e:	bf00      	nop
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr
 8005ea8:	08009b20 	.word	0x08009b20
 8005eac:	08009b28 	.word	0x08009b28

08005eb0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8005eb8:	4a24      	ldr	r2, [pc, #144]	@ (8005f4c <RadioInit+0x9c>)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8005ebe:	4b24      	ldr	r3, [pc, #144]	@ (8005f50 <RadioInit+0xa0>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8005ec4:	4b22      	ldr	r3, [pc, #136]	@ (8005f50 <RadioInit+0xa0>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8005eca:	4b21      	ldr	r3, [pc, #132]	@ (8005f50 <RadioInit+0xa0>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8005f50 <RadioInit+0xa0>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8005ed6:	481f      	ldr	r0, [pc, #124]	@ (8005f54 <RadioInit+0xa4>)
 8005ed8:	f001 ff86 	bl	8007de8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8005edc:	4b1c      	ldr	r3, [pc, #112]	@ (8005f50 <RadioInit+0xa0>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8005ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f50 <RadioInit+0xa0>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8005ee8:	f002 fa1a 	bl	8008320 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8005eec:	2100      	movs	r1, #0
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f002 fde6 	bl	8008ac0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8005ef4:	2204      	movs	r2, #4
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	2001      	movs	r0, #1
 8005efa:	f002 fba3 	bl	8008644 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005efe:	2300      	movs	r3, #0
 8005f00:	2200      	movs	r2, #0
 8005f02:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005f06:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005f0a:	f002 fad3 	bl	80084b4 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8005f0e:	f000 fe91 	bl	8006c34 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8005f12:	2300      	movs	r3, #0
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	4b10      	ldr	r3, [pc, #64]	@ (8005f58 <RadioInit+0xa8>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8005f1e:	480f      	ldr	r0, [pc, #60]	@ (8005f5c <RadioInit+0xac>)
 8005f20:	f003 fb30 	bl	8009584 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8005f24:	2300      	movs	r3, #0
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <RadioInit+0xb0>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f30:	480c      	ldr	r0, [pc, #48]	@ (8005f64 <RadioInit+0xb4>)
 8005f32:	f003 fb27 	bl	8009584 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8005f36:	4809      	ldr	r0, [pc, #36]	@ (8005f5c <RadioInit+0xac>)
 8005f38:	f003 fbc8 	bl	80096cc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8005f3c:	4809      	ldr	r0, [pc, #36]	@ (8005f64 <RadioInit+0xb4>)
 8005f3e:	f003 fbc5 	bl	80096cc <UTIL_TIMER_Stop>
}
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000274 	.word	0x20000274
 8005f50:	20000278 	.word	0x20000278
 8005f54:	08007029 	.word	0x08007029
 8005f58:	08006fb1 	.word	0x08006fb1
 8005f5c:	200002d4 	.word	0x200002d4
 8005f60:	08006fc5 	.word	0x08006fc5
 8005f64:	200002ec 	.word	0x200002ec

08005f68 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8005f6c:	f001 ff84 	bl	8007e78 <SUBGRF_GetOperatingMode>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b07      	cmp	r3, #7
 8005f74:	d00a      	beq.n	8005f8c <RadioGetStatus+0x24>
 8005f76:	2b07      	cmp	r3, #7
 8005f78:	dc0a      	bgt.n	8005f90 <RadioGetStatus+0x28>
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d002      	beq.n	8005f84 <RadioGetStatus+0x1c>
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d002      	beq.n	8005f88 <RadioGetStatus+0x20>
 8005f82:	e005      	b.n	8005f90 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8005f84:	2302      	movs	r3, #2
 8005f86:	e004      	b.n	8005f92 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e002      	b.n	8005f92 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e000      	b.n	8005f92 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8005f90:	2300      	movs	r3, #0
    }
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	bd80      	pop	{r7, pc}
	...

08005f98 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8005fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800604c <RadioSetModem+0xb4>)
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f003 f95b 	bl	8009266 <RFW_SetRadioModem>
    switch( modem )
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	2b05      	cmp	r3, #5
 8005fb4:	d80e      	bhi.n	8005fd4 <RadioSetModem+0x3c>
 8005fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fbc <RadioSetModem+0x24>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005fe3 	.word	0x08005fe3
 8005fc0:	08005ff1 	.word	0x08005ff1
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08006017 	.word	0x08006017
 8005fcc:	08006025 	.word	0x08006025
 8005fd0:	08006033 	.word	0x08006033
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8005fd4:	2003      	movs	r0, #3
 8005fd6:	f002 fb0f 	bl	80085f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005fda:	4b1c      	ldr	r3, [pc, #112]	@ (800604c <RadioSetModem+0xb4>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	735a      	strb	r2, [r3, #13]
        break;
 8005fe0:	e02f      	b.n	8006042 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	f002 fb08 	bl	80085f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005fe8:	4b18      	ldr	r3, [pc, #96]	@ (800604c <RadioSetModem+0xb4>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	735a      	strb	r2, [r3, #13]
        break;
 8005fee:	e028      	b.n	8006042 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8005ff0:	2001      	movs	r0, #1
 8005ff2:	f002 fb01 	bl	80085f8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8005ff6:	4b15      	ldr	r3, [pc, #84]	@ (800604c <RadioSetModem+0xb4>)
 8005ff8:	7b5a      	ldrb	r2, [r3, #13]
 8005ffa:	4b14      	ldr	r3, [pc, #80]	@ (800604c <RadioSetModem+0xb4>)
 8005ffc:	7b1b      	ldrb	r3, [r3, #12]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d01e      	beq.n	8006040 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8006002:	4b12      	ldr	r3, [pc, #72]	@ (800604c <RadioSetModem+0xb4>)
 8006004:	7b1a      	ldrb	r2, [r3, #12]
 8006006:	4b11      	ldr	r3, [pc, #68]	@ (800604c <RadioSetModem+0xb4>)
 8006008:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800600a:	4b10      	ldr	r3, [pc, #64]	@ (800604c <RadioSetModem+0xb4>)
 800600c:	7b5b      	ldrb	r3, [r3, #13]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 ff98 	bl	8006f44 <RadioSetPublicNetwork>
        }
        break;
 8006014:	e014      	b.n	8006040 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006016:	2002      	movs	r0, #2
 8006018:	f002 faee 	bl	80085f8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800601c:	4b0b      	ldr	r3, [pc, #44]	@ (800604c <RadioSetModem+0xb4>)
 800601e:	2200      	movs	r2, #0
 8006020:	735a      	strb	r2, [r3, #13]
        break;
 8006022:	e00e      	b.n	8006042 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006024:	2002      	movs	r0, #2
 8006026:	f002 fae7 	bl	80085f8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800602a:	4b08      	ldr	r3, [pc, #32]	@ (800604c <RadioSetModem+0xb4>)
 800602c:	2200      	movs	r2, #0
 800602e:	735a      	strb	r2, [r3, #13]
        break;
 8006030:	e007      	b.n	8006042 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8006032:	2000      	movs	r0, #0
 8006034:	f002 fae0 	bl	80085f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006038:	4b04      	ldr	r3, [pc, #16]	@ (800604c <RadioSetModem+0xb4>)
 800603a:	2200      	movs	r2, #0
 800603c:	735a      	strb	r2, [r3, #13]
        break;
 800603e:	e000      	b.n	8006042 <RadioSetModem+0xaa>
        break;
 8006040:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000278 	.word	0x20000278

08006050 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f002 fa87 	bl	800856c <SUBGRF_SetRfFrequency>
}
 800605e:	bf00      	nop
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b090      	sub	sp, #64	@ 0x40
 800606a:	af0a      	add	r7, sp, #40	@ 0x28
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	603b      	str	r3, [r7, #0]
 8006072:	4613      	mov	r3, r2
 8006074:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8006076:	2301      	movs	r3, #1
 8006078:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8006082:	f000 fdea 	bl	8006c5a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8006086:	2000      	movs	r0, #0
 8006088:	f7ff ff86 	bl	8005f98 <RadioSetModem>

    RadioSetChannel( freq );
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff ffdf 	bl	8006050 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8006092:	2301      	movs	r3, #1
 8006094:	9309      	str	r3, [sp, #36]	@ 0x24
 8006096:	2300      	movs	r3, #0
 8006098:	9308      	str	r3, [sp, #32]
 800609a:	2300      	movs	r3, #0
 800609c:	9307      	str	r3, [sp, #28]
 800609e:	2300      	movs	r3, #0
 80060a0:	9306      	str	r3, [sp, #24]
 80060a2:	2300      	movs	r3, #0
 80060a4:	9305      	str	r3, [sp, #20]
 80060a6:	2300      	movs	r3, #0
 80060a8:	9304      	str	r3, [sp, #16]
 80060aa:	2300      	movs	r3, #0
 80060ac:	9303      	str	r3, [sp, #12]
 80060ae:	2300      	movs	r3, #0
 80060b0:	9302      	str	r3, [sp, #8]
 80060b2:	2303      	movs	r3, #3
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	2300      	movs	r3, #0
 80060bc:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	2000      	movs	r0, #0
 80060c4:	f000 f83c 	bl	8006140 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80060c8:	2000      	movs	r0, #0
 80060ca:	f000 fdcd 	bl	8006c68 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80060ce:	f000 ff67 	bl	8006fa0 <RadioGetWakeupTime>
 80060d2:	4603      	mov	r3, r0
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fa fdd1 	bl	8000c7c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80060da:	f003 fb91 	bl	8009800 <UTIL_TIMER_GetCurrentTime>
 80060de:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80060e0:	e00d      	b.n	80060fe <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80060e2:	2000      	movs	r0, #0
 80060e4:	f000 feae 	bl	8006e44 <RadioRssi>
 80060e8:	4603      	mov	r3, r0
 80060ea:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80060ec:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80060f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	dd02      	ble.n	80060fe <RadioIsChannelFree+0x98>
        {
            status = false;
 80060f8:	2300      	movs	r3, #0
 80060fa:	75fb      	strb	r3, [r7, #23]
            break;
 80060fc:	e006      	b.n	800610c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80060fe:	6938      	ldr	r0, [r7, #16]
 8006100:	f003 fb90 	bl	8009824 <UTIL_TIMER_GetElapsedTime>
 8006104:	4602      	mov	r2, r0
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	4293      	cmp	r3, r2
 800610a:	d8ea      	bhi.n	80060e2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 800610c:	f000 fda5 	bl	8006c5a <RadioStandby>

    return status;
 8006110:	7dfb      	ldrb	r3, [r7, #23]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006124:	2300      	movs	r3, #0
 8006126:	2200      	movs	r2, #0
 8006128:	2100      	movs	r1, #0
 800612a:	2000      	movs	r0, #0
 800612c:	f002 f9c2 	bl	80084b4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8006130:	f001 ff73 	bl	800801a <SUBGRF_GetRandom>
 8006134:	6078      	str	r0, [r7, #4]

    return rnd;
 8006136:	687b      	ldr	r3, [r7, #4]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08a      	sub	sp, #40	@ 0x28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
 800614a:	461a      	mov	r2, r3
 800614c:	4603      	mov	r3, r0
 800614e:	73fb      	strb	r3, [r7, #15]
 8006150:	4613      	mov	r3, r2
 8006152:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8006154:	4ab9      	ldr	r2, [pc, #740]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006156:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800615a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 800615c:	f003 f841 	bl	80091e2 <RFW_DeInit>
    if( rxContinuous == true )
 8006160:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 800616c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d004      	beq.n	800617e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8006174:	4ab2      	ldr	r2, [pc, #712]	@ (8006440 <RadioSetRxConfig+0x300>)
 8006176:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800617a:	7013      	strb	r3, [r2, #0]
 800617c:	e002      	b.n	8006184 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800617e:	4bb0      	ldr	r3, [pc, #704]	@ (8006440 <RadioSetRxConfig+0x300>)
 8006180:	22ff      	movs	r2, #255	@ 0xff
 8006182:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	2b05      	cmp	r3, #5
 8006188:	d009      	beq.n	800619e <RadioSetRxConfig+0x5e>
 800618a:	2b05      	cmp	r3, #5
 800618c:	f300 81d7 	bgt.w	800653e <RadioSetRxConfig+0x3fe>
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 80bf 	beq.w	8006314 <RadioSetRxConfig+0x1d4>
 8006196:	2b01      	cmp	r3, #1
 8006198:	f000 8124 	beq.w	80063e4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800619c:	e1cf      	b.n	800653e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800619e:	2001      	movs	r0, #1
 80061a0:	f002 f880 	bl	80082a4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80061a4:	4ba5      	ldr	r3, [pc, #660]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80061ac:	4aa3      	ldr	r2, [pc, #652]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80061b2:	4ba2      	ldr	r3, [pc, #648]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80061b4:	2209      	movs	r2, #9
 80061b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80061ba:	4ba0      	ldr	r3, [pc, #640]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80061bc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80061c0:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80061c2:	68b8      	ldr	r0, [r7, #8]
 80061c4:	f002 ff40 	bl	8009048 <SUBGRF_GetFskBandwidthRegValue>
 80061c8:	4603      	mov	r3, r0
 80061ca:	461a      	mov	r2, r3
 80061cc:	4b9b      	ldr	r3, [pc, #620]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80061ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80061d2:	4b9a      	ldr	r3, [pc, #616]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80061d8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	b29a      	uxth	r2, r3
 80061de:	4b97      	ldr	r3, [pc, #604]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80061e0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80061e2:	4b96      	ldr	r3, [pc, #600]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80061e8:	4b94      	ldr	r3, [pc, #592]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80061ea:	2210      	movs	r2, #16
 80061ec:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80061ee:	4b93      	ldr	r3, [pc, #588]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80061f4:	4b91      	ldr	r3, [pc, #580]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80061fa:	4b91      	ldr	r3, [pc, #580]	@ (8006440 <RadioSetRxConfig+0x300>)
 80061fc:	781a      	ldrb	r2, [r3, #0]
 80061fe:	4b8f      	ldr	r3, [pc, #572]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006200:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006202:	4b8e      	ldr	r3, [pc, #568]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006204:	2201      	movs	r2, #1
 8006206:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006208:	4b8c      	ldr	r3, [pc, #560]	@ (800643c <RadioSetRxConfig+0x2fc>)
 800620a:	2200      	movs	r2, #0
 800620c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800620e:	2005      	movs	r0, #5
 8006210:	f7ff fec2 	bl	8005f98 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006214:	488b      	ldr	r0, [pc, #556]	@ (8006444 <RadioSetRxConfig+0x304>)
 8006216:	f002 fae3 	bl	80087e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800621a:	488b      	ldr	r0, [pc, #556]	@ (8006448 <RadioSetRxConfig+0x308>)
 800621c:	f002 fbb2 	bl	8008984 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006220:	4a8a      	ldr	r2, [pc, #552]	@ (800644c <RadioSetRxConfig+0x30c>)
 8006222:	f107 031c 	add.w	r3, r7, #28
 8006226:	e892 0003 	ldmia.w	r2, {r0, r1}
 800622a:	e883 0003 	stmia.w	r3, {r0, r1}
 800622e:	f107 031c 	add.w	r3, r7, #28
 8006232:	4618      	mov	r0, r3
 8006234:	f001 fe6f 	bl	8007f16 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006238:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800623c:	f001 feba 	bl	8007fb4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8006240:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8006244:	f000 fe1c 	bl	8006e80 <RadioRead>
 8006248:	4603      	mov	r3, r0
 800624a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 800624e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006252:	f023 0310 	bic.w	r3, r3, #16
 8006256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800625a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800625e:	4619      	mov	r1, r3
 8006260:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8006264:	f000 fdfa 	bl	8006e5c <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8006268:	2104      	movs	r1, #4
 800626a:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 800626e:	f000 fdf5 	bl	8006e5c <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8006272:	f640 009b 	movw	r0, #2203	@ 0x89b
 8006276:	f000 fe03 	bl	8006e80 <RadioRead>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006284:	f023 031c 	bic.w	r3, r3, #28
 8006288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800628c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006290:	f043 0308 	orr.w	r3, r3, #8
 8006294:	b2db      	uxtb	r3, r3
 8006296:	4619      	mov	r1, r3
 8006298:	f640 009b 	movw	r0, #2203	@ 0x89b
 800629c:	f000 fdde 	bl	8006e5c <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80062a0:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80062a4:	f000 fdec 	bl	8006e80 <RadioRead>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80062ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062b2:	f023 0318 	bic.w	r3, r3, #24
 80062b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80062ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062be:	f043 0318 	orr.w	r3, r3, #24
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	4619      	mov	r1, r3
 80062c6:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80062ca:	f000 fdc7 	bl	8006e5c <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80062ce:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80062d2:	f000 fdd5 	bl	8006e80 <RadioRead>
 80062d6:	4603      	mov	r3, r0
 80062d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80062dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80062e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062ec:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	4619      	mov	r1, r3
 80062f4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80062f8:	f000 fdb0 	bl	8006e5c <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80062fc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80062fe:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8006302:	fb02 f303 	mul.w	r3, r2, r3
 8006306:	461a      	mov	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	fbb2 f3f3 	udiv	r3, r2, r3
 800630e:	4a4b      	ldr	r2, [pc, #300]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006310:	6093      	str	r3, [r2, #8]
            break;
 8006312:	e115      	b.n	8006540 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006314:	2000      	movs	r0, #0
 8006316:	f001 ffc5 	bl	80082a4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800631a:	4b48      	ldr	r3, [pc, #288]	@ (800643c <RadioSetRxConfig+0x2fc>)
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006322:	4a46      	ldr	r2, [pc, #280]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006328:	4b44      	ldr	r3, [pc, #272]	@ (800643c <RadioSetRxConfig+0x2fc>)
 800632a:	220b      	movs	r2, #11
 800632c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006330:	68b8      	ldr	r0, [r7, #8]
 8006332:	f002 fe89 	bl	8009048 <SUBGRF_GetFskBandwidthRegValue>
 8006336:	4603      	mov	r3, r0
 8006338:	461a      	mov	r2, r3
 800633a:	4b40      	ldr	r3, [pc, #256]	@ (800643c <RadioSetRxConfig+0x2fc>)
 800633c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006340:	4b3e      	ldr	r3, [pc, #248]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006342:	2200      	movs	r2, #0
 8006344:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006346:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	b29a      	uxth	r2, r3
 800634c:	4b3b      	ldr	r3, [pc, #236]	@ (800643c <RadioSetRxConfig+0x2fc>)
 800634e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006350:	4b3a      	ldr	r3, [pc, #232]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006352:	2204      	movs	r2, #4
 8006354:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8006356:	4b39      	ldr	r3, [pc, #228]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006358:	2218      	movs	r2, #24
 800635a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800635c:	4b37      	ldr	r3, [pc, #220]	@ (800643c <RadioSetRxConfig+0x2fc>)
 800635e:	2200      	movs	r2, #0
 8006360:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006362:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006366:	f083 0301 	eor.w	r3, r3, #1
 800636a:	b2db      	uxtb	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	4b33      	ldr	r3, [pc, #204]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006370:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006372:	4b33      	ldr	r3, [pc, #204]	@ (8006440 <RadioSetRxConfig+0x300>)
 8006374:	781a      	ldrb	r2, [r3, #0]
 8006376:	4b31      	ldr	r3, [pc, #196]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006378:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800637a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006382:	4b2e      	ldr	r3, [pc, #184]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006384:	22f2      	movs	r2, #242	@ 0xf2
 8006386:	75da      	strb	r2, [r3, #23]
 8006388:	e002      	b.n	8006390 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800638a:	4b2c      	ldr	r3, [pc, #176]	@ (800643c <RadioSetRxConfig+0x2fc>)
 800638c:	2201      	movs	r2, #1
 800638e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006390:	4b2a      	ldr	r3, [pc, #168]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006392:	2201      	movs	r2, #1
 8006394:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006396:	f000 fc60 	bl	8006c5a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800639a:	2000      	movs	r0, #0
 800639c:	f7ff fdfc 	bl	8005f98 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80063a0:	4828      	ldr	r0, [pc, #160]	@ (8006444 <RadioSetRxConfig+0x304>)
 80063a2:	f002 fa1d 	bl	80087e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80063a6:	4828      	ldr	r0, [pc, #160]	@ (8006448 <RadioSetRxConfig+0x308>)
 80063a8:	f002 faec 	bl	8008984 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80063ac:	4a28      	ldr	r2, [pc, #160]	@ (8006450 <RadioSetRxConfig+0x310>)
 80063ae:	f107 0314 	add.w	r3, r7, #20
 80063b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80063ba:	f107 0314 	add.w	r3, r7, #20
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 fda9 	bl	8007f16 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80063c4:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80063c8:	f001 fdf4 	bl	8007fb4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80063cc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80063ce:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80063d2:	fb02 f303 	mul.w	r3, r2, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	fbb2 f3f3 	udiv	r3, r2, r3
 80063de:	4a17      	ldr	r2, [pc, #92]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80063e0:	6093      	str	r3, [r2, #8]
            break;
 80063e2:	e0ad      	b.n	8006540 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80063e4:	2000      	movs	r0, #0
 80063e6:	f001 ff5d 	bl	80082a4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80063ea:	4b14      	ldr	r3, [pc, #80]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	4b11      	ldr	r3, [pc, #68]	@ (800643c <RadioSetRxConfig+0x2fc>)
 80063f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80063fc:	4a15      	ldr	r2, [pc, #84]	@ (8006454 <RadioSetRxConfig+0x314>)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4413      	add	r3, r2
 8006402:	781a      	ldrb	r2, [r3, #0]
 8006404:	4b0d      	ldr	r3, [pc, #52]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006406:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800640a:	4a0c      	ldr	r2, [pc, #48]	@ (800643c <RadioSetRxConfig+0x2fc>)
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d105      	bne.n	8006424 <RadioSetRxConfig+0x2e4>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b0b      	cmp	r3, #11
 800641c:	d008      	beq.n	8006430 <RadioSetRxConfig+0x2f0>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b0c      	cmp	r3, #12
 8006422:	d005      	beq.n	8006430 <RadioSetRxConfig+0x2f0>
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d116      	bne.n	8006458 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b0c      	cmp	r3, #12
 800642e:	d113      	bne.n	8006458 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006430:	4b02      	ldr	r3, [pc, #8]	@ (800643c <RadioSetRxConfig+0x2fc>)
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8006438:	e012      	b.n	8006460 <RadioSetRxConfig+0x320>
 800643a:	bf00      	nop
 800643c:	20000278 	.word	0x20000278
 8006440:	2000000d 	.word	0x2000000d
 8006444:	200002b0 	.word	0x200002b0
 8006448:	20000286 	.word	0x20000286
 800644c:	08009a18 	.word	0x08009a18
 8006450:	08009a20 	.word	0x08009a20
 8006454:	08009bbc 	.word	0x08009bbc
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006458:	4b3b      	ldr	r3, [pc, #236]	@ (8006548 <RadioSetRxConfig+0x408>)
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006460:	4b39      	ldr	r3, [pc, #228]	@ (8006548 <RadioSetRxConfig+0x408>)
 8006462:	2201      	movs	r2, #1
 8006464:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006466:	4b38      	ldr	r3, [pc, #224]	@ (8006548 <RadioSetRxConfig+0x408>)
 8006468:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800646c:	2b05      	cmp	r3, #5
 800646e:	d004      	beq.n	800647a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8006470:	4b35      	ldr	r3, [pc, #212]	@ (8006548 <RadioSetRxConfig+0x408>)
 8006472:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006476:	2b06      	cmp	r3, #6
 8006478:	d10a      	bne.n	8006490 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800647a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800647c:	2b0b      	cmp	r3, #11
 800647e:	d803      	bhi.n	8006488 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006480:	4b31      	ldr	r3, [pc, #196]	@ (8006548 <RadioSetRxConfig+0x408>)
 8006482:	220c      	movs	r2, #12
 8006484:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8006486:	e006      	b.n	8006496 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006488:	4a2f      	ldr	r2, [pc, #188]	@ (8006548 <RadioSetRxConfig+0x408>)
 800648a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800648c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800648e:	e002      	b.n	8006496 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006490:	4a2d      	ldr	r2, [pc, #180]	@ (8006548 <RadioSetRxConfig+0x408>)
 8006492:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006494:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006496:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800649a:	4b2b      	ldr	r3, [pc, #172]	@ (8006548 <RadioSetRxConfig+0x408>)
 800649c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800649e:	4b2b      	ldr	r3, [pc, #172]	@ (800654c <RadioSetRxConfig+0x40c>)
 80064a0:	781a      	ldrb	r2, [r3, #0]
 80064a2:	4b29      	ldr	r3, [pc, #164]	@ (8006548 <RadioSetRxConfig+0x408>)
 80064a4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80064a6:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80064aa:	4b27      	ldr	r3, [pc, #156]	@ (8006548 <RadioSetRxConfig+0x408>)
 80064ac:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80064b0:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80064b4:	4b24      	ldr	r3, [pc, #144]	@ (8006548 <RadioSetRxConfig+0x408>)
 80064b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80064ba:	f000 fbce 	bl	8006c5a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80064be:	2001      	movs	r0, #1
 80064c0:	f7ff fd6a 	bl	8005f98 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80064c4:	4822      	ldr	r0, [pc, #136]	@ (8006550 <RadioSetRxConfig+0x410>)
 80064c6:	f002 f98b 	bl	80087e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80064ca:	4822      	ldr	r0, [pc, #136]	@ (8006554 <RadioSetRxConfig+0x414>)
 80064cc:	f002 fa5a 	bl	8008984 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80064d0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fef4 	bl	80082c2 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80064da:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80064de:	f002 fbad 	bl	8008c3c <SUBGRF_ReadRegister>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	4619      	mov	r1, r3
 80064ec:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80064f0:	f002 fb90 	bl	8008c14 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80064f4:	4b14      	ldr	r3, [pc, #80]	@ (8006548 <RadioSetRxConfig+0x408>)
 80064f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d10d      	bne.n	800651a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80064fe:	f240 7036 	movw	r0, #1846	@ 0x736
 8006502:	f002 fb9b 	bl	8008c3c <SUBGRF_ReadRegister>
 8006506:	4603      	mov	r3, r0
 8006508:	f023 0304 	bic.w	r3, r3, #4
 800650c:	b2db      	uxtb	r3, r3
 800650e:	4619      	mov	r1, r3
 8006510:	f240 7036 	movw	r0, #1846	@ 0x736
 8006514:	f002 fb7e 	bl	8008c14 <SUBGRF_WriteRegister>
 8006518:	e00c      	b.n	8006534 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800651a:	f240 7036 	movw	r0, #1846	@ 0x736
 800651e:	f002 fb8d 	bl	8008c3c <SUBGRF_ReadRegister>
 8006522:	4603      	mov	r3, r0
 8006524:	f043 0304 	orr.w	r3, r3, #4
 8006528:	b2db      	uxtb	r3, r3
 800652a:	4619      	mov	r1, r3
 800652c:	f240 7036 	movw	r0, #1846	@ 0x736
 8006530:	f002 fb70 	bl	8008c14 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8006534:	4b04      	ldr	r3, [pc, #16]	@ (8006548 <RadioSetRxConfig+0x408>)
 8006536:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800653a:	609a      	str	r2, [r3, #8]
            break;
 800653c:	e000      	b.n	8006540 <RadioSetRxConfig+0x400>
            break;
 800653e:	bf00      	nop
    }
}
 8006540:	bf00      	nop
 8006542:	3728      	adds	r7, #40	@ 0x28
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20000278 	.word	0x20000278
 800654c:	2000000d 	.word	0x2000000d
 8006550:	200002b0 	.word	0x200002b0
 8006554:	20000286 	.word	0x20000286

08006558 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	60ba      	str	r2, [r7, #8]
 8006560:	607b      	str	r3, [r7, #4]
 8006562:	4603      	mov	r3, r0
 8006564:	73fb      	strb	r3, [r7, #15]
 8006566:	460b      	mov	r3, r1
 8006568:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800656a:	f002 fe3a 	bl	80091e2 <RFW_DeInit>
    switch( modem )
 800656e:	7bfb      	ldrb	r3, [r7, #15]
 8006570:	2b04      	cmp	r3, #4
 8006572:	f000 80c7 	beq.w	8006704 <RadioSetTxConfig+0x1ac>
 8006576:	2b04      	cmp	r3, #4
 8006578:	f300 80d6 	bgt.w	8006728 <RadioSetTxConfig+0x1d0>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <RadioSetTxConfig+0x2e>
 8006580:	2b01      	cmp	r3, #1
 8006582:	d059      	beq.n	8006638 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8006584:	e0d0      	b.n	8006728 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006586:	4b77      	ldr	r3, [pc, #476]	@ (8006764 <RadioSetTxConfig+0x20c>)
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800658e:	4a75      	ldr	r2, [pc, #468]	@ (8006764 <RadioSetTxConfig+0x20c>)
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006594:	4b73      	ldr	r3, [pc, #460]	@ (8006764 <RadioSetTxConfig+0x20c>)
 8006596:	220b      	movs	r2, #11
 8006598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f002 fd53 	bl	8009048 <SUBGRF_GetFskBandwidthRegValue>
 80065a2:	4603      	mov	r3, r0
 80065a4:	461a      	mov	r2, r3
 80065a6:	4b6f      	ldr	r3, [pc, #444]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80065a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80065ac:	4a6d      	ldr	r2, [pc, #436]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80065b2:	4b6c      	ldr	r3, [pc, #432]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80065b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	b29a      	uxth	r2, r3
 80065be:	4b69      	ldr	r3, [pc, #420]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80065c0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80065c2:	4b68      	ldr	r3, [pc, #416]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80065c4:	2204      	movs	r2, #4
 80065c6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80065c8:	4b66      	ldr	r3, [pc, #408]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80065ca:	2218      	movs	r2, #24
 80065cc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80065ce:	4b65      	ldr	r3, [pc, #404]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80065d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80065d8:	f083 0301 	eor.w	r3, r3, #1
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	4b60      	ldr	r3, [pc, #384]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80065e2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80065e4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80065ec:	4b5d      	ldr	r3, [pc, #372]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80065ee:	22f2      	movs	r2, #242	@ 0xf2
 80065f0:	75da      	strb	r2, [r3, #23]
 80065f2:	e002      	b.n	80065fa <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80065f4:	4b5b      	ldr	r3, [pc, #364]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80065fa:	4b5a      	ldr	r3, [pc, #360]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006600:	f000 fb2b 	bl	8006c5a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8006604:	2000      	movs	r0, #0
 8006606:	f7ff fcc7 	bl	8005f98 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800660a:	4857      	ldr	r0, [pc, #348]	@ (8006768 <RadioSetTxConfig+0x210>)
 800660c:	f002 f8e8 	bl	80087e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006610:	4856      	ldr	r0, [pc, #344]	@ (800676c <RadioSetTxConfig+0x214>)
 8006612:	f002 f9b7 	bl	8008984 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006616:	4a56      	ldr	r2, [pc, #344]	@ (8006770 <RadioSetTxConfig+0x218>)
 8006618:	f107 0310 	add.w	r3, r7, #16
 800661c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006620:	e883 0003 	stmia.w	r3, {r0, r1}
 8006624:	f107 0310 	add.w	r3, r7, #16
 8006628:	4618      	mov	r0, r3
 800662a:	f001 fc74 	bl	8007f16 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800662e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8006632:	f001 fcbf 	bl	8007fb4 <SUBGRF_SetWhiteningSeed>
            break;
 8006636:	e078      	b.n	800672a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006638:	4b4a      	ldr	r3, [pc, #296]	@ (8006764 <RadioSetTxConfig+0x20c>)
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	b2da      	uxtb	r2, r3
 8006644:	4b47      	ldr	r3, [pc, #284]	@ (8006764 <RadioSetTxConfig+0x20c>)
 8006646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800664a:	4a4a      	ldr	r2, [pc, #296]	@ (8006774 <RadioSetTxConfig+0x21c>)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4413      	add	r3, r2
 8006650:	781a      	ldrb	r2, [r3, #0]
 8006652:	4b44      	ldr	r3, [pc, #272]	@ (8006764 <RadioSetTxConfig+0x20c>)
 8006654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8006658:	4a42      	ldr	r2, [pc, #264]	@ (8006764 <RadioSetTxConfig+0x20c>)
 800665a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800665e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <RadioSetTxConfig+0x11c>
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	2b0b      	cmp	r3, #11
 800666c:	d008      	beq.n	8006680 <RadioSetTxConfig+0x128>
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	2b0c      	cmp	r3, #12
 8006672:	d005      	beq.n	8006680 <RadioSetTxConfig+0x128>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d107      	bne.n	800668a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	2b0c      	cmp	r3, #12
 800667e:	d104      	bne.n	800668a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006680:	4b38      	ldr	r3, [pc, #224]	@ (8006764 <RadioSetTxConfig+0x20c>)
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8006688:	e003      	b.n	8006692 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800668a:	4b36      	ldr	r3, [pc, #216]	@ (8006764 <RadioSetTxConfig+0x20c>)
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006692:	4b34      	ldr	r3, [pc, #208]	@ (8006764 <RadioSetTxConfig+0x20c>)
 8006694:	2201      	movs	r2, #1
 8006696:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006698:	4b32      	ldr	r3, [pc, #200]	@ (8006764 <RadioSetTxConfig+0x20c>)
 800669a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800669e:	2b05      	cmp	r3, #5
 80066a0:	d004      	beq.n	80066ac <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80066a2:	4b30      	ldr	r3, [pc, #192]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80066a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80066a8:	2b06      	cmp	r3, #6
 80066aa:	d10a      	bne.n	80066c2 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80066ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066ae:	2b0b      	cmp	r3, #11
 80066b0:	d803      	bhi.n	80066ba <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80066b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80066b4:	220c      	movs	r2, #12
 80066b6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80066b8:	e006      	b.n	80066c8 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80066ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80066bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066be:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80066c0:	e002      	b.n	80066c8 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80066c2:	4a28      	ldr	r2, [pc, #160]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80066c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066c6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80066c8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80066cc:	4b25      	ldr	r3, [pc, #148]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80066ce:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80066d0:	4b29      	ldr	r3, [pc, #164]	@ (8006778 <RadioSetTxConfig+0x220>)
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	4b23      	ldr	r3, [pc, #140]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80066d6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80066d8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80066dc:	4b21      	ldr	r3, [pc, #132]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80066de:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80066e2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80066e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006764 <RadioSetTxConfig+0x20c>)
 80066e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80066ec:	f000 fab5 	bl	8006c5a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80066f0:	2001      	movs	r0, #1
 80066f2:	f7ff fc51 	bl	8005f98 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80066f6:	481c      	ldr	r0, [pc, #112]	@ (8006768 <RadioSetTxConfig+0x210>)
 80066f8:	f002 f872 	bl	80087e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80066fc:	481b      	ldr	r0, [pc, #108]	@ (800676c <RadioSetTxConfig+0x214>)
 80066fe:	f002 f941 	bl	8008984 <SUBGRF_SetPacketParams>
            break;
 8006702:	e012      	b.n	800672a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8006704:	2004      	movs	r0, #4
 8006706:	f7ff fc47 	bl	8005f98 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800670a:	4b16      	ldr	r3, [pc, #88]	@ (8006764 <RadioSetTxConfig+0x20c>)
 800670c:	2202      	movs	r2, #2
 800670e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8006712:	4a14      	ldr	r2, [pc, #80]	@ (8006764 <RadioSetTxConfig+0x20c>)
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006718:	4b12      	ldr	r3, [pc, #72]	@ (8006764 <RadioSetTxConfig+0x20c>)
 800671a:	2216      	movs	r2, #22
 800671c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006720:	4811      	ldr	r0, [pc, #68]	@ (8006768 <RadioSetTxConfig+0x210>)
 8006722:	f002 f85d 	bl	80087e0 <SUBGRF_SetModulationParams>
            break;
 8006726:	e000      	b.n	800672a <RadioSetTxConfig+0x1d2>
            break;
 8006728:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800672a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800672e:	4618      	mov	r0, r3
 8006730:	f002 fb8c 	bl	8008e4c <SUBGRF_SetRfTxPower>
 8006734:	4603      	mov	r3, r0
 8006736:	461a      	mov	r2, r3
 8006738:	4b0a      	ldr	r3, [pc, #40]	@ (8006764 <RadioSetTxConfig+0x20c>)
 800673a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800673e:	210e      	movs	r1, #14
 8006740:	f640 101f 	movw	r0, #2335	@ 0x91f
 8006744:	f002 fa66 	bl	8008c14 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006748:	4b06      	ldr	r3, [pc, #24]	@ (8006764 <RadioSetTxConfig+0x20c>)
 800674a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800674e:	4618      	mov	r0, r3
 8006750:	f002 fd5b 	bl	800920a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006754:	4a03      	ldr	r2, [pc, #12]	@ (8006764 <RadioSetTxConfig+0x20c>)
 8006756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006758:	6053      	str	r3, [r2, #4]
}
 800675a:	bf00      	nop
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000278 	.word	0x20000278
 8006768:	200002b0 	.word	0x200002b0
 800676c:	20000286 	.word	0x20000286
 8006770:	08009a20 	.word	0x08009a20
 8006774:	08009bbc 	.word	0x08009bbc
 8006778:	2000000d 	.word	0x2000000d

0800677c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
    return true;
 8006784:	2301      	movs	r3, #1
}
 8006786:	4618      	mov	r0, r3
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr

08006790 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	2b0a      	cmp	r3, #10
 80067a2:	d83e      	bhi.n	8006822 <RadioGetLoRaBandwidthInHz+0x92>
 80067a4:	a201      	add	r2, pc, #4	@ (adr r2, 80067ac <RadioGetLoRaBandwidthInHz+0x1c>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	080067d9 	.word	0x080067d9
 80067b0:	080067e9 	.word	0x080067e9
 80067b4:	080067f9 	.word	0x080067f9
 80067b8:	08006809 	.word	0x08006809
 80067bc:	08006811 	.word	0x08006811
 80067c0:	08006817 	.word	0x08006817
 80067c4:	0800681d 	.word	0x0800681d
 80067c8:	08006823 	.word	0x08006823
 80067cc:	080067e1 	.word	0x080067e1
 80067d0:	080067f1 	.word	0x080067f1
 80067d4:	08006801 	.word	0x08006801
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80067d8:	f641 6384 	movw	r3, #7812	@ 0x1e84
 80067dc:	60fb      	str	r3, [r7, #12]
        break;
 80067de:	e020      	b.n	8006822 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80067e0:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 80067e4:	60fb      	str	r3, [r7, #12]
        break;
 80067e6:	e01c      	b.n	8006822 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80067e8:	f643 5309 	movw	r3, #15625	@ 0x3d09
 80067ec:	60fb      	str	r3, [r7, #12]
        break;
 80067ee:	e018      	b.n	8006822 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80067f0:	f245 1361 	movw	r3, #20833	@ 0x5161
 80067f4:	60fb      	str	r3, [r7, #12]
        break;
 80067f6:	e014      	b.n	8006822 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80067f8:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80067fc:	60fb      	str	r3, [r7, #12]
        break;
 80067fe:	e010      	b.n	8006822 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8006800:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8006804:	60fb      	str	r3, [r7, #12]
        break;
 8006806:	e00c      	b.n	8006822 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8006808:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800680c:	60fb      	str	r3, [r7, #12]
        break;
 800680e:	e008      	b.n	8006822 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8006810:	4b07      	ldr	r3, [pc, #28]	@ (8006830 <RadioGetLoRaBandwidthInHz+0xa0>)
 8006812:	60fb      	str	r3, [r7, #12]
        break;
 8006814:	e005      	b.n	8006822 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8006816:	4b07      	ldr	r3, [pc, #28]	@ (8006834 <RadioGetLoRaBandwidthInHz+0xa4>)
 8006818:	60fb      	str	r3, [r7, #12]
        break;
 800681a:	e002      	b.n	8006822 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800681c:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <RadioGetLoRaBandwidthInHz+0xa8>)
 800681e:	60fb      	str	r3, [r7, #12]
        break;
 8006820:	bf00      	nop
    }

    return bandwidthInHz;
 8006822:	68fb      	ldr	r3, [r7, #12]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	0001e848 	.word	0x0001e848
 8006834:	0003d090 	.word	0x0003d090
 8006838:	0007a120 	.word	0x0007a120

0800683c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	4608      	mov	r0, r1
 8006846:	4611      	mov	r1, r2
 8006848:	461a      	mov	r2, r3
 800684a:	4603      	mov	r3, r0
 800684c:	70fb      	strb	r3, [r7, #3]
 800684e:	460b      	mov	r3, r1
 8006850:	803b      	strh	r3, [r7, #0]
 8006852:	4613      	mov	r3, r2
 8006854:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8006856:	883b      	ldrh	r3, [r7, #0]
 8006858:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800685a:	78ba      	ldrb	r2, [r7, #2]
 800685c:	f082 0201 	eor.w	r2, r2, #1
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	2a00      	cmp	r2, #0
 8006864:	d001      	beq.n	800686a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8006866:	2208      	movs	r2, #8
 8006868:	e000      	b.n	800686c <RadioGetGfskTimeOnAirNumerator+0x30>
 800686a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800686c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800686e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8006872:	7c3b      	ldrb	r3, [r7, #16]
 8006874:	7d39      	ldrb	r1, [r7, #20]
 8006876:	2900      	cmp	r1, #0
 8006878:	d001      	beq.n	800687e <RadioGetGfskTimeOnAirNumerator+0x42>
 800687a:	2102      	movs	r1, #2
 800687c:	e000      	b.n	8006880 <RadioGetGfskTimeOnAirNumerator+0x44>
 800687e:	2100      	movs	r1, #0
 8006880:	440b      	add	r3, r1
 8006882:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006884:	4413      	add	r3, r2
}
 8006886:	4618      	mov	r0, r3
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	bc80      	pop	{r7}
 800688e:	4770      	bx	lr

08006890 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8006890:	b480      	push	{r7}
 8006892:	b08b      	sub	sp, #44	@ 0x2c
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	4611      	mov	r1, r2
 800689c:	461a      	mov	r2, r3
 800689e:	460b      	mov	r3, r1
 80068a0:	71fb      	strb	r3, [r7, #7]
 80068a2:	4613      	mov	r3, r2
 80068a4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	3304      	adds	r3, #4
 80068aa:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80068ac:	2300      	movs	r3, #0
 80068ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b05      	cmp	r3, #5
 80068b6:	d002      	beq.n	80068be <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2b06      	cmp	r3, #6
 80068bc:	d104      	bne.n	80068c8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80068be:	88bb      	ldrh	r3, [r7, #4]
 80068c0:	2b0b      	cmp	r3, #11
 80068c2:	d801      	bhi.n	80068c8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80068c4:	230c      	movs	r3, #12
 80068c6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d105      	bne.n	80068da <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b0b      	cmp	r3, #11
 80068d2:	d008      	beq.n	80068e6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b0c      	cmp	r3, #12
 80068d8:	d005      	beq.n	80068e6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d105      	bne.n	80068ec <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b0c      	cmp	r3, #12
 80068e4:	d102      	bne.n	80068ec <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80068e6:	2301      	movs	r3, #1
 80068e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80068ec:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80068f0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80068f2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80068f6:	2a00      	cmp	r2, #0
 80068f8:	d001      	beq.n	80068fe <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80068fa:	2210      	movs	r2, #16
 80068fc:	e000      	b.n	8006900 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80068fe:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006900:	4413      	add	r3, r2
 8006902:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8006908:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800690a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800690e:	2a00      	cmp	r2, #0
 8006910:	d001      	beq.n	8006916 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8006912:	2200      	movs	r2, #0
 8006914:	e000      	b.n	8006918 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8006916:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8006918:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800691a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b06      	cmp	r3, #6
 8006920:	d803      	bhi.n	800692a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	623b      	str	r3, [r7, #32]
 8006928:	e00e      	b.n	8006948 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	3308      	adds	r3, #8
 800692e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8006930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	3b02      	subs	r3, #2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	623b      	str	r3, [r7, #32]
 8006940:	e002      	b.n	8006948 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	da01      	bge.n	8006952 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8006952:	69fa      	ldr	r2, [r7, #28]
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	4413      	add	r3, r2
 8006958:	1e5a      	subs	r2, r3, #1
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	fb03 f202 	mul.w	r2, r3, r2
 8006966:	88bb      	ldrh	r3, [r7, #4]
 8006968:	4413      	add	r3, r2
    int32_t intermediate =
 800696a:	330c      	adds	r3, #12
 800696c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b06      	cmp	r3, #6
 8006972:	d802      	bhi.n	800697a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	3302      	adds	r3, #2
 8006978:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	3b02      	subs	r3, #2
 8006984:	fa02 f303 	lsl.w	r3, r2, r3
}
 8006988:	4618      	mov	r0, r3
 800698a:	372c      	adds	r7, #44	@ 0x2c
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr
	...

08006994 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08a      	sub	sp, #40	@ 0x28
 8006998:	af04      	add	r7, sp, #16
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
 800699e:	461a      	mov	r2, r3
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]
 80069a4:	4613      	mov	r3, r2
 80069a6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80069ac:	2301      	movs	r3, #1
 80069ae:	613b      	str	r3, [r7, #16]

    switch( modem )
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <RadioTimeOnAir+0x28>
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d017      	beq.n	80069ea <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80069ba:	e035      	b.n	8006a28 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80069bc:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 80069c0:	8c3a      	ldrh	r2, [r7, #32]
 80069c2:	7bb9      	ldrb	r1, [r7, #14]
 80069c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	4603      	mov	r3, r0
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff ff32 	bl	800683c <RadioGetGfskTimeOnAirNumerator>
 80069d8:	4603      	mov	r3, r0
 80069da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80069de:	fb02 f303 	mul.w	r3, r2, r3
 80069e2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	613b      	str	r3, [r7, #16]
        break;
 80069e8:	e01e      	b.n	8006a28 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80069ea:	8c39      	ldrh	r1, [r7, #32]
 80069ec:	7bba      	ldrb	r2, [r7, #14]
 80069ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069f2:	9302      	str	r3, [sp, #8]
 80069f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	460b      	mov	r3, r1
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	68b8      	ldr	r0, [r7, #8]
 8006a06:	f7ff ff43 	bl	8006890 <RadioGetLoRaTimeOnAirNumerator>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a10:	fb02 f303 	mul.w	r3, r2, r3
 8006a14:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8006a16:	4a0a      	ldr	r2, [pc, #40]	@ (8006a40 <RadioTimeOnAir+0xac>)
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7ff feb6 	bl	8006790 <RadioGetLoRaBandwidthInHz>
 8006a24:	6138      	str	r0, [r7, #16]
        break;
 8006a26:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	1e5a      	subs	r2, r3, #1
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	08009bbc 	.word	0x08009bbc

08006a44 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8006a50:	2300      	movs	r3, #0
 8006a52:	2200      	movs	r2, #0
 8006a54:	f240 2101 	movw	r1, #513	@ 0x201
 8006a58:	f240 2001 	movw	r0, #513	@ 0x201
 8006a5c:	f001 fd2a 	bl	80084b4 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8006a60:	4b70      	ldr	r3, [pc, #448]	@ (8006c24 <RadioSend+0x1e0>)
 8006a62:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8006a66:	2101      	movs	r1, #1
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f002 f9c7 	bl	8008dfc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8006a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8006c24 <RadioSend+0x1e0>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d112      	bne.n	8006a9c <RadioSend+0x58>
 8006a76:	4b6b      	ldr	r3, [pc, #428]	@ (8006c24 <RadioSend+0x1e0>)
 8006a78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a7c:	2b06      	cmp	r3, #6
 8006a7e:	d10d      	bne.n	8006a9c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8006a80:	f640 0089 	movw	r0, #2185	@ 0x889
 8006a84:	f002 f8da 	bl	8008c3c <SUBGRF_ReadRegister>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f023 0304 	bic.w	r3, r3, #4
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	4619      	mov	r1, r3
 8006a92:	f640 0089 	movw	r0, #2185	@ 0x889
 8006a96:	f002 f8bd 	bl	8008c14 <SUBGRF_WriteRegister>
 8006a9a:	e00c      	b.n	8006ab6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8006a9c:	f640 0089 	movw	r0, #2185	@ 0x889
 8006aa0:	f002 f8cc 	bl	8008c3c <SUBGRF_ReadRegister>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f043 0304 	orr.w	r3, r3, #4
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	4619      	mov	r1, r3
 8006aae:	f640 0089 	movw	r0, #2185	@ 0x889
 8006ab2:	f002 f8af 	bl	8008c14 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8006ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8006c24 <RadioSend+0x1e0>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	f200 80a2 	bhi.w	8006c04 <RadioSend+0x1c0>
 8006ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac8 <RadioSend+0x84>)
 8006ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac6:	bf00      	nop
 8006ac8:	08006af7 	.word	0x08006af7
 8006acc:	08006add 	.word	0x08006add
 8006ad0:	08006af7 	.word	0x08006af7
 8006ad4:	08006b4d 	.word	0x08006b4d
 8006ad8:	08006b6d 	.word	0x08006b6d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8006adc:	4a51      	ldr	r2, [pc, #324]	@ (8006c24 <RadioSend+0x1e0>)
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006ae2:	4851      	ldr	r0, [pc, #324]	@ (8006c28 <RadioSend+0x1e4>)
 8006ae4:	f001 ff4e 	bl	8008984 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	2200      	movs	r2, #0
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 f9fe 	bl	8007ef0 <SUBGRF_SendPayload>
            break;
 8006af4:	e087      	b.n	8006c06 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8006af6:	f002 fb7a 	bl	80091ee <RFW_Is_Init>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d118      	bne.n	8006b32 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8006b00:	f107 020d 	add.w	r2, r7, #13
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f002 fb88 	bl	800921e <RFW_TransmitInit>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10c      	bne.n	8006b2e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8006b14:	7b7a      	ldrb	r2, [r7, #13]
 8006b16:	4b43      	ldr	r3, [pc, #268]	@ (8006c24 <RadioSend+0x1e0>)
 8006b18:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006b1a:	4843      	ldr	r0, [pc, #268]	@ (8006c28 <RadioSend+0x1e4>)
 8006b1c:	f001 ff32 	bl	8008984 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8006b20:	7b7b      	ldrb	r3, [r7, #13]
 8006b22:	2200      	movs	r2, #0
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 f9e2 	bl	8007ef0 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8006b2c:	e06b      	b.n	8006c06 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e073      	b.n	8006c1a <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8006b32:	4a3c      	ldr	r2, [pc, #240]	@ (8006c24 <RadioSend+0x1e0>)
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006b38:	483b      	ldr	r0, [pc, #236]	@ (8006c28 <RadioSend+0x1e4>)
 8006b3a:	f001 ff23 	bl	8008984 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8006b3e:	78fb      	ldrb	r3, [r7, #3]
 8006b40:	2200      	movs	r2, #0
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 f9d3 	bl	8007ef0 <SUBGRF_SendPayload>
            break;
 8006b4a:	e05c      	b.n	8006c06 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006b4c:	4b35      	ldr	r3, [pc, #212]	@ (8006c24 <RadioSend+0x1e0>)
 8006b4e:	2202      	movs	r2, #2
 8006b50:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8006b52:	4a34      	ldr	r2, [pc, #208]	@ (8006c24 <RadioSend+0x1e0>)
 8006b54:	78fb      	ldrb	r3, [r7, #3]
 8006b56:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006b58:	4833      	ldr	r0, [pc, #204]	@ (8006c28 <RadioSend+0x1e4>)
 8006b5a:	f001 ff13 	bl	8008984 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	2200      	movs	r2, #0
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 f9c3 	bl	8007ef0 <SUBGRF_SendPayload>
            break;
 8006b6a:	e04c      	b.n	8006c06 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	482e      	ldr	r0, [pc, #184]	@ (8006c2c <RadioSend+0x1e8>)
 8006b74:	f000 fc96 	bl	80074a4 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006b78:	4b2a      	ldr	r3, [pc, #168]	@ (8006c24 <RadioSend+0x1e0>)
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	3301      	adds	r3, #1
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	4b27      	ldr	r3, [pc, #156]	@ (8006c24 <RadioSend+0x1e0>)
 8006b86:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006b88:	4827      	ldr	r0, [pc, #156]	@ (8006c28 <RadioSend+0x1e4>)
 8006b8a:	f001 fefb 	bl	8008984 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8006b8e:	2100      	movs	r1, #0
 8006b90:	20f1      	movs	r0, #241	@ 0xf1
 8006b92:	f000 f963 	bl	8006e5c <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8006b96:	2100      	movs	r1, #0
 8006b98:	20f0      	movs	r0, #240	@ 0xf0
 8006b9a:	f000 f95f 	bl	8006e5c <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8006b9e:	4b21      	ldr	r3, [pc, #132]	@ (8006c24 <RadioSend+0x1e0>)
 8006ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ba2:	2b64      	cmp	r3, #100	@ 0x64
 8006ba4:	d108      	bne.n	8006bb8 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8006ba6:	2170      	movs	r1, #112	@ 0x70
 8006ba8:	20f3      	movs	r0, #243	@ 0xf3
 8006baa:	f000 f957 	bl	8006e5c <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8006bae:	211d      	movs	r1, #29
 8006bb0:	20f2      	movs	r0, #242	@ 0xf2
 8006bb2:	f000 f953 	bl	8006e5c <RadioWrite>
 8006bb6:	e007      	b.n	8006bc8 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8006bb8:	21e1      	movs	r1, #225	@ 0xe1
 8006bba:	20f3      	movs	r0, #243	@ 0xf3
 8006bbc:	f000 f94e 	bl	8006e5c <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8006bc0:	2104      	movs	r1, #4
 8006bc2:	20f2      	movs	r0, #242	@ 0xf2
 8006bc4:	f000 f94a 	bl	8006e5c <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8006bc8:	78fb      	ldrb	r3, [r7, #3]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	3302      	adds	r3, #2
 8006bd2:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8006bd4:	89fb      	ldrh	r3, [r7, #14]
 8006bd6:	0a1b      	lsrs	r3, r3, #8
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	4619      	mov	r1, r3
 8006bde:	20f4      	movs	r0, #244	@ 0xf4
 8006be0:	f000 f93c 	bl	8006e5c <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8006be4:	89fb      	ldrh	r3, [r7, #14]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	4619      	mov	r1, r3
 8006bea:	20f5      	movs	r0, #245	@ 0xf5
 8006bec:	f000 f936 	bl	8006e5c <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	480b      	ldr	r0, [pc, #44]	@ (8006c2c <RadioSend+0x1e8>)
 8006bfe:	f001 f977 	bl	8007ef0 <SUBGRF_SendPayload>
            break;
 8006c02:	e000      	b.n	8006c06 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8006c04:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8006c06:	4b07      	ldr	r3, [pc, #28]	@ (8006c24 <RadioSend+0x1e0>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4808      	ldr	r0, [pc, #32]	@ (8006c30 <RadioSend+0x1ec>)
 8006c0e:	f002 fdcd 	bl	80097ac <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8006c12:	4807      	ldr	r0, [pc, #28]	@ (8006c30 <RadioSend+0x1ec>)
 8006c14:	f002 fcec 	bl	80095f0 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000278 	.word	0x20000278
 8006c28:	20000286 	.word	0x20000286
 8006c2c:	20000174 	.word	0x20000174
 8006c30:	200002d4 	.word	0x200002d4

08006c34 <RadioSleep>:

static void RadioSleep( void )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8006c3e:	793b      	ldrb	r3, [r7, #4]
 8006c40:	f043 0304 	orr.w	r3, r3, #4
 8006c44:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8006c46:	7938      	ldrb	r0, [r7, #4]
 8006c48:	f001 fa2e 	bl	80080a8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8006c4c:	2002      	movs	r0, #2
 8006c4e:	f7fa f815 	bl	8000c7c <HAL_Delay>
}
 8006c52:	bf00      	nop
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <RadioStandby>:

static void RadioStandby( void )
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8006c5e:	2000      	movs	r0, #0
 8006c60:	f001 fa54 	bl	800810c <SUBGRF_SetStandby>
}
 8006c64:	bf00      	nop
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8006c70:	f002 fabd 	bl	80091ee <RFW_Is_Init>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d102      	bne.n	8006c80 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8006c7a:	f002 fae0 	bl	800923e <RFW_ReceiveInit>
 8006c7e:	e007      	b.n	8006c90 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006c80:	2300      	movs	r3, #0
 8006c82:	2200      	movs	r2, #0
 8006c84:	f240 2162 	movw	r1, #610	@ 0x262
 8006c88:	f240 2062 	movw	r0, #610	@ 0x262
 8006c8c:	f001 fc12 	bl	80084b4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d006      	beq.n	8006ca4 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4811      	ldr	r0, [pc, #68]	@ (8006ce0 <RadioRx+0x78>)
 8006c9a:	f002 fd87 	bl	80097ac <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8006c9e:	4810      	ldr	r0, [pc, #64]	@ (8006ce0 <RadioRx+0x78>)
 8006ca0:	f002 fca6 	bl	80095f0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8006ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce4 <RadioRx+0x7c>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8006caa:	4b0e      	ldr	r3, [pc, #56]	@ (8006ce4 <RadioRx+0x7c>)
 8006cac:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f002 f8a2 	bl	8008dfc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8006cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce4 <RadioRx+0x7c>)
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d004      	beq.n	8006cca <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006cc0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8006cc4:	f001 fa5e 	bl	8008184 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8006cc8:	e005      	b.n	8006cd6 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8006cca:	4b06      	ldr	r3, [pc, #24]	@ (8006ce4 <RadioRx+0x7c>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	019b      	lsls	r3, r3, #6
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f001 fa57 	bl	8008184 <SUBGRF_SetRx>
}
 8006cd6:	bf00      	nop
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	200002ec 	.word	0x200002ec
 8006ce4:	20000278 	.word	0x20000278

08006ce8 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8006cf0:	f002 fa7d 	bl	80091ee <RFW_Is_Init>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d102      	bne.n	8006d00 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8006cfa:	f002 faa0 	bl	800923e <RFW_ReceiveInit>
 8006cfe:	e007      	b.n	8006d10 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006d00:	2300      	movs	r3, #0
 8006d02:	2200      	movs	r2, #0
 8006d04:	f240 2162 	movw	r1, #610	@ 0x262
 8006d08:	f240 2062 	movw	r0, #610	@ 0x262
 8006d0c:	f001 fbd2 	bl	80084b4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d006      	beq.n	8006d24 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006d16:	6879      	ldr	r1, [r7, #4]
 8006d18:	4811      	ldr	r0, [pc, #68]	@ (8006d60 <RadioRxBoosted+0x78>)
 8006d1a:	f002 fd47 	bl	80097ac <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8006d1e:	4810      	ldr	r0, [pc, #64]	@ (8006d60 <RadioRxBoosted+0x78>)
 8006d20:	f002 fc66 	bl	80095f0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8006d24:	4b0f      	ldr	r3, [pc, #60]	@ (8006d64 <RadioRxBoosted+0x7c>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8006d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006d64 <RadioRxBoosted+0x7c>)
 8006d2c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f002 f862 	bl	8008dfc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8006d38:	4b0a      	ldr	r3, [pc, #40]	@ (8006d64 <RadioRxBoosted+0x7c>)
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d004      	beq.n	8006d4a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8006d40:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8006d44:	f001 fa3e 	bl	80081c4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8006d48:	e005      	b.n	8006d56 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8006d4a:	4b06      	ldr	r3, [pc, #24]	@ (8006d64 <RadioRxBoosted+0x7c>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	019b      	lsls	r3, r3, #6
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 fa37 	bl	80081c4 <SUBGRF_SetRxBoosted>
}
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	200002ec 	.word	0x200002ec
 8006d64:	20000278 	.word	0x20000278

08006d68 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	005a      	lsls	r2, r3, #1
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	4413      	add	r3, r2
 8006d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8006dac <RadioSetRxDutyCycle+0x44>)
 8006d7c:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006d7e:	2300      	movs	r3, #0
 8006d80:	2200      	movs	r2, #0
 8006d82:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006d86:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006d8a:	f001 fb93 	bl	80084b4 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8006d8e:	4b07      	ldr	r3, [pc, #28]	@ (8006dac <RadioSetRxDutyCycle+0x44>)
 8006d90:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8006d94:	2100      	movs	r1, #0
 8006d96:	4618      	mov	r0, r3
 8006d98:	f002 f830 	bl	8008dfc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 fa34 	bl	800820c <SUBGRF_SetRxDutyCycle>
}
 8006da4:	bf00      	nop
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20000278 	.word	0x20000278

08006db0 <RadioStartCad>:

static void RadioStartCad( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8006db4:	4b09      	ldr	r3, [pc, #36]	@ (8006ddc <RadioStartCad+0x2c>)
 8006db6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8006dba:	2100      	movs	r1, #0
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f002 f81d 	bl	8008dfc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8006dca:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8006dce:	f001 fb71 	bl	80084b4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8006dd2:	f001 fa47 	bl	8008264 <SUBGRF_SetCad>
}
 8006dd6:	bf00      	nop
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000278 	.word	0x20000278

08006de0 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	70fb      	strb	r3, [r7, #3]
 8006dec:	4613      	mov	r3, r2
 8006dee:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8006df0:	883b      	ldrh	r3, [r7, #0]
 8006df2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006df6:	fb02 f303 	mul.w	r3, r2, r3
 8006dfa:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 fbb5 	bl	800856c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8006e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f002 f820 	bl	8008e4c <SUBGRF_SetRfTxPower>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8006e10:	210e      	movs	r1, #14
 8006e12:	f640 101f 	movw	r0, #2335	@ 0x91f
 8006e16:	f001 fefd 	bl	8008c14 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f001 ffec 	bl	8008dfc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8006e24:	f001 fa2c 	bl	8008280 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8006e28:	68f9      	ldr	r1, [r7, #12]
 8006e2a:	4805      	ldr	r0, [pc, #20]	@ (8006e40 <RadioSetTxContinuousWave+0x60>)
 8006e2c:	f002 fcbe 	bl	80097ac <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8006e30:	4803      	ldr	r0, [pc, #12]	@ (8006e40 <RadioSetTxContinuousWave+0x60>)
 8006e32:	f002 fbdd 	bl	80095f0 <UTIL_TIMER_Start>
}
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	200002d4 	.word	0x200002d4

08006e44 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8006e4e:	f001 fe4e 	bl	8008aee <SUBGRF_GetRssiInst>
 8006e52:	4603      	mov	r3, r0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	460a      	mov	r2, r1
 8006e66:	80fb      	strh	r3, [r7, #6]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8006e6c:	797a      	ldrb	r2, [r7, #5]
 8006e6e:	88fb      	ldrh	r3, [r7, #6]
 8006e70:	4611      	mov	r1, r2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 fece 	bl	8008c14 <SUBGRF_WriteRegister>
}
 8006e78:	bf00      	nop
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8006e8a:	88fb      	ldrh	r3, [r7, #6]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f001 fed5 	bl	8008c3c <SUBGRF_ReadRegister>
 8006e92:	4603      	mov	r3, r0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	6039      	str	r1, [r7, #0]
 8006ea6:	80fb      	strh	r3, [r7, #6]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8006eac:	797b      	ldrb	r3, [r7, #5]
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	88fb      	ldrh	r3, [r7, #6]
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f001 fed5 	bl	8008c64 <SUBGRF_WriteRegisters>
}
 8006eba:	bf00      	nop
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	4603      	mov	r3, r0
 8006eca:	6039      	str	r1, [r7, #0]
 8006ecc:	80fb      	strh	r3, [r7, #6]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8006ed2:	797b      	ldrb	r3, [r7, #5]
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	88fb      	ldrh	r3, [r7, #6]
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 fee4 	bl	8008ca8 <SUBGRF_ReadRegisters>
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	460a      	mov	r2, r1
 8006ef2:	71fb      	strb	r3, [r7, #7]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d10a      	bne.n	8006f14 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8006efe:	4a0e      	ldr	r2, [pc, #56]	@ (8006f38 <RadioSetMaxPayloadLength+0x50>)
 8006f00:	79bb      	ldrb	r3, [r7, #6]
 8006f02:	7013      	strb	r3, [r2, #0]
 8006f04:	4b0c      	ldr	r3, [pc, #48]	@ (8006f38 <RadioSetMaxPayloadLength+0x50>)
 8006f06:	781a      	ldrb	r2, [r3, #0]
 8006f08:	4b0c      	ldr	r3, [pc, #48]	@ (8006f3c <RadioSetMaxPayloadLength+0x54>)
 8006f0a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006f0c:	480c      	ldr	r0, [pc, #48]	@ (8006f40 <RadioSetMaxPayloadLength+0x58>)
 8006f0e:	f001 fd39 	bl	8008984 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8006f12:	e00d      	b.n	8006f30 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8006f14:	4b09      	ldr	r3, [pc, #36]	@ (8006f3c <RadioSetMaxPayloadLength+0x54>)
 8006f16:	7d5b      	ldrb	r3, [r3, #21]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d109      	bne.n	8006f30 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8006f1c:	4a06      	ldr	r2, [pc, #24]	@ (8006f38 <RadioSetMaxPayloadLength+0x50>)
 8006f1e:	79bb      	ldrb	r3, [r7, #6]
 8006f20:	7013      	strb	r3, [r2, #0]
 8006f22:	4b05      	ldr	r3, [pc, #20]	@ (8006f38 <RadioSetMaxPayloadLength+0x50>)
 8006f24:	781a      	ldrb	r2, [r3, #0]
 8006f26:	4b05      	ldr	r3, [pc, #20]	@ (8006f3c <RadioSetMaxPayloadLength+0x54>)
 8006f28:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006f2a:	4805      	ldr	r0, [pc, #20]	@ (8006f40 <RadioSetMaxPayloadLength+0x58>)
 8006f2c:	f001 fd2a 	bl	8008984 <SUBGRF_SetPacketParams>
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	2000000d 	.word	0x2000000d
 8006f3c:	20000278 	.word	0x20000278
 8006f40:	20000286 	.word	0x20000286

08006f44 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8006f4e:	4a13      	ldr	r2, [pc, #76]	@ (8006f9c <RadioSetPublicNetwork+0x58>)
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	7313      	strb	r3, [r2, #12]
 8006f54:	4b11      	ldr	r3, [pc, #68]	@ (8006f9c <RadioSetPublicNetwork+0x58>)
 8006f56:	7b1a      	ldrb	r2, [r3, #12]
 8006f58:	4b10      	ldr	r3, [pc, #64]	@ (8006f9c <RadioSetPublicNetwork+0x58>)
 8006f5a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8006f5c:	2001      	movs	r0, #1
 8006f5e:	f7ff f81b 	bl	8005f98 <RadioSetModem>
    if( enable == true )
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00a      	beq.n	8006f7e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8006f68:	2134      	movs	r1, #52	@ 0x34
 8006f6a:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8006f6e:	f001 fe51 	bl	8008c14 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8006f72:	2144      	movs	r1, #68	@ 0x44
 8006f74:	f240 7041 	movw	r0, #1857	@ 0x741
 8006f78:	f001 fe4c 	bl	8008c14 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8006f7c:	e009      	b.n	8006f92 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8006f7e:	2114      	movs	r1, #20
 8006f80:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8006f84:	f001 fe46 	bl	8008c14 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8006f88:	2124      	movs	r1, #36	@ 0x24
 8006f8a:	f240 7041 	movw	r0, #1857	@ 0x741
 8006f8e:	f001 fe41 	bl	8008c14 <SUBGRF_WriteRegister>
}
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000278 	.word	0x20000278

08006fa0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8006fa4:	f001 ff86 	bl	8008eb4 <SUBGRF_GetRadioWakeUpTime>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	3303      	adds	r3, #3
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8006fb8:	f000 f80e 	bl	8006fd8 <RadioOnTxTimeoutProcess>
}
 8006fbc:	bf00      	nop
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8006fcc:	f000 f818 	bl	8007000 <RadioOnRxTimeoutProcess>
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006fdc:	4b07      	ldr	r3, [pc, #28]	@ (8006ffc <RadioOnTxTimeoutProcess+0x24>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d008      	beq.n	8006ff6 <RadioOnTxTimeoutProcess+0x1e>
 8006fe4:	4b05      	ldr	r3, [pc, #20]	@ (8006ffc <RadioOnTxTimeoutProcess+0x24>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8006fee:	4b03      	ldr	r3, [pc, #12]	@ (8006ffc <RadioOnTxTimeoutProcess+0x24>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	4798      	blx	r3
    }
}
 8006ff6:	bf00      	nop
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000274 	.word	0x20000274

08007000 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007004:	4b07      	ldr	r3, [pc, #28]	@ (8007024 <RadioOnRxTimeoutProcess+0x24>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d008      	beq.n	800701e <RadioOnRxTimeoutProcess+0x1e>
 800700c:	4b05      	ldr	r3, [pc, #20]	@ (8007024 <RadioOnRxTimeoutProcess+0x24>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8007016:	4b03      	ldr	r3, [pc, #12]	@ (8007024 <RadioOnRxTimeoutProcess+0x24>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	4798      	blx	r3
    }
}
 800701e:	bf00      	nop
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000274 	.word	0x20000274

08007028 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8007032:	4a05      	ldr	r2, [pc, #20]	@ (8007048 <RadioOnDioIrq+0x20>)
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 800703a:	f000 f807 	bl	800704c <RadioIrqProcess>
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000278 	.word	0x20000278

0800704c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800704c:	b5b0      	push	{r4, r5, r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8007056:	2300      	movs	r3, #0
 8007058:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800705a:	4ba5      	ldr	r3, [pc, #660]	@ (80072f0 <RadioIrqProcess+0x2a4>)
 800705c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007064:	f000 810d 	beq.w	8007282 <RadioIrqProcess+0x236>
 8007068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800706c:	f300 81c0 	bgt.w	80073f0 <RadioIrqProcess+0x3a4>
 8007070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007074:	f000 80f1 	beq.w	800725a <RadioIrqProcess+0x20e>
 8007078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800707c:	f300 81b8 	bgt.w	80073f0 <RadioIrqProcess+0x3a4>
 8007080:	2b80      	cmp	r3, #128	@ 0x80
 8007082:	f000 80d6 	beq.w	8007232 <RadioIrqProcess+0x1e6>
 8007086:	2b80      	cmp	r3, #128	@ 0x80
 8007088:	f300 81b2 	bgt.w	80073f0 <RadioIrqProcess+0x3a4>
 800708c:	2b20      	cmp	r3, #32
 800708e:	dc49      	bgt.n	8007124 <RadioIrqProcess+0xd8>
 8007090:	2b00      	cmp	r3, #0
 8007092:	f340 81ad 	ble.w	80073f0 <RadioIrqProcess+0x3a4>
 8007096:	3b01      	subs	r3, #1
 8007098:	2b1f      	cmp	r3, #31
 800709a:	f200 81a9 	bhi.w	80073f0 <RadioIrqProcess+0x3a4>
 800709e:	a201      	add	r2, pc, #4	@ (adr r2, 80070a4 <RadioIrqProcess+0x58>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	0800712d 	.word	0x0800712d
 80070a8:	08007167 	.word	0x08007167
 80070ac:	080073f1 	.word	0x080073f1
 80070b0:	0800730d 	.word	0x0800730d
 80070b4:	080073f1 	.word	0x080073f1
 80070b8:	080073f1 	.word	0x080073f1
 80070bc:	080073f1 	.word	0x080073f1
 80070c0:	0800737b 	.word	0x0800737b
 80070c4:	080073f1 	.word	0x080073f1
 80070c8:	080073f1 	.word	0x080073f1
 80070cc:	080073f1 	.word	0x080073f1
 80070d0:	080073f1 	.word	0x080073f1
 80070d4:	080073f1 	.word	0x080073f1
 80070d8:	080073f1 	.word	0x080073f1
 80070dc:	080073f1 	.word	0x080073f1
 80070e0:	080073f1 	.word	0x080073f1
 80070e4:	080073f1 	.word	0x080073f1
 80070e8:	080073f1 	.word	0x080073f1
 80070ec:	080073f1 	.word	0x080073f1
 80070f0:	080073f1 	.word	0x080073f1
 80070f4:	080073f1 	.word	0x080073f1
 80070f8:	080073f1 	.word	0x080073f1
 80070fc:	080073f1 	.word	0x080073f1
 8007100:	080073f1 	.word	0x080073f1
 8007104:	080073f1 	.word	0x080073f1
 8007108:	080073f1 	.word	0x080073f1
 800710c:	080073f1 	.word	0x080073f1
 8007110:	080073f1 	.word	0x080073f1
 8007114:	080073f1 	.word	0x080073f1
 8007118:	080073f1 	.word	0x080073f1
 800711c:	080073f1 	.word	0x080073f1
 8007120:	0800738b 	.word	0x0800738b
 8007124:	2b40      	cmp	r3, #64	@ 0x40
 8007126:	f000 814b 	beq.w	80073c0 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800712a:	e161      	b.n	80073f0 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 800712c:	4871      	ldr	r0, [pc, #452]	@ (80072f4 <RadioIrqProcess+0x2a8>)
 800712e:	f002 facd 	bl	80096cc <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8007132:	2000      	movs	r0, #0
 8007134:	f000 ffea 	bl	800810c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8007138:	f002 f860 	bl	80091fc <RFW_Is_LongPacketModeEnabled>
 800713c:	4603      	mov	r3, r0
 800713e:	2b01      	cmp	r3, #1
 8007140:	d101      	bne.n	8007146 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8007142:	f002 f884 	bl	800924e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8007146:	4b6c      	ldr	r3, [pc, #432]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 8152 	beq.w	80073f4 <RadioIrqProcess+0x3a8>
 8007150:	4b69      	ldr	r3, [pc, #420]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 814c 	beq.w	80073f4 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 800715c:	4b66      	ldr	r3, [pc, #408]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4798      	blx	r3
        break;
 8007164:	e146      	b.n	80073f4 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8007166:	4865      	ldr	r0, [pc, #404]	@ (80072fc <RadioIrqProcess+0x2b0>)
 8007168:	f002 fab0 	bl	80096cc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800716c:	4b60      	ldr	r3, [pc, #384]	@ (80072f0 <RadioIrqProcess+0x2a4>)
 800716e:	785b      	ldrb	r3, [r3, #1]
 8007170:	f083 0301 	eor.w	r3, r3, #1
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d014      	beq.n	80071a4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800717a:	2000      	movs	r0, #0
 800717c:	f000 ffc6 	bl	800810c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8007180:	2100      	movs	r1, #0
 8007182:	f640 1002 	movw	r0, #2306	@ 0x902
 8007186:	f001 fd45 	bl	8008c14 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800718a:	f640 1044 	movw	r0, #2372	@ 0x944
 800718e:	f001 fd55 	bl	8008c3c <SUBGRF_ReadRegister>
 8007192:	4603      	mov	r3, r0
 8007194:	f043 0302 	orr.w	r3, r3, #2
 8007198:	b2db      	uxtb	r3, r3
 800719a:	4619      	mov	r1, r3
 800719c:	f640 1044 	movw	r0, #2372	@ 0x944
 80071a0:	f001 fd38 	bl	8008c14 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80071a4:	1dfb      	adds	r3, r7, #7
 80071a6:	22ff      	movs	r2, #255	@ 0xff
 80071a8:	4619      	mov	r1, r3
 80071aa:	4855      	ldr	r0, [pc, #340]	@ (8007300 <RadioIrqProcess+0x2b4>)
 80071ac:	f000 fe7e 	bl	8007eac <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80071b0:	4854      	ldr	r0, [pc, #336]	@ (8007304 <RadioIrqProcess+0x2b8>)
 80071b2:	f001 fcdd 	bl	8008b70 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80071b6:	4b50      	ldr	r3, [pc, #320]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 811c 	beq.w	80073f8 <RadioIrqProcess+0x3ac>
 80071c0:	4b4d      	ldr	r3, [pc, #308]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 8116 	beq.w	80073f8 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 80071cc:	4b48      	ldr	r3, [pc, #288]	@ (80072f0 <RadioIrqProcess+0x2a4>)
 80071ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d10e      	bne.n	80071f4 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80071d6:	4b48      	ldr	r3, [pc, #288]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689c      	ldr	r4, [r3, #8]
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	4619      	mov	r1, r3
 80071e0:	4b43      	ldr	r3, [pc, #268]	@ (80072f0 <RadioIrqProcess+0x2a4>)
 80071e2:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80071e6:	461a      	mov	r2, r3
 80071e8:	4b41      	ldr	r3, [pc, #260]	@ (80072f0 <RadioIrqProcess+0x2a4>)
 80071ea:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 80071ee:	4844      	ldr	r0, [pc, #272]	@ (8007300 <RadioIrqProcess+0x2b4>)
 80071f0:	47a0      	blx	r4
                break;
 80071f2:	e01d      	b.n	8007230 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80071f4:	4b3e      	ldr	r3, [pc, #248]	@ (80072f0 <RadioIrqProcess+0x2a4>)
 80071f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f8:	463a      	mov	r2, r7
 80071fa:	4611      	mov	r1, r2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 ff4b 	bl	8009098 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8007202:	4b3d      	ldr	r3, [pc, #244]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689c      	ldr	r4, [r3, #8]
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	4619      	mov	r1, r3
 800720c:	4b38      	ldr	r3, [pc, #224]	@ (80072f0 <RadioIrqProcess+0x2a4>)
 800720e:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8007212:	4618      	mov	r0, r3
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800721a:	4a3b      	ldr	r2, [pc, #236]	@ (8007308 <RadioIrqProcess+0x2bc>)
 800721c:	fb82 5203 	smull	r5, r2, r2, r3
 8007220:	1192      	asrs	r2, r2, #6
 8007222:	17db      	asrs	r3, r3, #31
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	b25b      	sxtb	r3, r3
 8007228:	4602      	mov	r2, r0
 800722a:	4835      	ldr	r0, [pc, #212]	@ (8007300 <RadioIrqProcess+0x2b4>)
 800722c:	47a0      	blx	r4
                break;
 800722e:	bf00      	nop
        break;
 8007230:	e0e2      	b.n	80073f8 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8007232:	2000      	movs	r0, #0
 8007234:	f000 ff6a 	bl	800810c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007238:	4b2f      	ldr	r3, [pc, #188]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80dd 	beq.w	80073fc <RadioIrqProcess+0x3b0>
 8007242:	4b2d      	ldr	r3, [pc, #180]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 80d7 	beq.w	80073fc <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 800724e:	4b2a      	ldr	r3, [pc, #168]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	2000      	movs	r0, #0
 8007256:	4798      	blx	r3
        break;
 8007258:	e0d0      	b.n	80073fc <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 800725a:	2000      	movs	r0, #0
 800725c:	f000 ff56 	bl	800810c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007260:	4b25      	ldr	r3, [pc, #148]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 80cb 	beq.w	8007400 <RadioIrqProcess+0x3b4>
 800726a:	4b23      	ldr	r3, [pc, #140]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 80c5 	beq.w	8007400 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8007276:	4b20      	ldr	r3, [pc, #128]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	2001      	movs	r0, #1
 800727e:	4798      	blx	r3
        break;
 8007280:	e0be      	b.n	8007400 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8007282:	f000 fdf9 	bl	8007e78 <SUBGRF_GetOperatingMode>
 8007286:	4603      	mov	r3, r0
 8007288:	2b04      	cmp	r3, #4
 800728a:	d115      	bne.n	80072b8 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 800728c:	4819      	ldr	r0, [pc, #100]	@ (80072f4 <RadioIrqProcess+0x2a8>)
 800728e:	f002 fa1d 	bl	80096cc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8007292:	2000      	movs	r0, #0
 8007294:	f000 ff3a 	bl	800810c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007298:	4b17      	ldr	r3, [pc, #92]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 80b1 	beq.w	8007404 <RadioIrqProcess+0x3b8>
 80072a2:	4b15      	ldr	r3, [pc, #84]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 80ab 	beq.w	8007404 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 80072ae:	4b12      	ldr	r3, [pc, #72]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	4798      	blx	r3
        break;
 80072b6:	e0a5      	b.n	8007404 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80072b8:	f000 fdde 	bl	8007e78 <SUBGRF_GetOperatingMode>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b05      	cmp	r3, #5
 80072c0:	f040 80a0 	bne.w	8007404 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 80072c4:	480d      	ldr	r0, [pc, #52]	@ (80072fc <RadioIrqProcess+0x2b0>)
 80072c6:	f002 fa01 	bl	80096cc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80072ca:	2000      	movs	r0, #0
 80072cc:	f000 ff1e 	bl	800810c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80072d0:	4b09      	ldr	r3, [pc, #36]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 8095 	beq.w	8007404 <RadioIrqProcess+0x3b8>
 80072da:	4b07      	ldr	r3, [pc, #28]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 808f 	beq.w	8007404 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 80072e6:	4b04      	ldr	r3, [pc, #16]	@ (80072f8 <RadioIrqProcess+0x2ac>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	4798      	blx	r3
        break;
 80072ee:	e089      	b.n	8007404 <RadioIrqProcess+0x3b8>
 80072f0:	20000278 	.word	0x20000278
 80072f4:	200002d4 	.word	0x200002d4
 80072f8:	20000274 	.word	0x20000274
 80072fc:	200002ec 	.word	0x200002ec
 8007300:	20000174 	.word	0x20000174
 8007304:	2000029c 	.word	0x2000029c
 8007308:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800730c:	4b44      	ldr	r3, [pc, #272]	@ (8007420 <RadioIrqProcess+0x3d4>)
 800730e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007310:	2b00      	cmp	r3, #0
 8007312:	d079      	beq.n	8007408 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8007314:	4a43      	ldr	r2, [pc, #268]	@ (8007424 <RadioIrqProcess+0x3d8>)
 8007316:	4b42      	ldr	r3, [pc, #264]	@ (8007420 <RadioIrqProcess+0x3d4>)
 8007318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800731a:	0c1b      	lsrs	r3, r3, #16
 800731c:	b2db      	uxtb	r3, r3
 800731e:	4619      	mov	r1, r3
 8007320:	f640 1003 	movw	r0, #2307	@ 0x903
 8007324:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8007326:	4a3f      	ldr	r2, [pc, #252]	@ (8007424 <RadioIrqProcess+0x3d8>)
 8007328:	4b3d      	ldr	r3, [pc, #244]	@ (8007420 <RadioIrqProcess+0x3d4>)
 800732a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800732c:	0a1b      	lsrs	r3, r3, #8
 800732e:	b2db      	uxtb	r3, r3
 8007330:	4619      	mov	r1, r3
 8007332:	f640 1004 	movw	r0, #2308	@ 0x904
 8007336:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8007338:	4a3a      	ldr	r2, [pc, #232]	@ (8007424 <RadioIrqProcess+0x3d8>)
 800733a:	4b39      	ldr	r3, [pc, #228]	@ (8007420 <RadioIrqProcess+0x3d4>)
 800733c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800733e:	b2db      	uxtb	r3, r3
 8007340:	4619      	mov	r1, r3
 8007342:	f640 1005 	movw	r0, #2309	@ 0x905
 8007346:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8007348:	4c36      	ldr	r4, [pc, #216]	@ (8007424 <RadioIrqProcess+0x3d8>)
 800734a:	4b37      	ldr	r3, [pc, #220]	@ (8007428 <RadioIrqProcess+0x3dc>)
 800734c:	f640 1002 	movw	r0, #2306	@ 0x902
 8007350:	4798      	blx	r3
 8007352:	4603      	mov	r3, r0
 8007354:	f043 0301 	orr.w	r3, r3, #1
 8007358:	b2db      	uxtb	r3, r3
 800735a:	4619      	mov	r1, r3
 800735c:	f640 1002 	movw	r0, #2306	@ 0x902
 8007360:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8007362:	4b2f      	ldr	r3, [pc, #188]	@ (8007420 <RadioIrqProcess+0x3d4>)
 8007364:	2200      	movs	r2, #0
 8007366:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007368:	2300      	movs	r3, #0
 800736a:	2200      	movs	r2, #0
 800736c:	f240 2162 	movw	r1, #610	@ 0x262
 8007370:	f240 2062 	movw	r0, #610	@ 0x262
 8007374:	f001 f89e 	bl	80084b4 <SUBGRF_SetDioIrqParams>
        break;
 8007378:	e046      	b.n	8007408 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 800737a:	f001 ff38 	bl	80091ee <RFW_Is_Init>
 800737e:	4603      	mov	r3, r0
 8007380:	2b01      	cmp	r3, #1
 8007382:	d143      	bne.n	800740c <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8007384:	f001 ff69 	bl	800925a <RFW_ReceivePayload>
        break;
 8007388:	e040      	b.n	800740c <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 800738a:	4828      	ldr	r0, [pc, #160]	@ (800742c <RadioIrqProcess+0x3e0>)
 800738c:	f002 f99e 	bl	80096cc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007390:	4b23      	ldr	r3, [pc, #140]	@ (8007420 <RadioIrqProcess+0x3d4>)
 8007392:	785b      	ldrb	r3, [r3, #1]
 8007394:	f083 0301 	eor.w	r3, r3, #1
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800739e:	2000      	movs	r0, #0
 80073a0:	f000 feb4 	bl	800810c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80073a4:	4b22      	ldr	r3, [pc, #136]	@ (8007430 <RadioIrqProcess+0x3e4>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d031      	beq.n	8007410 <RadioIrqProcess+0x3c4>
 80073ac:	4b20      	ldr	r3, [pc, #128]	@ (8007430 <RadioIrqProcess+0x3e4>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d02c      	beq.n	8007410 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 80073b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007430 <RadioIrqProcess+0x3e4>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	4798      	blx	r3
        break;
 80073be:	e027      	b.n	8007410 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 80073c0:	4b17      	ldr	r3, [pc, #92]	@ (8007420 <RadioIrqProcess+0x3d4>)
 80073c2:	785b      	ldrb	r3, [r3, #1]
 80073c4:	f083 0301 	eor.w	r3, r3, #1
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 80073ce:	2000      	movs	r0, #0
 80073d0:	f000 fe9c 	bl	800810c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80073d4:	4b16      	ldr	r3, [pc, #88]	@ (8007430 <RadioIrqProcess+0x3e4>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01b      	beq.n	8007414 <RadioIrqProcess+0x3c8>
 80073dc:	4b14      	ldr	r3, [pc, #80]	@ (8007430 <RadioIrqProcess+0x3e4>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d016      	beq.n	8007414 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 80073e6:	4b12      	ldr	r3, [pc, #72]	@ (8007430 <RadioIrqProcess+0x3e4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	4798      	blx	r3
        break;
 80073ee:	e011      	b.n	8007414 <RadioIrqProcess+0x3c8>
        break;
 80073f0:	bf00      	nop
 80073f2:	e010      	b.n	8007416 <RadioIrqProcess+0x3ca>
        break;
 80073f4:	bf00      	nop
 80073f6:	e00e      	b.n	8007416 <RadioIrqProcess+0x3ca>
        break;
 80073f8:	bf00      	nop
 80073fa:	e00c      	b.n	8007416 <RadioIrqProcess+0x3ca>
        break;
 80073fc:	bf00      	nop
 80073fe:	e00a      	b.n	8007416 <RadioIrqProcess+0x3ca>
        break;
 8007400:	bf00      	nop
 8007402:	e008      	b.n	8007416 <RadioIrqProcess+0x3ca>
        break;
 8007404:	bf00      	nop
 8007406:	e006      	b.n	8007416 <RadioIrqProcess+0x3ca>
        break;
 8007408:	bf00      	nop
 800740a:	e004      	b.n	8007416 <RadioIrqProcess+0x3ca>
        break;
 800740c:	bf00      	nop
 800740e:	e002      	b.n	8007416 <RadioIrqProcess+0x3ca>
        break;
 8007410:	bf00      	nop
 8007412:	e000      	b.n	8007416 <RadioIrqProcess+0x3ca>
        break;
 8007414:	bf00      	nop
    }
}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bdb0      	pop	{r4, r5, r7, pc}
 800741e:	bf00      	nop
 8007420:	20000278 	.word	0x20000278
 8007424:	08006e5d 	.word	0x08006e5d
 8007428:	08006e81 	.word	0x08006e81
 800742c:	200002ec 	.word	0x200002ec
 8007430:	20000274 	.word	0x20000274

08007434 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007438:	4b09      	ldr	r3, [pc, #36]	@ (8007460 <RadioTxPrbs+0x2c>)
 800743a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800743e:	2101      	movs	r1, #1
 8007440:	4618      	mov	r0, r3
 8007442:	f001 fcdb 	bl	8008dfc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8007446:	4b07      	ldr	r3, [pc, #28]	@ (8007464 <RadioTxPrbs+0x30>)
 8007448:	212d      	movs	r1, #45	@ 0x2d
 800744a:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800744e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8007450:	f000 ff1f 	bl	8008292 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8007454:	4804      	ldr	r0, [pc, #16]	@ (8007468 <RadioTxPrbs+0x34>)
 8007456:	f000 fe75 	bl	8008144 <SUBGRF_SetTx>
}
 800745a:	bf00      	nop
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20000278 	.word	0x20000278
 8007464:	08006e5d 	.word	0x08006e5d
 8007468:	000fffff 	.word	0x000fffff

0800746c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	4603      	mov	r3, r0
 8007474:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8007476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800747a:	4618      	mov	r0, r3
 800747c:	f001 fce6 	bl	8008e4c <SUBGRF_SetRfTxPower>
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007484:	210e      	movs	r1, #14
 8007486:	f640 101f 	movw	r0, #2335	@ 0x91f
 800748a:	f001 fbc3 	bl	8008c14 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800748e:	7bfb      	ldrb	r3, [r7, #15]
 8007490:	2101      	movs	r1, #1
 8007492:	4618      	mov	r0, r3
 8007494:	f001 fcb2 	bl	8008dfc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8007498:	f000 fef2 	bl	8008280 <SUBGRF_SetTxContinuousWave>
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b089      	sub	sp, #36	@ 0x24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	4613      	mov	r3, r2
 80074b0:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80074ba:	2300      	movs	r3, #0
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	e011      	b.n	80074e4 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	4413      	add	r3, r2
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	68b9      	ldr	r1, [r7, #8]
 80074cc:	440b      	add	r3, r1
 80074ce:	43d2      	mvns	r2, r2
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	4413      	add	r3, r2
 80074da:	2200      	movs	r2, #0
 80074dc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	3301      	adds	r3, #1
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	79fb      	ldrb	r3, [r7, #7]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	dbe9      	blt.n	80074c0 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80074ec:	2300      	movs	r3, #0
 80074ee:	61bb      	str	r3, [r7, #24]
 80074f0:	e049      	b.n	8007586 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	425a      	negs	r2, r3
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	f002 0207 	and.w	r2, r2, #7
 80074fe:	bf58      	it	pl
 8007500:	4253      	negpl	r3, r2
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f1c3 0307 	rsb	r3, r3, #7
 8007508:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	da00      	bge.n	8007512 <payload_integration+0x6e>
 8007510:	3307      	adds	r3, #7
 8007512:	10db      	asrs	r3, r3, #3
 8007514:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	3301      	adds	r3, #1
 800751a:	425a      	negs	r2, r3
 800751c:	f003 0307 	and.w	r3, r3, #7
 8007520:	f002 0207 	and.w	r2, r2, #7
 8007524:	bf58      	it	pl
 8007526:	4253      	negpl	r3, r2
 8007528:	b2db      	uxtb	r3, r3
 800752a:	f1c3 0307 	rsb	r3, r3, #7
 800752e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	3301      	adds	r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	da00      	bge.n	800753a <payload_integration+0x96>
 8007538:	3307      	adds	r3, #7
 800753a:	10db      	asrs	r3, r3, #3
 800753c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800753e:	7dbb      	ldrb	r3, [r7, #22]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	4413      	add	r3, r2
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	7dfb      	ldrb	r3, [r7, #23]
 800754a:	fa42 f303 	asr.w	r3, r2, r3
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8007556:	7ffa      	ldrb	r2, [r7, #31]
 8007558:	7cfb      	ldrb	r3, [r7, #19]
 800755a:	4053      	eors	r3, r2
 800755c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800755e:	7d3b      	ldrb	r3, [r7, #20]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	4413      	add	r3, r2
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	b25a      	sxtb	r2, r3
 8007568:	7ff9      	ldrb	r1, [r7, #31]
 800756a:	7d7b      	ldrb	r3, [r7, #21]
 800756c:	fa01 f303 	lsl.w	r3, r1, r3
 8007570:	b25b      	sxtb	r3, r3
 8007572:	4313      	orrs	r3, r2
 8007574:	b259      	sxtb	r1, r3
 8007576:	7d3b      	ldrb	r3, [r7, #20]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4413      	add	r3, r2
 800757c:	b2ca      	uxtb	r2, r1
 800757e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	3301      	adds	r3, #1
 8007584:	61bb      	str	r3, [r7, #24]
 8007586:	79fb      	ldrb	r3, [r7, #7]
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	429a      	cmp	r2, r3
 800758e:	dbb0      	blt.n	80074f2 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8007590:	7ffb      	ldrb	r3, [r7, #31]
 8007592:	01db      	lsls	r3, r3, #7
 8007594:	b25a      	sxtb	r2, r3
 8007596:	7ffb      	ldrb	r3, [r7, #31]
 8007598:	019b      	lsls	r3, r3, #6
 800759a:	b25b      	sxtb	r3, r3
 800759c:	4313      	orrs	r3, r2
 800759e:	b25b      	sxtb	r3, r3
 80075a0:	7ffa      	ldrb	r2, [r7, #31]
 80075a2:	2a00      	cmp	r2, #0
 80075a4:	d101      	bne.n	80075aa <payload_integration+0x106>
 80075a6:	2220      	movs	r2, #32
 80075a8:	e000      	b.n	80075ac <payload_integration+0x108>
 80075aa:	2200      	movs	r2, #0
 80075ac:	4313      	orrs	r3, r2
 80075ae:	b259      	sxtb	r1, r3
 80075b0:	79fb      	ldrb	r3, [r7, #7]
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	4413      	add	r3, r2
 80075b6:	b2ca      	uxtb	r2, r1
 80075b8:	701a      	strb	r2, [r3, #0]
}
 80075ba:	bf00      	nop
 80075bc:	3724      	adds	r7, #36	@ 0x24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08c      	sub	sp, #48	@ 0x30
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	4603      	mov	r3, r0
 80075d2:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 80075d8:	2300      	movs	r3, #0
 80075da:	623b      	str	r3, [r7, #32]
 80075dc:	2300      	movs	r3, #0
 80075de:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80075e0:	f001 fdff 	bl	80091e2 <RFW_DeInit>

    if( rxContinuous != 0 )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bf14      	ite	ne
 80075f4:	2301      	movne	r3, #1
 80075f6:	2300      	moveq	r3, #0
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	4ba3      	ldr	r3, [pc, #652]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 80075fc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <RadioSetRxGenericConfig+0x48>
 8007604:	2b01      	cmp	r3, #1
 8007606:	f000 80dc 	beq.w	80077c2 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800760a:	e194      	b.n	8007936 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <RadioSetRxGenericConfig+0x58>
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d102      	bne.n	8007622 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800761c:	f04f 33ff 	mov.w	r3, #4294967295
 8007620:	e18a      	b.n	8007938 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	7f9b      	ldrb	r3, [r3, #30]
 8007626:	2b08      	cmp	r3, #8
 8007628:	d902      	bls.n	8007630 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800762a:	f04f 33ff 	mov.w	r3, #4294967295
 800762e:	e183      	b.n	8007938 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6919      	ldr	r1, [r3, #16]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	7f9b      	ldrb	r3, [r3, #30]
 8007638:	461a      	mov	r2, r3
 800763a:	f107 0320 	add.w	r3, r7, #32
 800763e:	4618      	mov	r0, r3
 8007640:	f001 ff66 	bl	8009510 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	bf14      	ite	ne
 800764c:	2301      	movne	r3, #1
 800764e:	2300      	moveq	r3, #0
 8007650:	b2db      	uxtb	r3, r3
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fe26 	bl	80082a4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007658:	4b8b      	ldr	r3, [pc, #556]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	4a88      	ldr	r2, [pc, #544]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 8007666:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800766e:	4b86      	ldr	r3, [pc, #536]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 8007670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	4618      	mov	r0, r3
 800767a:	f001 fce5 	bl	8009048 <SUBGRF_GetFskBandwidthRegValue>
 800767e:	4603      	mov	r3, r0
 8007680:	461a      	mov	r2, r3
 8007682:	4b81      	ldr	r3, [pc, #516]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 8007684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007688:	4b7f      	ldr	r3, [pc, #508]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 800768a:	2200      	movs	r2, #0
 800768c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	b29b      	uxth	r3, r3
 8007694:	00db      	lsls	r3, r3, #3
 8007696:	b29a      	uxth	r2, r3
 8007698:	4b7b      	ldr	r3, [pc, #492]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 800769a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	7fda      	ldrb	r2, [r3, #31]
 80076a0:	4b79      	ldr	r3, [pc, #484]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 80076a2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	7f9b      	ldrb	r3, [r3, #30]
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	4b76      	ldr	r3, [pc, #472]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 80076ae:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80076b6:	4b74      	ldr	r3, [pc, #464]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 80076b8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d105      	bne.n	80076d0 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	4b6f      	ldr	r3, [pc, #444]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 80076cc:	759a      	strb	r2, [r3, #22]
 80076ce:	e00b      	b.n	80076e8 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d103      	bne.n	80076e2 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80076da:	4b6b      	ldr	r3, [pc, #428]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 80076dc:	22ff      	movs	r2, #255	@ 0xff
 80076de:	759a      	strb	r2, [r3, #22]
 80076e0:	e002      	b.n	80076e8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80076e2:	4b69      	ldr	r3, [pc, #420]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 80076e4:	22ff      	movs	r2, #255	@ 0xff
 80076e6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d004      	beq.n	80076fc <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d12d      	bne.n	8007758 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007702:	2bf1      	cmp	r3, #241	@ 0xf1
 8007704:	d00c      	beq.n	8007720 <RadioSetRxGenericConfig+0x15c>
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800770c:	2bf2      	cmp	r3, #242	@ 0xf2
 800770e:	d007      	beq.n	8007720 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007716:	2b01      	cmp	r3, #1
 8007718:	d002      	beq.n	8007720 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800771a:	f04f 33ff 	mov.w	r3, #4294967295
 800771e:	e10b      	b.n	8007938 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8007720:	2300      	movs	r3, #0
 8007722:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8007728:	4b58      	ldr	r3, [pc, #352]	@ (800788c <RadioSetRxGenericConfig+0x2c8>)
 800772a:	6819      	ldr	r1, [r3, #0]
 800772c:	f107 0314 	add.w	r3, r7, #20
 8007730:	4a57      	ldr	r2, [pc, #348]	@ (8007890 <RadioSetRxGenericConfig+0x2cc>)
 8007732:	4618      	mov	r0, r3
 8007734:	f001 fd48 	bl	80091c8 <RFW_Init>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <RadioSetRxGenericConfig+0x180>
                return -1;
 800773e:	f04f 33ff 	mov.w	r3, #4294967295
 8007742:	e0f9      	b.n	8007938 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007744:	4b50      	ldr	r3, [pc, #320]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 8007746:	2200      	movs	r2, #0
 8007748:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800774a:	4b4f      	ldr	r3, [pc, #316]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 800774c:	2201      	movs	r2, #1
 800774e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007750:	4b4d      	ldr	r3, [pc, #308]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 8007752:	2200      	movs	r2, #0
 8007754:	755a      	strb	r2, [r3, #21]
        {
 8007756:	e00e      	b.n	8007776 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800775e:	4b4a      	ldr	r3, [pc, #296]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 8007760:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8007768:	4b47      	ldr	r3, [pc, #284]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 800776a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8007772:	4b45      	ldr	r3, [pc, #276]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 8007774:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8007776:	f7ff fa70 	bl	8006c5a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800777a:	2000      	movs	r0, #0
 800777c:	f7fe fc0c 	bl	8005f98 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007780:	4844      	ldr	r0, [pc, #272]	@ (8007894 <RadioSetRxGenericConfig+0x2d0>)
 8007782:	f001 f82d 	bl	80087e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007786:	4844      	ldr	r0, [pc, #272]	@ (8007898 <RadioSetRxGenericConfig+0x2d4>)
 8007788:	f001 f8fc 	bl	8008984 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800778c:	f107 0320 	add.w	r3, r7, #32
 8007790:	4618      	mov	r0, r3
 8007792:	f000 fbc0 	bl	8007f16 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	8b9b      	ldrh	r3, [r3, #28]
 800779a:	4618      	mov	r0, r3
 800779c:	f000 fc0a 	bl	8007fb4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	8b1b      	ldrh	r3, [r3, #24]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fbe5 	bl	8007f74 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80077b0:	fb03 f202 	mul.w	r2, r3, r2
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077bc:	4a32      	ldr	r2, [pc, #200]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 80077be:	6093      	str	r3, [r2, #8]
        break;
 80077c0:	e0b9      	b.n	8007936 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d102      	bne.n	80077d0 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80077ca:	f04f 33ff 	mov.w	r3, #4294967295
 80077ce:	e0b3      	b.n	8007938 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d104      	bne.n	80077e4 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80077e2:	e002      	b.n	80077ea <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80077e4:	23ff      	movs	r3, #255	@ 0xff
 80077e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bf14      	ite	ne
 80077f2:	2301      	movne	r3, #1
 80077f4:	2300      	moveq	r3, #0
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fd53 	bl	80082a4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fd5d 	bl	80082c2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007808:	4b1f      	ldr	r3, [pc, #124]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8007816:	4b1c      	ldr	r3, [pc, #112]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 8007818:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8007822:	4b19      	ldr	r3, [pc, #100]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 8007824:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800782e:	4b16      	ldr	r3, [pc, #88]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 8007830:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800783a:	2b02      	cmp	r3, #2
 800783c:	d010      	beq.n	8007860 <RadioSetRxGenericConfig+0x29c>
 800783e:	2b02      	cmp	r3, #2
 8007840:	dc2c      	bgt.n	800789c <RadioSetRxGenericConfig+0x2d8>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <RadioSetRxGenericConfig+0x288>
 8007846:	2b01      	cmp	r3, #1
 8007848:	d005      	beq.n	8007856 <RadioSetRxGenericConfig+0x292>
            break;
 800784a:	e027      	b.n	800789c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800784c:	4b0e      	ldr	r3, [pc, #56]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007854:	e023      	b.n	800789e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007856:	4b0c      	ldr	r3, [pc, #48]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800785e:	e01e      	b.n	800789e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007866:	2b0b      	cmp	r3, #11
 8007868:	d004      	beq.n	8007874 <RadioSetRxGenericConfig+0x2b0>
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007870:	2b0c      	cmp	r3, #12
 8007872:	d104      	bne.n	800787e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007874:	4b04      	ldr	r3, [pc, #16]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800787c:	e00f      	b.n	800789e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800787e:	4b02      	ldr	r3, [pc, #8]	@ (8007888 <RadioSetRxGenericConfig+0x2c4>)
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007886:	e00a      	b.n	800789e <RadioSetRxGenericConfig+0x2da>
 8007888:	20000278 	.word	0x20000278
 800788c:	20000274 	.word	0x20000274
 8007890:	200002ec 	.word	0x200002ec
 8007894:	200002b0 	.word	0x200002b0
 8007898:	20000286 	.word	0x20000286
            break;
 800789c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800789e:	4b28      	ldr	r3, [pc, #160]	@ (8007940 <RadioSetRxGenericConfig+0x37c>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80078a8:	4b25      	ldr	r3, [pc, #148]	@ (8007940 <RadioSetRxGenericConfig+0x37c>)
 80078aa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80078b2:	4b23      	ldr	r3, [pc, #140]	@ (8007940 <RadioSetRxGenericConfig+0x37c>)
 80078b4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80078b6:	4a22      	ldr	r2, [pc, #136]	@ (8007940 <RadioSetRxGenericConfig+0x37c>)
 80078b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078bc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80078c4:	4b1e      	ldr	r3, [pc, #120]	@ (8007940 <RadioSetRxGenericConfig+0x37c>)
 80078c6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80078d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007940 <RadioSetRxGenericConfig+0x37c>)
 80078d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 80078d6:	f7ff f9c0 	bl	8006c5a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80078da:	2001      	movs	r0, #1
 80078dc:	f7fe fb5c 	bl	8005f98 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80078e0:	4818      	ldr	r0, [pc, #96]	@ (8007944 <RadioSetRxGenericConfig+0x380>)
 80078e2:	f000 ff7d 	bl	80087e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80078e6:	4818      	ldr	r0, [pc, #96]	@ (8007948 <RadioSetRxGenericConfig+0x384>)
 80078e8:	f001 f84c 	bl	8008984 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80078ec:	4b14      	ldr	r3, [pc, #80]	@ (8007940 <RadioSetRxGenericConfig+0x37c>)
 80078ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d10d      	bne.n	8007912 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80078f6:	f240 7036 	movw	r0, #1846	@ 0x736
 80078fa:	f001 f99f 	bl	8008c3c <SUBGRF_ReadRegister>
 80078fe:	4603      	mov	r3, r0
 8007900:	f023 0304 	bic.w	r3, r3, #4
 8007904:	b2db      	uxtb	r3, r3
 8007906:	4619      	mov	r1, r3
 8007908:	f240 7036 	movw	r0, #1846	@ 0x736
 800790c:	f001 f982 	bl	8008c14 <SUBGRF_WriteRegister>
 8007910:	e00c      	b.n	800792c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007912:	f240 7036 	movw	r0, #1846	@ 0x736
 8007916:	f001 f991 	bl	8008c3c <SUBGRF_ReadRegister>
 800791a:	4603      	mov	r3, r0
 800791c:	f043 0304 	orr.w	r3, r3, #4
 8007920:	b2db      	uxtb	r3, r3
 8007922:	4619      	mov	r1, r3
 8007924:	f240 7036 	movw	r0, #1846	@ 0x736
 8007928:	f001 f974 	bl	8008c14 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800792c:	4b04      	ldr	r3, [pc, #16]	@ (8007940 <RadioSetRxGenericConfig+0x37c>)
 800792e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007932:	609a      	str	r2, [r3, #8]
        break;
 8007934:	bf00      	nop
    }
    return status;
 8007936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8007938:	4618      	mov	r0, r3
 800793a:	3730      	adds	r7, #48	@ 0x30
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	20000278 	.word	0x20000278
 8007944:	200002b0 	.word	0x200002b0
 8007948:	20000286 	.word	0x20000286

0800794c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08e      	sub	sp, #56	@ 0x38
 8007950:	af00      	add	r7, sp, #0
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	607b      	str	r3, [r7, #4]
 8007956:	4603      	mov	r3, r0
 8007958:	73fb      	strb	r3, [r7, #15]
 800795a:	4613      	mov	r3, r2
 800795c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800795e:	2300      	movs	r3, #0
 8007960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007962:	2300      	movs	r3, #0
 8007964:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8007966:	f001 fc3c 	bl	80091e2 <RFW_DeInit>
    switch( modem )
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	2b03      	cmp	r3, #3
 800796e:	f200 8204 	bhi.w	8007d7a <RadioSetTxGenericConfig+0x42e>
 8007972:	a201      	add	r2, pc, #4	@ (adr r2, 8007978 <RadioSetTxGenericConfig+0x2c>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	08007afd 	.word	0x08007afd
 800797c:	08007c45 	.word	0x08007c45
 8007980:	08007d3d 	.word	0x08007d3d
 8007984:	08007989 	.word	0x08007989
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	7c9b      	ldrb	r3, [r3, #18]
 800798c:	2b08      	cmp	r3, #8
 800798e:	d902      	bls.n	8007996 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8007990:	f04f 33ff 	mov.w	r3, #4294967295
 8007994:	e206      	b.n	8007da4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	6899      	ldr	r1, [r3, #8]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	7c9b      	ldrb	r3, [r3, #18]
 800799e:	461a      	mov	r2, r3
 80079a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80079a4:	4618      	mov	r0, r3
 80079a6:	f001 fdb3 	bl	8009510 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d102      	bne.n	80079b8 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80079b2:	f04f 33ff 	mov.w	r3, #4294967295
 80079b6:	e1f5      	b.n	8007da4 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d813      	bhi.n	80079ec <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 80079c4:	2302      	movs	r3, #2
 80079c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80079ca:	4b99      	ldr	r3, [pc, #612]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 80079cc:	2203      	movs	r2, #3
 80079ce:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80079d0:	4b97      	ldr	r3, [pc, #604]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 80079d2:	2203      	movs	r2, #3
 80079d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a94      	ldr	r2, [pc, #592]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 80079de:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	7cda      	ldrb	r2, [r3, #19]
 80079e4:	4b92      	ldr	r3, [pc, #584]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 80079e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079ea:	e017      	b.n	8007a1c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80079f2:	4b8f      	ldr	r3, [pc, #572]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80079f8:	4b8d      	ldr	r3, [pc, #564]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a8a      	ldr	r2, [pc, #552]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007a06:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	7cda      	ldrb	r2, [r3, #19]
 8007a0c:	4b88      	ldr	r3, [pc, #544]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007a0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	089b      	lsrs	r3, r3, #2
 8007a18:	4a85      	ldr	r2, [pc, #532]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007a1a:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	4b82      	ldr	r3, [pc, #520]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007a28:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007a2a:	4b81      	ldr	r3, [pc, #516]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007a2c:	2204      	movs	r2, #4
 8007a2e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	7c9b      	ldrb	r3, [r3, #18]
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	4b7d      	ldr	r3, [pc, #500]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007a3a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8007a3c:	4b7c      	ldr	r3, [pc, #496]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	7d9b      	ldrb	r3, [r3, #22]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d003      	beq.n	8007a52 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	7d1b      	ldrb	r3, [r3, #20]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d12b      	bne.n	8007aaa <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	7d5b      	ldrb	r3, [r3, #21]
 8007a56:	2bf1      	cmp	r3, #241	@ 0xf1
 8007a58:	d00a      	beq.n	8007a70 <RadioSetTxGenericConfig+0x124>
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	7d5b      	ldrb	r3, [r3, #21]
 8007a5e:	2bf2      	cmp	r3, #242	@ 0xf2
 8007a60:	d006      	beq.n	8007a70 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	7d5b      	ldrb	r3, [r3, #21]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d002      	beq.n	8007a70 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8007a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6e:	e199      	b.n	8007da4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8007a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8007c34 <RadioSetTxGenericConfig+0x2e8>)
 8007a7c:	6819      	ldr	r1, [r3, #0]
 8007a7e:	f107 0320 	add.w	r3, r7, #32
 8007a82:	4a6d      	ldr	r2, [pc, #436]	@ (8007c38 <RadioSetTxGenericConfig+0x2ec>)
 8007a84:	4618      	mov	r0, r3
 8007a86:	f001 fb9f 	bl	80091c8 <RFW_Init>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8007a90:	f04f 33ff 	mov.w	r3, #4294967295
 8007a94:	e186      	b.n	8007da4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007a96:	4b66      	ldr	r3, [pc, #408]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8007a9c:	4b64      	ldr	r3, [pc, #400]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007aa2:	4b63      	ldr	r3, [pc, #396]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	755a      	strb	r2, [r3, #21]
        {
 8007aa8:	e00b      	b.n	8007ac2 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	7d5a      	ldrb	r2, [r3, #21]
 8007aae:	4b60      	ldr	r3, [pc, #384]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007ab0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	7d9a      	ldrb	r2, [r3, #22]
 8007ab6:	4b5e      	ldr	r3, [pc, #376]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007ab8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	7d1a      	ldrb	r2, [r3, #20]
 8007abe:	4b5c      	ldr	r3, [pc, #368]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007ac0:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8007ac2:	f7ff f8ca 	bl	8006c5a <RadioStandby>
        RadioSetModem( radio_modem );
 8007ac6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fe fa64 	bl	8005f98 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007ad0:	485a      	ldr	r0, [pc, #360]	@ (8007c3c <RadioSetTxGenericConfig+0x2f0>)
 8007ad2:	f000 fe85 	bl	80087e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ad6:	485a      	ldr	r0, [pc, #360]	@ (8007c40 <RadioSetTxGenericConfig+0x2f4>)
 8007ad8:	f000 ff54 	bl	8008984 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007adc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 fa18 	bl	8007f16 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	8a1b      	ldrh	r3, [r3, #16]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 fa62 	bl	8007fb4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	899b      	ldrh	r3, [r3, #12]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fa3d 	bl	8007f74 <SUBGRF_SetCrcPolynomial>
        break;
 8007afa:	e13f      	b.n	8007d7c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d102      	bne.n	8007b0a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8007b04:	f04f 33ff 	mov.w	r3, #4294967295
 8007b08:	e14c      	b.n	8007da4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	7c9b      	ldrb	r3, [r3, #18]
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	d902      	bls.n	8007b18 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8007b12:	f04f 33ff 	mov.w	r3, #4294967295
 8007b16:	e145      	b.n	8007da4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	6899      	ldr	r1, [r3, #8]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	7c9b      	ldrb	r3, [r3, #18]
 8007b20:	461a      	mov	r2, r3
 8007b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007b26:	4618      	mov	r0, r3
 8007b28:	f001 fcf2 	bl	8009510 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007b2c:	4b40      	ldr	r3, [pc, #256]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a3d      	ldr	r2, [pc, #244]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007b3a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	7cda      	ldrb	r2, [r3, #19]
 8007b40:	4b3b      	ldr	r3, [pc, #236]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007b42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	4a39      	ldr	r2, [pc, #228]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007b4c:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007b4e:	4b38      	ldr	r3, [pc, #224]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	4b34      	ldr	r3, [pc, #208]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007b60:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007b62:	4b33      	ldr	r3, [pc, #204]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007b64:	2204      	movs	r2, #4
 8007b66:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	7c9b      	ldrb	r3, [r3, #18]
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	4b2f      	ldr	r3, [pc, #188]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007b72:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8007b74:	4b2e      	ldr	r3, [pc, #184]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	7d9b      	ldrb	r3, [r3, #22]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d003      	beq.n	8007b8a <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	7d1b      	ldrb	r3, [r3, #20]
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d12a      	bne.n	8007be0 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	7d5b      	ldrb	r3, [r3, #21]
 8007b8e:	2bf1      	cmp	r3, #241	@ 0xf1
 8007b90:	d00a      	beq.n	8007ba8 <RadioSetTxGenericConfig+0x25c>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	7d5b      	ldrb	r3, [r3, #21]
 8007b96:	2bf2      	cmp	r3, #242	@ 0xf2
 8007b98:	d006      	beq.n	8007ba8 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	7d5b      	ldrb	r3, [r3, #21]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d002      	beq.n	8007ba8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8007ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba6:	e0fd      	b.n	8007da4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8007bb0:	4b20      	ldr	r3, [pc, #128]	@ (8007c34 <RadioSetTxGenericConfig+0x2e8>)
 8007bb2:	6819      	ldr	r1, [r3, #0]
 8007bb4:	f107 0314 	add.w	r3, r7, #20
 8007bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8007c38 <RadioSetTxGenericConfig+0x2ec>)
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f001 fb04 	bl	80091c8 <RFW_Init>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8007bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bca:	e0eb      	b.n	8007da4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007bcc:	4b18      	ldr	r3, [pc, #96]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8007bd2:	4b17      	ldr	r3, [pc, #92]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007bd8:	4b15      	ldr	r3, [pc, #84]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	755a      	strb	r2, [r3, #21]
        {
 8007bde:	e00b      	b.n	8007bf8 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	7d5a      	ldrb	r2, [r3, #21]
 8007be4:	4b12      	ldr	r3, [pc, #72]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007be6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	7d9a      	ldrb	r2, [r3, #22]
 8007bec:	4b10      	ldr	r3, [pc, #64]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007bee:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	7d1a      	ldrb	r2, [r3, #20]
 8007bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8007c30 <RadioSetTxGenericConfig+0x2e4>)
 8007bf6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8007bf8:	f7ff f82f 	bl	8006c5a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	f7fe f9cb 	bl	8005f98 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007c02:	480e      	ldr	r0, [pc, #56]	@ (8007c3c <RadioSetTxGenericConfig+0x2f0>)
 8007c04:	f000 fdec 	bl	80087e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007c08:	480d      	ldr	r0, [pc, #52]	@ (8007c40 <RadioSetTxGenericConfig+0x2f4>)
 8007c0a:	f000 febb 	bl	8008984 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 f97f 	bl	8007f16 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	8a1b      	ldrh	r3, [r3, #16]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 f9c9 	bl	8007fb4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	899b      	ldrh	r3, [r3, #12]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 f9a4 	bl	8007f74 <SUBGRF_SetCrcPolynomial>
        break;
 8007c2c:	e0a6      	b.n	8007d7c <RadioSetTxGenericConfig+0x430>
 8007c2e:	bf00      	nop
 8007c30:	20000278 	.word	0x20000278
 8007c34:	20000274 	.word	0x20000274
 8007c38:	200002d4 	.word	0x200002d4
 8007c3c:	200002b0 	.word	0x200002b0
 8007c40:	20000286 	.word	0x20000286
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007c44:	4b59      	ldr	r3, [pc, #356]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	781a      	ldrb	r2, [r3, #0]
 8007c50:	4b56      	ldr	r3, [pc, #344]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	785a      	ldrb	r2, [r3, #1]
 8007c5a:	4b54      	ldr	r3, [pc, #336]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	789a      	ldrb	r2, [r3, #2]
 8007c64:	4b51      	ldr	r3, [pc, #324]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007c66:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	78db      	ldrb	r3, [r3, #3]
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d010      	beq.n	8007c94 <RadioSetTxGenericConfig+0x348>
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	dc20      	bgt.n	8007cb8 <RadioSetTxGenericConfig+0x36c>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <RadioSetTxGenericConfig+0x334>
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d005      	beq.n	8007c8a <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8007c7e:	e01b      	b.n	8007cb8 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007c80:	4b4a      	ldr	r3, [pc, #296]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007c88:	e017      	b.n	8007cba <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007c8a:	4b48      	ldr	r3, [pc, #288]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007c92:	e012      	b.n	8007cba <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b0b      	cmp	r3, #11
 8007c9a:	d003      	beq.n	8007ca4 <RadioSetTxGenericConfig+0x358>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b0c      	cmp	r3, #12
 8007ca2:	d104      	bne.n	8007cae <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007ca4:	4b41      	ldr	r3, [pc, #260]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007cac:	e005      	b.n	8007cba <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007cae:	4b3f      	ldr	r3, [pc, #252]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007cb6:	e000      	b.n	8007cba <RadioSetTxGenericConfig+0x36e>
            break;
 8007cb8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007cba:	4b3c      	ldr	r3, [pc, #240]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	889a      	ldrh	r2, [r3, #4]
 8007cc4:	4b39      	ldr	r3, [pc, #228]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007cc6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	799a      	ldrb	r2, [r3, #6]
 8007ccc:	4b37      	ldr	r3, [pc, #220]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007cce:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	79da      	ldrb	r2, [r3, #7]
 8007cd4:	4b35      	ldr	r3, [pc, #212]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007cd6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	7a1a      	ldrb	r2, [r3, #8]
 8007cde:	4b33      	ldr	r3, [pc, #204]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007ce0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8007ce4:	f7fe ffb9 	bl	8006c5a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8007ce8:	2001      	movs	r0, #1
 8007cea:	f7fe f955 	bl	8005f98 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007cee:	4830      	ldr	r0, [pc, #192]	@ (8007db0 <RadioSetTxGenericConfig+0x464>)
 8007cf0:	f000 fd76 	bl	80087e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007cf4:	482f      	ldr	r0, [pc, #188]	@ (8007db4 <RadioSetTxGenericConfig+0x468>)
 8007cf6:	f000 fe45 	bl	8008984 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8007cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d00:	2b06      	cmp	r3, #6
 8007d02:	d10d      	bne.n	8007d20 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007d04:	f640 0089 	movw	r0, #2185	@ 0x889
 8007d08:	f000 ff98 	bl	8008c3c <SUBGRF_ReadRegister>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	f023 0304 	bic.w	r3, r3, #4
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	4619      	mov	r1, r3
 8007d16:	f640 0089 	movw	r0, #2185	@ 0x889
 8007d1a:	f000 ff7b 	bl	8008c14 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8007d1e:	e02d      	b.n	8007d7c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007d20:	f640 0089 	movw	r0, #2185	@ 0x889
 8007d24:	f000 ff8a 	bl	8008c3c <SUBGRF_ReadRegister>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f043 0304 	orr.w	r3, r3, #4
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	4619      	mov	r1, r3
 8007d32:	f640 0089 	movw	r0, #2185	@ 0x889
 8007d36:	f000 ff6d 	bl	8008c14 <SUBGRF_WriteRegister>
        break;
 8007d3a:	e01f      	b.n	8007d7c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d004      	beq.n	8007d4e <RadioSetTxGenericConfig+0x402>
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d4c:	d902      	bls.n	8007d54 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8007d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d52:	e027      	b.n	8007da4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8007d54:	2003      	movs	r0, #3
 8007d56:	f7fe f91f 	bl	8005f98 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007d5a:	4b14      	ldr	r3, [pc, #80]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a11      	ldr	r2, [pc, #68]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007d68:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007d6a:	4b10      	ldr	r3, [pc, #64]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007d6c:	2216      	movs	r2, #22
 8007d6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007d72:	480f      	ldr	r0, [pc, #60]	@ (8007db0 <RadioSetTxGenericConfig+0x464>)
 8007d74:	f000 fd34 	bl	80087e0 <SUBGRF_SetModulationParams>
        break;
 8007d78:	e000      	b.n	8007d7c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8007d7a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 f863 	bl	8008e4c <SUBGRF_SetRfTxPower>
 8007d86:	4603      	mov	r3, r0
 8007d88:	461a      	mov	r2, r3
 8007d8a:	4b08      	ldr	r3, [pc, #32]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007d8c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007d90:	4b06      	ldr	r3, [pc, #24]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007d92:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 fa37 	bl	800920a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007d9c:	4a03      	ldr	r2, [pc, #12]	@ (8007dac <RadioSetTxGenericConfig+0x460>)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6053      	str	r3, [r2, #4]
    return 0;
 8007da2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3738      	adds	r7, #56	@ 0x38
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20000278 	.word	0x20000278
 8007db0:	200002b0 	.word	0x200002b0
 8007db4:	20000286 	.word	0x20000286

08007db8 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bc80      	pop	{r7}
 8007dce:	4770      	bx	lr

08007dd0 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8007dda:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bc80      	pop	{r7}
 8007de4:	4770      	bx	lr
	...

08007de8 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d002      	beq.n	8007dfc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8007df6:	4a1d      	ldr	r2, [pc, #116]	@ (8007e6c <SUBGRF_Init+0x84>)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8007dfc:	f7f8 fca8 	bl	8000750 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8007e00:	2002      	movs	r0, #2
 8007e02:	f001 f8ff 	bl	8009004 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8007e06:	4b1a      	ldr	r3, [pc, #104]	@ (8007e70 <SUBGRF_Init+0x88>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	f000 f97d 	bl	800810c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8007e12:	f001 fb52 	bl	80094ba <RBI_IsTCXO>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d10e      	bne.n	8007e3a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8007e1c:	2140      	movs	r1, #64	@ 0x40
 8007e1e:	2001      	movs	r0, #1
 8007e20:	f000 fb82 	bl	8008528 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8007e24:	2100      	movs	r1, #0
 8007e26:	f640 1011 	movw	r0, #2321	@ 0x911
 8007e2a:	f000 fef3 	bl	8008c14 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8007e2e:	237f      	movs	r3, #127	@ 0x7f
 8007e30:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8007e32:	7b38      	ldrb	r0, [r7, #12]
 8007e34:	f000 fa8b 	bl	800834e <SUBGRF_Calibrate>
 8007e38:	e009      	b.n	8007e4e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007e3a:	2120      	movs	r1, #32
 8007e3c:	f640 1011 	movw	r0, #2321	@ 0x911
 8007e40:	f000 fee8 	bl	8008c14 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007e44:	2120      	movs	r1, #32
 8007e46:	f640 1012 	movw	r0, #2322	@ 0x912
 8007e4a:	f000 fee3 	bl	8008c14 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007e4e:	210e      	movs	r1, #14
 8007e50:	f640 101f 	movw	r0, #2335	@ 0x91f
 8007e54:	f000 fede 	bl	8008c14 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8007e58:	f001 fa86 	bl	8009368 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8007e5c:	4b05      	ldr	r3, [pc, #20]	@ (8007e74 <SUBGRF_Init+0x8c>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	701a      	strb	r2, [r3, #0]
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000310 	.word	0x20000310
 8007e70:	2000030c 	.word	0x2000030c
 8007e74:	20000304 	.word	0x20000304

08007e78 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	af00      	add	r7, sp, #0
    return OperatingMode;
 8007e7c:	4b02      	ldr	r3, [pc, #8]	@ (8007e88 <SUBGRF_GetOperatingMode+0x10>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bc80      	pop	{r7}
 8007e86:	4770      	bx	lr
 8007e88:	20000304 	.word	0x20000304

08007e8c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	6879      	ldr	r1, [r7, #4]
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	f000 ff24 	bl	8008cec <SUBGRF_WriteBuffer>
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8007ebe:	f107 0317 	add.w	r3, r7, #23
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	68b8      	ldr	r0, [r7, #8]
 8007ec6:	f000 fe27 	bl	8008b18 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	79fa      	ldrb	r2, [r7, #7]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d201      	bcs.n	8007ed8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e007      	b.n	8007ee8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8007ed8:	7df8      	ldrb	r0, [r7, #23]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	68f9      	ldr	r1, [r7, #12]
 8007ee2:	f000 ff25 	bl	8008d30 <SUBGRF_ReadBuffer>

    return 0;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8007efe:	7afb      	ldrb	r3, [r7, #11]
 8007f00:	4619      	mov	r1, r3
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f7ff ffc2 	bl	8007e8c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f91b 	bl	8008144 <SUBGRF_SetTx>
}
 8007f0e:	bf00      	nop
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b082      	sub	sp, #8
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8007f1e:	2208      	movs	r2, #8
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8007f26:	f000 fe9d 	bl	8008c64 <SUBGRF_WriteRegisters>
    return 0;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8007f3e:	88fb      	ldrh	r3, [r7, #6]
 8007f40:	0a1b      	lsrs	r3, r3, #8
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8007f48:	88fb      	ldrh	r3, [r7, #6]
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8007f4e:	f000 fb6f 	bl	8008630 <SUBGRF_GetPacketType>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d108      	bne.n	8007f6a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8007f58:	f107 030c 	add.w	r3, r7, #12
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	4619      	mov	r1, r3
 8007f60:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8007f64:	f000 fe7e 	bl	8008c64 <SUBGRF_WriteRegisters>
            break;
 8007f68:	e000      	b.n	8007f6c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8007f6a:	bf00      	nop
    }
}
 8007f6c:	bf00      	nop
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8007f7e:	88fb      	ldrh	r3, [r7, #6]
 8007f80:	0a1b      	lsrs	r3, r3, #8
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8007f88:	88fb      	ldrh	r3, [r7, #6]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8007f8e:	f000 fb4f 	bl	8008630 <SUBGRF_GetPacketType>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d108      	bne.n	8007faa <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8007f98:	f107 030c 	add.w	r3, r7, #12
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	f240 60be 	movw	r0, #1726	@ 0x6be
 8007fa4:	f000 fe5e 	bl	8008c64 <SUBGRF_WriteRegisters>
            break;
 8007fa8:	e000      	b.n	8007fac <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8007faa:	bf00      	nop
    }
}
 8007fac:	bf00      	nop
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	4603      	mov	r3, r0
 8007fbc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8007fc2:	f000 fb35 	bl	8008630 <SUBGRF_GetPacketType>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d121      	bne.n	8008010 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8007fcc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8007fd0:	f000 fe34 	bl	8008c3c <SUBGRF_ReadRegister>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f023 0301 	bic.w	r3, r3, #1
 8007fda:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8007fdc:	88fb      	ldrh	r3, [r7, #6]
 8007fde:	0a1b      	lsrs	r3, r3, #8
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	b25b      	sxtb	r3, r3
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	b25a      	sxtb	r2, r3
 8007fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	b25b      	sxtb	r3, r3
 8007ff2:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8007ffc:	f000 fe0a 	bl	8008c14 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8008000:	88fb      	ldrh	r3, [r7, #6]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	4619      	mov	r1, r3
 8008006:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800800a:	f000 fe03 	bl	8008c14 <SUBGRF_WriteRegister>
            break;
 800800e:	e000      	b.n	8008012 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8008010:	bf00      	nop
    }
}
 8008012:	bf00      	nop
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800802c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8008030:	f000 fe04 	bl	8008c3c <SUBGRF_ReadRegister>
 8008034:	4603      	mov	r3, r0
 8008036:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	f023 0301 	bic.w	r3, r3, #1
 800803e:	b2db      	uxtb	r3, r3
 8008040:	4619      	mov	r1, r3
 8008042:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8008046:	f000 fde5 	bl	8008c14 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800804a:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800804e:	f000 fdf5 	bl	8008c3c <SUBGRF_ReadRegister>
 8008052:	4603      	mov	r3, r0
 8008054:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8008056:	79bb      	ldrb	r3, [r7, #6]
 8008058:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800805c:	b2db      	uxtb	r3, r3
 800805e:	4619      	mov	r1, r3
 8008060:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8008064:	f000 fdd6 	bl	8008c14 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008068:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800806c:	f000 f88a 	bl	8008184 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8008070:	463b      	mov	r3, r7
 8008072:	2204      	movs	r2, #4
 8008074:	4619      	mov	r1, r3
 8008076:	f640 0019 	movw	r0, #2073	@ 0x819
 800807a:	f000 fe15 	bl	8008ca8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800807e:	2000      	movs	r0, #0
 8008080:	f000 f844 	bl	800810c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	4619      	mov	r1, r3
 8008088:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800808c:	f000 fdc2 	bl	8008c14 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8008090:	79bb      	ldrb	r3, [r7, #6]
 8008092:	4619      	mov	r1, r3
 8008094:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8008098:	f000 fdbc 	bl	8008c14 <SUBGRF_WriteRegister>

    return number;
 800809c:	683b      	ldr	r3, [r7, #0]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80080b0:	2000      	movs	r0, #0
 80080b2:	f001 f999 	bl	80093e8 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80080b6:	2002      	movs	r0, #2
 80080b8:	f000 ffa4 	bl	8009004 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80080bc:	793b      	ldrb	r3, [r7, #4]
 80080be:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80080c8:	793b      	ldrb	r3, [r7, #4]
 80080ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80080d2:	b25b      	sxtb	r3, r3
 80080d4:	4313      	orrs	r3, r2
 80080d6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80080d8:	793b      	ldrb	r3, [r7, #4]
 80080da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80080e2:	4313      	orrs	r3, r2
 80080e4:	b25b      	sxtb	r3, r3
 80080e6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80080e8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80080ea:	f107 030f 	add.w	r3, r7, #15
 80080ee:	2201      	movs	r2, #1
 80080f0:	4619      	mov	r1, r3
 80080f2:	2084      	movs	r0, #132	@ 0x84
 80080f4:	f000 fe3e 	bl	8008d74 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80080f8:	4b03      	ldr	r3, [pc, #12]	@ (8008108 <SUBGRF_SetSleep+0x60>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	701a      	strb	r2, [r3, #0]
}
 80080fe:	bf00      	nop
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20000304 	.word	0x20000304

0800810c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8008116:	1dfb      	adds	r3, r7, #7
 8008118:	2201      	movs	r2, #1
 800811a:	4619      	mov	r1, r3
 800811c:	2080      	movs	r0, #128	@ 0x80
 800811e:	f000 fe29 	bl	8008d74 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8008122:	79fb      	ldrb	r3, [r7, #7]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d103      	bne.n	8008130 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8008128:	4b05      	ldr	r3, [pc, #20]	@ (8008140 <SUBGRF_SetStandby+0x34>)
 800812a:	2201      	movs	r2, #1
 800812c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800812e:	e002      	b.n	8008136 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8008130:	4b03      	ldr	r3, [pc, #12]	@ (8008140 <SUBGRF_SetStandby+0x34>)
 8008132:	2202      	movs	r2, #2
 8008134:	701a      	strb	r2, [r3, #0]
}
 8008136:	bf00      	nop
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20000304 	.word	0x20000304

08008144 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800814c:	4b0c      	ldr	r3, [pc, #48]	@ (8008180 <SUBGRF_SetTx+0x3c>)
 800814e:	2204      	movs	r2, #4
 8008150:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	0c1b      	lsrs	r3, r3, #16
 8008156:	b2db      	uxtb	r3, r3
 8008158:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	0a1b      	lsrs	r3, r3, #8
 800815e:	b2db      	uxtb	r3, r3
 8008160:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8008168:	f107 030c 	add.w	r3, r7, #12
 800816c:	2203      	movs	r2, #3
 800816e:	4619      	mov	r1, r3
 8008170:	2083      	movs	r0, #131	@ 0x83
 8008172:	f000 fdff 	bl	8008d74 <SUBGRF_WriteCommand>
}
 8008176:	bf00      	nop
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000304 	.word	0x20000304

08008184 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800818c:	4b0c      	ldr	r3, [pc, #48]	@ (80081c0 <SUBGRF_SetRx+0x3c>)
 800818e:	2205      	movs	r2, #5
 8008190:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	0c1b      	lsrs	r3, r3, #16
 8008196:	b2db      	uxtb	r3, r3
 8008198:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	0a1b      	lsrs	r3, r3, #8
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80081a8:	f107 030c 	add.w	r3, r7, #12
 80081ac:	2203      	movs	r2, #3
 80081ae:	4619      	mov	r1, r3
 80081b0:	2082      	movs	r0, #130	@ 0x82
 80081b2:	f000 fddf 	bl	8008d74 <SUBGRF_WriteCommand>
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000304 	.word	0x20000304

080081c4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80081cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008208 <SUBGRF_SetRxBoosted+0x44>)
 80081ce:	2205      	movs	r2, #5
 80081d0:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80081d2:	2197      	movs	r1, #151	@ 0x97
 80081d4:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 80081d8:	f000 fd1c 	bl	8008c14 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	0c1b      	lsrs	r3, r3, #16
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	0a1b      	lsrs	r3, r3, #8
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80081f2:	f107 030c 	add.w	r3, r7, #12
 80081f6:	2203      	movs	r2, #3
 80081f8:	4619      	mov	r1, r3
 80081fa:	2082      	movs	r0, #130	@ 0x82
 80081fc:	f000 fdba 	bl	8008d74 <SUBGRF_WriteCommand>
}
 8008200:	bf00      	nop
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	20000304 	.word	0x20000304

0800820c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	0c1b      	lsrs	r3, r3, #16
 800821a:	b2db      	uxtb	r3, r3
 800821c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	0a1b      	lsrs	r3, r3, #8
 8008222:	b2db      	uxtb	r3, r3
 8008224:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	b2db      	uxtb	r3, r3
 800822a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	0c1b      	lsrs	r3, r3, #16
 8008230:	b2db      	uxtb	r3, r3
 8008232:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	0a1b      	lsrs	r3, r3, #8
 8008238:	b2db      	uxtb	r3, r3
 800823a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8008242:	f107 0308 	add.w	r3, r7, #8
 8008246:	2206      	movs	r2, #6
 8008248:	4619      	mov	r1, r3
 800824a:	2094      	movs	r0, #148	@ 0x94
 800824c:	f000 fd92 	bl	8008d74 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8008250:	4b03      	ldr	r3, [pc, #12]	@ (8008260 <SUBGRF_SetRxDutyCycle+0x54>)
 8008252:	2206      	movs	r2, #6
 8008254:	701a      	strb	r2, [r3, #0]
}
 8008256:	bf00      	nop
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20000304 	.word	0x20000304

08008264 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8008268:	2200      	movs	r2, #0
 800826a:	2100      	movs	r1, #0
 800826c:	20c5      	movs	r0, #197	@ 0xc5
 800826e:	f000 fd81 	bl	8008d74 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8008272:	4b02      	ldr	r3, [pc, #8]	@ (800827c <SUBGRF_SetCad+0x18>)
 8008274:	2207      	movs	r2, #7
 8008276:	701a      	strb	r2, [r3, #0]
}
 8008278:	bf00      	nop
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20000304 	.word	0x20000304

08008280 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8008284:	2200      	movs	r2, #0
 8008286:	2100      	movs	r1, #0
 8008288:	20d1      	movs	r0, #209	@ 0xd1
 800828a:	f000 fd73 	bl	8008d74 <SUBGRF_WriteCommand>
}
 800828e:	bf00      	nop
 8008290:	bd80      	pop	{r7, pc}

08008292 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8008292:	b580      	push	{r7, lr}
 8008294:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8008296:	2200      	movs	r2, #0
 8008298:	2100      	movs	r1, #0
 800829a:	20d2      	movs	r0, #210	@ 0xd2
 800829c:	f000 fd6a 	bl	8008d74 <SUBGRF_WriteCommand>
}
 80082a0:	bf00      	nop
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80082ae:	1dfb      	adds	r3, r7, #7
 80082b0:	2201      	movs	r2, #1
 80082b2:	4619      	mov	r1, r3
 80082b4:	209f      	movs	r0, #159	@ 0x9f
 80082b6:	f000 fd5d 	bl	8008d74 <SUBGRF_WriteCommand>
}
 80082ba:	bf00      	nop
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	4603      	mov	r3, r0
 80082ca:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80082cc:	1dfb      	adds	r3, r7, #7
 80082ce:	2201      	movs	r2, #1
 80082d0:	4619      	mov	r1, r3
 80082d2:	20a0      	movs	r0, #160	@ 0xa0
 80082d4:	f000 fd4e 	bl	8008d74 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 80082d8:	79fb      	ldrb	r3, [r7, #7]
 80082da:	2b3f      	cmp	r3, #63	@ 0x3f
 80082dc:	d91c      	bls.n	8008318 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80082de:	79fb      	ldrb	r3, [r7, #7]
 80082e0:	085b      	lsrs	r3, r3, #1
 80082e2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80082ec:	e005      	b.n	80082fa <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
 80082f0:	089b      	lsrs	r3, r3, #2
 80082f2:	73fb      	strb	r3, [r7, #15]
            exp++;
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
 80082f6:	3301      	adds	r3, #1
 80082f8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
 80082fc:	2b1f      	cmp	r3, #31
 80082fe:	d8f6      	bhi.n	80082ee <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	b2da      	uxtb	r2, r3
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	4413      	add	r3, r2
 800830a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800830c:	7b7b      	ldrb	r3, [r7, #13]
 800830e:	4619      	mov	r1, r3
 8008310:	f240 7006 	movw	r0, #1798	@ 0x706
 8008314:	f000 fc7e 	bl	8008c14 <SUBGRF_WriteRegister>
    }
}
 8008318:	bf00      	nop
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8008326:	f001 f8d3 	bl	80094d0 <RBI_IsDCDC>
 800832a:	4603      	mov	r3, r0
 800832c:	2b01      	cmp	r3, #1
 800832e:	d102      	bne.n	8008336 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8008330:	2301      	movs	r3, #1
 8008332:	71fb      	strb	r3, [r7, #7]
 8008334:	e001      	b.n	800833a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8008336:	2300      	movs	r3, #0
 8008338:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800833a:	1dfb      	adds	r3, r7, #7
 800833c:	2201      	movs	r2, #1
 800833e:	4619      	mov	r1, r3
 8008340:	2096      	movs	r0, #150	@ 0x96
 8008342:	f000 fd17 	bl	8008d74 <SUBGRF_WriteCommand>
}
 8008346:	bf00      	nop
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008356:	793b      	ldrb	r3, [r7, #4]
 8008358:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800835c:	b2db      	uxtb	r3, r3
 800835e:	019b      	lsls	r3, r3, #6
 8008360:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8008362:	793b      	ldrb	r3, [r7, #4]
 8008364:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008368:	b2db      	uxtb	r3, r3
 800836a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800836c:	b25b      	sxtb	r3, r3
 800836e:	4313      	orrs	r3, r2
 8008370:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8008372:	793b      	ldrb	r3, [r7, #4]
 8008374:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008378:	b2db      	uxtb	r3, r3
 800837a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800837c:	b25b      	sxtb	r3, r3
 800837e:	4313      	orrs	r3, r2
 8008380:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8008382:	793b      	ldrb	r3, [r7, #4]
 8008384:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008388:	b2db      	uxtb	r3, r3
 800838a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800838c:	b25b      	sxtb	r3, r3
 800838e:	4313      	orrs	r3, r2
 8008390:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8008392:	793b      	ldrb	r3, [r7, #4]
 8008394:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008398:	b2db      	uxtb	r3, r3
 800839a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800839c:	b25b      	sxtb	r3, r3
 800839e:	4313      	orrs	r3, r2
 80083a0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80083a2:	793b      	ldrb	r3, [r7, #4]
 80083a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80083ac:	b25b      	sxtb	r3, r3
 80083ae:	4313      	orrs	r3, r2
 80083b0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80083b2:	793b      	ldrb	r3, [r7, #4]
 80083b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80083bc:	4313      	orrs	r3, r2
 80083be:	b25b      	sxtb	r3, r3
 80083c0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80083c2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80083c4:	f107 030f 	add.w	r3, r7, #15
 80083c8:	2201      	movs	r2, #1
 80083ca:	4619      	mov	r1, r3
 80083cc:	2089      	movs	r0, #137	@ 0x89
 80083ce:	f000 fcd1 	bl	8008d74 <SUBGRF_WriteCommand>
}
 80083d2:	bf00      	nop
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a1d      	ldr	r2, [pc, #116]	@ (800845c <SUBGRF_CalibrateImage+0x80>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d904      	bls.n	80083f6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80083ec:	23e1      	movs	r3, #225	@ 0xe1
 80083ee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80083f0:	23e9      	movs	r3, #233	@ 0xe9
 80083f2:	737b      	strb	r3, [r7, #13]
 80083f4:	e027      	b.n	8008446 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a19      	ldr	r2, [pc, #100]	@ (8008460 <SUBGRF_CalibrateImage+0x84>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d904      	bls.n	8008408 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80083fe:	23d7      	movs	r3, #215	@ 0xd7
 8008400:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8008402:	23db      	movs	r3, #219	@ 0xdb
 8008404:	737b      	strb	r3, [r7, #13]
 8008406:	e01e      	b.n	8008446 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a16      	ldr	r2, [pc, #88]	@ (8008464 <SUBGRF_CalibrateImage+0x88>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d904      	bls.n	800841a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8008410:	23c1      	movs	r3, #193	@ 0xc1
 8008412:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8008414:	23c5      	movs	r3, #197	@ 0xc5
 8008416:	737b      	strb	r3, [r7, #13]
 8008418:	e015      	b.n	8008446 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a12      	ldr	r2, [pc, #72]	@ (8008468 <SUBGRF_CalibrateImage+0x8c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d904      	bls.n	800842c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8008422:	2375      	movs	r3, #117	@ 0x75
 8008424:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8008426:	2381      	movs	r3, #129	@ 0x81
 8008428:	737b      	strb	r3, [r7, #13]
 800842a:	e00c      	b.n	8008446 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a0f      	ldr	r2, [pc, #60]	@ (800846c <SUBGRF_CalibrateImage+0x90>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d904      	bls.n	800843e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8008434:	236b      	movs	r3, #107	@ 0x6b
 8008436:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8008438:	236f      	movs	r3, #111	@ 0x6f
 800843a:	737b      	strb	r3, [r7, #13]
 800843c:	e003      	b.n	8008446 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800843e:	2329      	movs	r3, #41	@ 0x29
 8008440:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8008442:	232b      	movs	r3, #43	@ 0x2b
 8008444:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8008446:	f107 030c 	add.w	r3, r7, #12
 800844a:	2202      	movs	r2, #2
 800844c:	4619      	mov	r1, r3
 800844e:	2098      	movs	r0, #152	@ 0x98
 8008450:	f000 fc90 	bl	8008d74 <SUBGRF_WriteCommand>
}
 8008454:	bf00      	nop
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	35a4e900 	.word	0x35a4e900
 8008460:	32a9f880 	.word	0x32a9f880
 8008464:	2de54480 	.word	0x2de54480
 8008468:	1b6b0b00 	.word	0x1b6b0b00
 800846c:	1954fc40 	.word	0x1954fc40

08008470 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8008470:	b590      	push	{r4, r7, lr}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	4604      	mov	r4, r0
 8008478:	4608      	mov	r0, r1
 800847a:	4611      	mov	r1, r2
 800847c:	461a      	mov	r2, r3
 800847e:	4623      	mov	r3, r4
 8008480:	71fb      	strb	r3, [r7, #7]
 8008482:	4603      	mov	r3, r0
 8008484:	71bb      	strb	r3, [r7, #6]
 8008486:	460b      	mov	r3, r1
 8008488:	717b      	strb	r3, [r7, #5]
 800848a:	4613      	mov	r3, r2
 800848c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800848e:	79fb      	ldrb	r3, [r7, #7]
 8008490:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8008492:	79bb      	ldrb	r3, [r7, #6]
 8008494:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8008496:	797b      	ldrb	r3, [r7, #5]
 8008498:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800849a:	793b      	ldrb	r3, [r7, #4]
 800849c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800849e:	f107 030c 	add.w	r3, r7, #12
 80084a2:	2204      	movs	r2, #4
 80084a4:	4619      	mov	r1, r3
 80084a6:	2095      	movs	r0, #149	@ 0x95
 80084a8:	f000 fc64 	bl	8008d74 <SUBGRF_WriteCommand>
}
 80084ac:	bf00      	nop
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd90      	pop	{r4, r7, pc}

080084b4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80084b4:	b590      	push	{r4, r7, lr}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	4604      	mov	r4, r0
 80084bc:	4608      	mov	r0, r1
 80084be:	4611      	mov	r1, r2
 80084c0:	461a      	mov	r2, r3
 80084c2:	4623      	mov	r3, r4
 80084c4:	80fb      	strh	r3, [r7, #6]
 80084c6:	4603      	mov	r3, r0
 80084c8:	80bb      	strh	r3, [r7, #4]
 80084ca:	460b      	mov	r3, r1
 80084cc:	807b      	strh	r3, [r7, #2]
 80084ce:	4613      	mov	r3, r2
 80084d0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80084d2:	88fb      	ldrh	r3, [r7, #6]
 80084d4:	0a1b      	lsrs	r3, r3, #8
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80084dc:	88fb      	ldrh	r3, [r7, #6]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80084e2:	88bb      	ldrh	r3, [r7, #4]
 80084e4:	0a1b      	lsrs	r3, r3, #8
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80084ec:	88bb      	ldrh	r3, [r7, #4]
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80084f2:	887b      	ldrh	r3, [r7, #2]
 80084f4:	0a1b      	lsrs	r3, r3, #8
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80084fc:	887b      	ldrh	r3, [r7, #2]
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8008502:	883b      	ldrh	r3, [r7, #0]
 8008504:	0a1b      	lsrs	r3, r3, #8
 8008506:	b29b      	uxth	r3, r3
 8008508:	b2db      	uxtb	r3, r3
 800850a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800850c:	883b      	ldrh	r3, [r7, #0]
 800850e:	b2db      	uxtb	r3, r3
 8008510:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8008512:	f107 0308 	add.w	r3, r7, #8
 8008516:	2208      	movs	r2, #8
 8008518:	4619      	mov	r1, r3
 800851a:	2008      	movs	r0, #8
 800851c:	f000 fc2a 	bl	8008d74 <SUBGRF_WriteCommand>
}
 8008520:	bf00      	nop
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	bd90      	pop	{r4, r7, pc}

08008528 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	6039      	str	r1, [r7, #0]
 8008532:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	b2db      	uxtb	r3, r3
 800853c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	0c1b      	lsrs	r3, r3, #16
 8008542:	b2db      	uxtb	r3, r3
 8008544:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	0a1b      	lsrs	r3, r3, #8
 800854a:	b2db      	uxtb	r3, r3
 800854c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8008554:	f107 030c 	add.w	r3, r7, #12
 8008558:	2204      	movs	r2, #4
 800855a:	4619      	mov	r1, r3
 800855c:	2097      	movs	r0, #151	@ 0x97
 800855e:	f000 fc09 	bl	8008d74 <SUBGRF_WriteCommand>
}
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800856c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800857a:	4b1d      	ldr	r3, [pc, #116]	@ (80085f0 <SUBGRF_SetRfFrequency+0x84>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	f083 0301 	eor.w	r3, r3, #1
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d005      	beq.n	8008594 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff ff27 	bl	80083dc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800858e:	4b18      	ldr	r3, [pc, #96]	@ (80085f0 <SUBGRF_SetRfFrequency+0x84>)
 8008590:	2201      	movs	r2, #1
 8008592:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	461c      	mov	r4, r3
 800859a:	4615      	mov	r5, r2
 800859c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80085a0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80085a4:	4a13      	ldr	r2, [pc, #76]	@ (80085f4 <SUBGRF_SetRfFrequency+0x88>)
 80085a6:	f04f 0300 	mov.w	r3, #0
 80085aa:	4640      	mov	r0, r8
 80085ac:	4649      	mov	r1, r9
 80085ae:	f7f7 fde3 	bl	8000178 <__aeabi_uldivmod>
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	4613      	mov	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	0e1b      	lsrs	r3, r3, #24
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	0c1b      	lsrs	r3, r3, #16
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	0a1b      	lsrs	r3, r3, #8
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80085d8:	f107 0308 	add.w	r3, r7, #8
 80085dc:	2204      	movs	r2, #4
 80085de:	4619      	mov	r1, r3
 80085e0:	2086      	movs	r0, #134	@ 0x86
 80085e2:	f000 fbc7 	bl	8008d74 <SUBGRF_WriteCommand>
}
 80085e6:	bf00      	nop
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80085f0:	2000030c 	.word	0x2000030c
 80085f4:	01e84800 	.word	0x01e84800

080085f8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8008602:	79fa      	ldrb	r2, [r7, #7]
 8008604:	4b09      	ldr	r3, [pc, #36]	@ (800862c <SUBGRF_SetPacketType+0x34>)
 8008606:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d104      	bne.n	8008618 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800860e:	2100      	movs	r1, #0
 8008610:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8008614:	f000 fafe 	bl	8008c14 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8008618:	1dfb      	adds	r3, r7, #7
 800861a:	2201      	movs	r2, #1
 800861c:	4619      	mov	r1, r3
 800861e:	208a      	movs	r0, #138	@ 0x8a
 8008620:	f000 fba8 	bl	8008d74 <SUBGRF_WriteCommand>
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	20000305 	.word	0x20000305

08008630 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
    return PacketType;
 8008634:	4b02      	ldr	r3, [pc, #8]	@ (8008640 <SUBGRF_GetPacketType+0x10>)
 8008636:	781b      	ldrb	r3, [r3, #0]
}
 8008638:	4618      	mov	r0, r3
 800863a:	46bd      	mov	sp, r7
 800863c:	bc80      	pop	{r7}
 800863e:	4770      	bx	lr
 8008640:	20000305 	.word	0x20000305

08008644 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	71fb      	strb	r3, [r7, #7]
 800864e:	460b      	mov	r3, r1
 8008650:	71bb      	strb	r3, [r7, #6]
 8008652:	4613      	mov	r3, r2
 8008654:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d149      	bne.n	80086f0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800865c:	2000      	movs	r0, #0
 800865e:	f000 ff42 	bl	80094e6 <RBI_GetRFOMaxPowerConfig>
 8008662:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8008664:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	429a      	cmp	r2, r3
 800866c:	da01      	bge.n	8008672 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b0e      	cmp	r3, #14
 8008676:	d10e      	bne.n	8008696 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8008678:	2301      	movs	r3, #1
 800867a:	2201      	movs	r2, #1
 800867c:	2100      	movs	r1, #0
 800867e:	2004      	movs	r0, #4
 8008680:	f7ff fef6 	bl	8008470 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8008684:	79ba      	ldrb	r2, [r7, #6]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	b2db      	uxtb	r3, r3
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	b2db      	uxtb	r3, r3
 800868e:	330e      	adds	r3, #14
 8008690:	b2db      	uxtb	r3, r3
 8008692:	71bb      	strb	r3, [r7, #6]
 8008694:	e01f      	b.n	80086d6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b0a      	cmp	r3, #10
 800869a:	d10e      	bne.n	80086ba <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800869c:	2301      	movs	r3, #1
 800869e:	2201      	movs	r2, #1
 80086a0:	2100      	movs	r1, #0
 80086a2:	2001      	movs	r0, #1
 80086a4:	f7ff fee4 	bl	8008470 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80086a8:	79ba      	ldrb	r2, [r7, #6]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	330d      	adds	r3, #13
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	71bb      	strb	r3, [r7, #6]
 80086b8:	e00d      	b.n	80086d6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80086ba:	2301      	movs	r3, #1
 80086bc:	2201      	movs	r2, #1
 80086be:	2100      	movs	r1, #0
 80086c0:	2007      	movs	r0, #7
 80086c2:	f7ff fed5 	bl	8008470 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80086c6:	79ba      	ldrb	r2, [r7, #6]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	330e      	adds	r3, #14
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80086d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80086da:	f113 0f11 	cmn.w	r3, #17
 80086de:	da01      	bge.n	80086e4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80086e0:	23ef      	movs	r3, #239	@ 0xef
 80086e2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80086e4:	2118      	movs	r1, #24
 80086e6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80086ea:	f000 fa93 	bl	8008c14 <SUBGRF_WriteRegister>
 80086ee:	e067      	b.n	80087c0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80086f0:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80086f4:	f000 faa2 	bl	8008c3c <SUBGRF_ReadRegister>
 80086f8:	4603      	mov	r3, r0
 80086fa:	f043 031e 	orr.w	r3, r3, #30
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	4619      	mov	r1, r3
 8008702:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8008706:	f000 fa85 	bl	8008c14 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800870a:	2001      	movs	r0, #1
 800870c:	f000 feeb 	bl	80094e6 <RBI_GetRFOMaxPowerConfig>
 8008710:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8008712:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	429a      	cmp	r2, r3
 800871a:	da01      	bge.n	8008720 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b14      	cmp	r3, #20
 8008724:	d10e      	bne.n	8008744 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8008726:	2301      	movs	r3, #1
 8008728:	2200      	movs	r2, #0
 800872a:	2105      	movs	r1, #5
 800872c:	2003      	movs	r0, #3
 800872e:	f7ff fe9f 	bl	8008470 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008732:	79ba      	ldrb	r2, [r7, #6]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	b2db      	uxtb	r3, r3
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	b2db      	uxtb	r3, r3
 800873c:	3316      	adds	r3, #22
 800873e:	b2db      	uxtb	r3, r3
 8008740:	71bb      	strb	r3, [r7, #6]
 8008742:	e031      	b.n	80087a8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b11      	cmp	r3, #17
 8008748:	d10e      	bne.n	8008768 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800874a:	2301      	movs	r3, #1
 800874c:	2200      	movs	r2, #0
 800874e:	2103      	movs	r1, #3
 8008750:	2002      	movs	r0, #2
 8008752:	f7ff fe8d 	bl	8008470 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008756:	79ba      	ldrb	r2, [r7, #6]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	b2db      	uxtb	r3, r3
 8008760:	3316      	adds	r3, #22
 8008762:	b2db      	uxtb	r3, r3
 8008764:	71bb      	strb	r3, [r7, #6]
 8008766:	e01f      	b.n	80087a8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b0e      	cmp	r3, #14
 800876c:	d10e      	bne.n	800878c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800876e:	2301      	movs	r3, #1
 8008770:	2200      	movs	r2, #0
 8008772:	2102      	movs	r1, #2
 8008774:	2002      	movs	r0, #2
 8008776:	f7ff fe7b 	bl	8008470 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800877a:	79ba      	ldrb	r2, [r7, #6]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	b2db      	uxtb	r3, r3
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	b2db      	uxtb	r3, r3
 8008784:	330e      	adds	r3, #14
 8008786:	b2db      	uxtb	r3, r3
 8008788:	71bb      	strb	r3, [r7, #6]
 800878a:	e00d      	b.n	80087a8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800878c:	2301      	movs	r3, #1
 800878e:	2200      	movs	r2, #0
 8008790:	2107      	movs	r1, #7
 8008792:	2004      	movs	r0, #4
 8008794:	f7ff fe6c 	bl	8008470 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008798:	79ba      	ldrb	r2, [r7, #6]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	b2db      	uxtb	r3, r3
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	3316      	adds	r3, #22
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80087a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80087ac:	f113 0f09 	cmn.w	r3, #9
 80087b0:	da01      	bge.n	80087b6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80087b2:	23f7      	movs	r3, #247	@ 0xf7
 80087b4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80087b6:	2138      	movs	r1, #56	@ 0x38
 80087b8:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80087bc:	f000 fa2a 	bl	8008c14 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80087c0:	79bb      	ldrb	r3, [r7, #6]
 80087c2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80087c4:	797b      	ldrb	r3, [r7, #5]
 80087c6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80087c8:	f107 0308 	add.w	r3, r7, #8
 80087cc:	2202      	movs	r2, #2
 80087ce:	4619      	mov	r1, r3
 80087d0:	208e      	movs	r0, #142	@ 0x8e
 80087d2:	f000 facf 	bl	8008d74 <SUBGRF_WriteCommand>
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80087e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80087e4:	b086      	sub	sp, #24
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80087ee:	4a61      	ldr	r2, [pc, #388]	@ (8008974 <SUBGRF_SetModulationParams+0x194>)
 80087f0:	f107 0308 	add.w	r3, r7, #8
 80087f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087f8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	781a      	ldrb	r2, [r3, #0]
 8008800:	4b5d      	ldr	r3, [pc, #372]	@ (8008978 <SUBGRF_SetModulationParams+0x198>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d004      	beq.n	8008812 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	4618      	mov	r0, r3
 800880e:	f7ff fef3 	bl	80085f8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	2b03      	cmp	r3, #3
 8008818:	f200 80a5 	bhi.w	8008966 <SUBGRF_SetModulationParams+0x186>
 800881c:	a201      	add	r2, pc, #4	@ (adr r2, 8008824 <SUBGRF_SetModulationParams+0x44>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008835 	.word	0x08008835
 8008828:	080088f5 	.word	0x080088f5
 800882c:	080088b7 	.word	0x080088b7
 8008830:	08008923 	.word	0x08008923
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8008834:	2308      	movs	r3, #8
 8008836:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	4a4f      	ldr	r2, [pc, #316]	@ (800897c <SUBGRF_SetModulationParams+0x19c>)
 800883e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008842:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	0c1b      	lsrs	r3, r3, #16
 8008848:	b2db      	uxtb	r3, r3
 800884a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	0a1b      	lsrs	r3, r3, #8
 8008850:	b2db      	uxtb	r3, r3
 8008852:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	7b1b      	ldrb	r3, [r3, #12]
 800885e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	7b5b      	ldrb	r3, [r3, #13]
 8008864:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2200      	movs	r2, #0
 800886c:	461c      	mov	r4, r3
 800886e:	4615      	mov	r5, r2
 8008870:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8008874:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8008878:	4a41      	ldr	r2, [pc, #260]	@ (8008980 <SUBGRF_SetModulationParams+0x1a0>)
 800887a:	f04f 0300 	mov.w	r3, #0
 800887e:	4640      	mov	r0, r8
 8008880:	4649      	mov	r1, r9
 8008882:	f7f7 fc79 	bl	8000178 <__aeabi_uldivmod>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	4613      	mov	r3, r2
 800888c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	0c1b      	lsrs	r3, r3, #16
 8008892:	b2db      	uxtb	r3, r3
 8008894:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	0a1b      	lsrs	r3, r3, #8
 800889a:	b2db      	uxtb	r3, r3
 800889c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80088a4:	7cfb      	ldrb	r3, [r7, #19]
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	f107 0308 	add.w	r3, r7, #8
 80088ac:	4619      	mov	r1, r3
 80088ae:	208b      	movs	r0, #139	@ 0x8b
 80088b0:	f000 fa60 	bl	8008d74 <SUBGRF_WriteCommand>
        break;
 80088b4:	e058      	b.n	8008968 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 80088b6:	2304      	movs	r3, #4
 80088b8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	4a2f      	ldr	r2, [pc, #188]	@ (800897c <SUBGRF_SetModulationParams+0x19c>)
 80088c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	0c1b      	lsrs	r3, r3, #16
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	0a1b      	lsrs	r3, r3, #8
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	7d1b      	ldrb	r3, [r3, #20]
 80088e0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80088e2:	7cfb      	ldrb	r3, [r7, #19]
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	f107 0308 	add.w	r3, r7, #8
 80088ea:	4619      	mov	r1, r3
 80088ec:	208b      	movs	r0, #139	@ 0x8b
 80088ee:	f000 fa41 	bl	8008d74 <SUBGRF_WriteCommand>
        break;
 80088f2:	e039      	b.n	8008968 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80088f4:	2304      	movs	r3, #4
 80088f6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	7e1b      	ldrb	r3, [r3, #24]
 80088fc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	7e5b      	ldrb	r3, [r3, #25]
 8008902:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	7e9b      	ldrb	r3, [r3, #26]
 8008908:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	7edb      	ldrb	r3, [r3, #27]
 800890e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008910:	7cfb      	ldrb	r3, [r7, #19]
 8008912:	b29a      	uxth	r2, r3
 8008914:	f107 0308 	add.w	r3, r7, #8
 8008918:	4619      	mov	r1, r3
 800891a:	208b      	movs	r0, #139	@ 0x8b
 800891c:	f000 fa2a 	bl	8008d74 <SUBGRF_WriteCommand>

        break;
 8008920:	e022      	b.n	8008968 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8008922:	2305      	movs	r3, #5
 8008924:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	4a14      	ldr	r2, [pc, #80]	@ (800897c <SUBGRF_SetModulationParams+0x19c>)
 800892c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008930:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	0c1b      	lsrs	r3, r3, #16
 8008936:	b2db      	uxtb	r3, r3
 8008938:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	0a1b      	lsrs	r3, r3, #8
 800893e:	b2db      	uxtb	r3, r3
 8008940:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	7b1b      	ldrb	r3, [r3, #12]
 800894c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	7b5b      	ldrb	r3, [r3, #13]
 8008952:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008954:	7cfb      	ldrb	r3, [r7, #19]
 8008956:	b29a      	uxth	r2, r3
 8008958:	f107 0308 	add.w	r3, r7, #8
 800895c:	4619      	mov	r1, r3
 800895e:	208b      	movs	r0, #139	@ 0x8b
 8008960:	f000 fa08 	bl	8008d74 <SUBGRF_WriteCommand>
        break;
 8008964:	e000      	b.n	8008968 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8008966:	bf00      	nop
    }
}
 8008968:	bf00      	nop
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008972:	bf00      	nop
 8008974:	08009a28 	.word	0x08009a28
 8008978:	20000305 	.word	0x20000305
 800897c:	3d090000 	.word	0x3d090000
 8008980:	01e84800 	.word	0x01e84800

08008984 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8008990:	4a48      	ldr	r2, [pc, #288]	@ (8008ab4 <SUBGRF_SetPacketParams+0x130>)
 8008992:	f107 030c 	add.w	r3, r7, #12
 8008996:	ca07      	ldmia	r2, {r0, r1, r2}
 8008998:	c303      	stmia	r3!, {r0, r1}
 800899a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	781a      	ldrb	r2, [r3, #0]
 80089a0:	4b45      	ldr	r3, [pc, #276]	@ (8008ab8 <SUBGRF_SetPacketParams+0x134>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d004      	beq.n	80089b2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7ff fe23 	bl	80085f8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d878      	bhi.n	8008aac <SUBGRF_SetPacketParams+0x128>
 80089ba:	a201      	add	r2, pc, #4	@ (adr r2, 80089c0 <SUBGRF_SetPacketParams+0x3c>)
 80089bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c0:	080089d1 	.word	0x080089d1
 80089c4:	08008a61 	.word	0x08008a61
 80089c8:	08008a55 	.word	0x08008a55
 80089cc:	080089d1 	.word	0x080089d1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	7a5b      	ldrb	r3, [r3, #9]
 80089d4:	2bf1      	cmp	r3, #241	@ 0xf1
 80089d6:	d10a      	bne.n	80089ee <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80089d8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80089dc:	f7ff faaa 	bl	8007f34 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80089e0:	f248 0005 	movw	r0, #32773	@ 0x8005
 80089e4:	f7ff fac6 	bl	8007f74 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80089e8:	2302      	movs	r3, #2
 80089ea:	75bb      	strb	r3, [r7, #22]
 80089ec:	e011      	b.n	8008a12 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	7a5b      	ldrb	r3, [r3, #9]
 80089f2:	2bf2      	cmp	r3, #242	@ 0xf2
 80089f4:	d10a      	bne.n	8008a0c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80089f6:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80089fa:	f7ff fa9b 	bl	8007f34 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80089fe:	f241 0021 	movw	r0, #4129	@ 0x1021
 8008a02:	f7ff fab7 	bl	8007f74 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8008a06:	2306      	movs	r3, #6
 8008a08:	75bb      	strb	r3, [r7, #22]
 8008a0a:	e002      	b.n	8008a12 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7a5b      	ldrb	r3, [r3, #9]
 8008a10:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8008a12:	2309      	movs	r3, #9
 8008a14:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	885b      	ldrh	r3, [r3, #2]
 8008a1a:	0a1b      	lsrs	r3, r3, #8
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	885b      	ldrh	r3, [r3, #2]
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	791b      	ldrb	r3, [r3, #4]
 8008a2e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	795b      	ldrb	r3, [r3, #5]
 8008a34:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	799b      	ldrb	r3, [r3, #6]
 8008a3a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	79db      	ldrb	r3, [r3, #7]
 8008a40:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	7a1b      	ldrb	r3, [r3, #8]
 8008a46:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8008a48:	7dbb      	ldrb	r3, [r7, #22]
 8008a4a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	7a9b      	ldrb	r3, [r3, #10]
 8008a50:	753b      	strb	r3, [r7, #20]
        break;
 8008a52:	e022      	b.n	8008a9a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8008a54:	2301      	movs	r3, #1
 8008a56:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	7b1b      	ldrb	r3, [r3, #12]
 8008a5c:	733b      	strb	r3, [r7, #12]
        break;
 8008a5e:	e01c      	b.n	8008a9a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8008a60:	2306      	movs	r3, #6
 8008a62:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	89db      	ldrh	r3, [r3, #14]
 8008a68:	0a1b      	lsrs	r3, r3, #8
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	89db      	ldrh	r3, [r3, #14]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	7c1a      	ldrb	r2, [r3, #16]
 8008a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8008abc <SUBGRF_SetPacketParams+0x138>)
 8008a7e:	4611      	mov	r1, r2
 8008a80:	7019      	strb	r1, [r3, #0]
 8008a82:	4613      	mov	r3, r2
 8008a84:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	7c5b      	ldrb	r3, [r3, #17]
 8008a8a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	7c9b      	ldrb	r3, [r3, #18]
 8008a90:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	7cdb      	ldrb	r3, [r3, #19]
 8008a96:	747b      	strb	r3, [r7, #17]
        break;
 8008a98:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	f107 030c 	add.w	r3, r7, #12
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	208c      	movs	r0, #140	@ 0x8c
 8008aa6:	f000 f965 	bl	8008d74 <SUBGRF_WriteCommand>
 8008aaa:	e000      	b.n	8008aae <SUBGRF_SetPacketParams+0x12a>
        return;
 8008aac:	bf00      	nop
}
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	08009a30 	.word	0x08009a30
 8008ab8:	20000305 	.word	0x20000305
 8008abc:	20000306 	.word	0x20000306

08008ac0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	460a      	mov	r2, r1
 8008aca:	71fb      	strb	r3, [r7, #7]
 8008acc:	4613      	mov	r3, r2
 8008ace:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8008ad0:	79fb      	ldrb	r3, [r7, #7]
 8008ad2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8008ad4:	79bb      	ldrb	r3, [r7, #6]
 8008ad6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8008ad8:	f107 030c 	add.w	r3, r7, #12
 8008adc:	2202      	movs	r2, #2
 8008ade:	4619      	mov	r1, r3
 8008ae0:	208f      	movs	r0, #143	@ 0x8f
 8008ae2:	f000 f947 	bl	8008d74 <SUBGRF_WriteCommand>
}
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8008af4:	2300      	movs	r3, #0
 8008af6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8008af8:	1d3b      	adds	r3, r7, #4
 8008afa:	2201      	movs	r2, #1
 8008afc:	4619      	mov	r1, r3
 8008afe:	2015      	movs	r0, #21
 8008b00:	f000 f95a 	bl	8008db8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8008b04:	793b      	ldrb	r3, [r7, #4]
 8008b06:	425b      	negs	r3, r3
 8008b08:	105b      	asrs	r3, r3, #1
 8008b0a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8008b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8008b22:	f107 030c 	add.w	r3, r7, #12
 8008b26:	2202      	movs	r2, #2
 8008b28:	4619      	mov	r1, r3
 8008b2a:	2013      	movs	r0, #19
 8008b2c:	f000 f944 	bl	8008db8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8008b30:	f7ff fd7e 	bl	8008630 <SUBGRF_GetPacketType>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d10d      	bne.n	8008b56 <SUBGRF_GetRxBufferStatus+0x3e>
 8008b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b6c <SUBGRF_GetRxBufferStatus+0x54>)
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d108      	bne.n	8008b56 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8008b44:	f240 7002 	movw	r0, #1794	@ 0x702
 8008b48:	f000 f878 	bl	8008c3c <SUBGRF_ReadRegister>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	701a      	strb	r2, [r3, #0]
 8008b54:	e002      	b.n	8008b5c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8008b56:	7b3a      	ldrb	r2, [r7, #12]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8008b5c:	7b7a      	ldrb	r2, [r7, #13]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	701a      	strb	r2, [r3, #0]
}
 8008b62:	bf00      	nop
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20000306 	.word	0x20000306

08008b70 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8008b78:	f107 030c 	add.w	r3, r7, #12
 8008b7c:	2203      	movs	r2, #3
 8008b7e:	4619      	mov	r1, r3
 8008b80:	2014      	movs	r0, #20
 8008b82:	f000 f919 	bl	8008db8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8008b86:	f7ff fd53 	bl	8008630 <SUBGRF_GetPacketType>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <SUBGRF_GetPacketStatus+0x30>
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d013      	beq.n	8008bc6 <SUBGRF_GetPacketStatus+0x56>
 8008b9e:	e02a      	b.n	8008bf6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8008ba0:	7b3a      	ldrb	r2, [r7, #12]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8008ba6:	7b7b      	ldrb	r3, [r7, #13]
 8008ba8:	425b      	negs	r3, r3
 8008baa:	105b      	asrs	r3, r3, #1
 8008bac:	b25a      	sxtb	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	425b      	negs	r3, r3
 8008bb6:	105b      	asrs	r3, r3, #1
 8008bb8:	b25a      	sxtb	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	609a      	str	r2, [r3, #8]
            break;
 8008bc4:	e020      	b.n	8008c08 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8008bc6:	7b3b      	ldrb	r3, [r7, #12]
 8008bc8:	425b      	negs	r3, r3
 8008bca:	105b      	asrs	r3, r3, #1
 8008bcc:	b25a      	sxtb	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8008bd2:	7b7b      	ldrb	r3, [r7, #13]
 8008bd4:	b25b      	sxtb	r3, r3
 8008bd6:	3302      	adds	r3, #2
 8008bd8:	109b      	asrs	r3, r3, #2
 8008bda:	b25a      	sxtb	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	425b      	negs	r3, r3
 8008be4:	105b      	asrs	r3, r3, #1
 8008be6:	b25a      	sxtb	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8008bec:	4b08      	ldr	r3, [pc, #32]	@ (8008c10 <SUBGRF_GetPacketStatus+0xa0>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	611a      	str	r2, [r3, #16]
            break;
 8008bf4:	e008      	b.n	8008c08 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8008bf6:	2214      	movs	r2, #20
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fca7 	bl	800954e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	220f      	movs	r2, #15
 8008c04:	701a      	strb	r2, [r3, #0]
            break;
 8008c06:	bf00      	nop
    }
}
 8008c08:	bf00      	nop
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20000308 	.word	0x20000308

08008c14 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	460a      	mov	r2, r1
 8008c1e:	80fb      	strh	r3, [r7, #6]
 8008c20:	4613      	mov	r3, r2
 8008c22:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8008c24:	1d7a      	adds	r2, r7, #5
 8008c26:	88f9      	ldrh	r1, [r7, #6]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	4803      	ldr	r0, [pc, #12]	@ (8008c38 <SUBGRF_WriteRegister+0x24>)
 8008c2c:	f7fa f8b2 	bl	8002d94 <HAL_SUBGHZ_WriteRegisters>
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	2000005c 	.word	0x2000005c

08008c3c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8008c46:	f107 020f 	add.w	r2, r7, #15
 8008c4a:	88f9      	ldrh	r1, [r7, #6]
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	4804      	ldr	r0, [pc, #16]	@ (8008c60 <SUBGRF_ReadRegister+0x24>)
 8008c50:	f7fa f8ff 	bl	8002e52 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	2000005c 	.word	0x2000005c

08008c64 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	6039      	str	r1, [r7, #0]
 8008c6e:	80fb      	strh	r3, [r7, #6]
 8008c70:	4613      	mov	r3, r2
 8008c72:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c74:	f3ef 8310 	mrs	r3, PRIMASK
 8008c78:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008c7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c7e:	b672      	cpsid	i
}
 8008c80:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8008c82:	88bb      	ldrh	r3, [r7, #4]
 8008c84:	88f9      	ldrh	r1, [r7, #6]
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	4806      	ldr	r0, [pc, #24]	@ (8008ca4 <SUBGRF_WriteRegisters+0x40>)
 8008c8a:	f7fa f883 	bl	8002d94 <HAL_SUBGHZ_WriteRegisters>
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f383 8810 	msr	PRIMASK, r3
}
 8008c98:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008c9a:	bf00      	nop
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	2000005c 	.word	0x2000005c

08008ca8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	6039      	str	r1, [r7, #0]
 8008cb2:	80fb      	strh	r3, [r7, #6]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8008cbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008cc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cc2:	b672      	cpsid	i
}
 8008cc4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8008cc6:	88bb      	ldrh	r3, [r7, #4]
 8008cc8:	88f9      	ldrh	r1, [r7, #6]
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	4806      	ldr	r0, [pc, #24]	@ (8008ce8 <SUBGRF_ReadRegisters+0x40>)
 8008cce:	f7fa f8c0 	bl	8002e52 <HAL_SUBGHZ_ReadRegisters>
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f383 8810 	msr	PRIMASK, r3
}
 8008cdc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008cde:	bf00      	nop
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	2000005c 	.word	0x2000005c

08008cec <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	6039      	str	r1, [r7, #0]
 8008cf6:	71fb      	strb	r3, [r7, #7]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8008d00:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d02:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008d04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d06:	b672      	cpsid	i
}
 8008d08:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8008d0a:	79bb      	ldrb	r3, [r7, #6]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	79f9      	ldrb	r1, [r7, #7]
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	4806      	ldr	r0, [pc, #24]	@ (8008d2c <SUBGRF_WriteBuffer+0x40>)
 8008d14:	f7fa f9b1 	bl	800307a <HAL_SUBGHZ_WriteBuffer>
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f383 8810 	msr	PRIMASK, r3
}
 8008d22:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008d24:	bf00      	nop
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	2000005c 	.word	0x2000005c

08008d30 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	6039      	str	r1, [r7, #0]
 8008d3a:	71fb      	strb	r3, [r7, #7]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d40:	f3ef 8310 	mrs	r3, PRIMASK
 8008d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d46:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008d48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d4a:	b672      	cpsid	i
}
 8008d4c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8008d4e:	79bb      	ldrb	r3, [r7, #6]
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	79f9      	ldrb	r1, [r7, #7]
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	4806      	ldr	r0, [pc, #24]	@ (8008d70 <SUBGRF_ReadBuffer+0x40>)
 8008d58:	f7fa f9e2 	bl	8003120 <HAL_SUBGHZ_ReadBuffer>
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f383 8810 	msr	PRIMASK, r3
}
 8008d66:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008d68:	bf00      	nop
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	2000005c 	.word	0x2000005c

08008d74 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	6039      	str	r1, [r7, #0]
 8008d7e:	71fb      	strb	r3, [r7, #7]
 8008d80:	4613      	mov	r3, r2
 8008d82:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d84:	f3ef 8310 	mrs	r3, PRIMASK
 8008d88:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008d8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d8e:	b672      	cpsid	i
}
 8008d90:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8008d92:	88bb      	ldrh	r3, [r7, #4]
 8008d94:	79f9      	ldrb	r1, [r7, #7]
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	4806      	ldr	r0, [pc, #24]	@ (8008db4 <SUBGRF_WriteCommand+0x40>)
 8008d9a:	f7fa f8bb 	bl	8002f14 <HAL_SUBGHZ_ExecSetCmd>
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	f383 8810 	msr	PRIMASK, r3
}
 8008da8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008daa:	bf00      	nop
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	2000005c 	.word	0x2000005c

08008db8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8008dcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008dd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008dd2:	b672      	cpsid	i
}
 8008dd4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8008dd6:	88bb      	ldrh	r3, [r7, #4]
 8008dd8:	79f9      	ldrb	r1, [r7, #7]
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	4806      	ldr	r0, [pc, #24]	@ (8008df8 <SUBGRF_ReadCommand+0x40>)
 8008dde:	f7fa f8f8 	bl	8002fd2 <HAL_SUBGHZ_ExecGetCmd>
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	f383 8810 	msr	PRIMASK, r3
}
 8008dec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008dee:	bf00      	nop
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	2000005c 	.word	0x2000005c

08008dfc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	460a      	mov	r2, r1
 8008e06:	71fb      	strb	r3, [r7, #7]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8008e10:	79bb      	ldrb	r3, [r7, #6]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d10d      	bne.n	8008e32 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d104      	bne.n	8008e26 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8008e20:	2004      	movs	r0, #4
 8008e22:	f000 f8ef 	bl	8009004 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d107      	bne.n	8008e3c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	73fb      	strb	r3, [r7, #15]
 8008e30:	e004      	b.n	8008e3c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8008e32:	79bb      	ldrb	r3, [r7, #6]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 fad2 	bl	80093e8 <RBI_ConfigRFSwitch>
}
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8008e56:	2301      	movs	r3, #1
 8008e58:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8008e5a:	f000 fb23 	bl	80094a4 <RBI_GetTxConfig>
 8008e5e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d016      	beq.n	8008e94 <SUBGRF_SetRfTxPower+0x48>
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	dc16      	bgt.n	8008e9a <SUBGRF_SetRfTxPower+0x4e>
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <SUBGRF_SetRfTxPower+0x2e>
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d00a      	beq.n	8008e8e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8008e78:	e00f      	b.n	8008e9a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8008e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e7e:	2b0f      	cmp	r3, #15
 8008e80:	dd02      	ble.n	8008e88 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8008e82:	2302      	movs	r3, #2
 8008e84:	73fb      	strb	r3, [r7, #15]
            break;
 8008e86:	e009      	b.n	8008e9c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	73fb      	strb	r3, [r7, #15]
            break;
 8008e8c:	e006      	b.n	8008e9c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	73fb      	strb	r3, [r7, #15]
            break;
 8008e92:	e003      	b.n	8008e9c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8008e94:	2302      	movs	r3, #2
 8008e96:	73fb      	strb	r3, [r7, #15]
            break;
 8008e98:	e000      	b.n	8008e9c <SUBGRF_SetRfTxPower+0x50>
            break;
 8008e9a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8008e9c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7ff fbcd 	bl	8008644 <SUBGRF_SetTxParams>

    return paSelect;
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8008eb8:	2301      	movs	r3, #1
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr
	...

08008ec4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8008ecc:	4b03      	ldr	r3, [pc, #12]	@ (8008edc <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2001      	movs	r0, #1
 8008ed2:	4798      	blx	r3
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	20000310 	.word	0x20000310

08008ee0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8008ee8:	4b03      	ldr	r3, [pc, #12]	@ (8008ef8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2002      	movs	r0, #2
 8008eee:	4798      	blx	r3
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20000310 	.word	0x20000310

08008efc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8008f04:	4b03      	ldr	r3, [pc, #12]	@ (8008f14 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2040      	movs	r0, #64	@ 0x40
 8008f0a:	4798      	blx	r3
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20000310 	.word	0x20000310

08008f18 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8008f24:	78fb      	ldrb	r3, [r7, #3]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d002      	beq.n	8008f30 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d005      	beq.n	8008f3a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8008f2e:	e00a      	b.n	8008f46 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8008f30:	4b07      	ldr	r3, [pc, #28]	@ (8008f50 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2080      	movs	r0, #128	@ 0x80
 8008f36:	4798      	blx	r3
            break;
 8008f38:	e005      	b.n	8008f46 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8008f3a:	4b05      	ldr	r3, [pc, #20]	@ (8008f50 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008f42:	4798      	blx	r3
            break;
 8008f44:	bf00      	nop
    }
}
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20000310 	.word	0x20000310

08008f54 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8008f5c:	4b04      	ldr	r3, [pc, #16]	@ (8008f70 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008f64:	4798      	blx	r3
}
 8008f66:	bf00      	nop
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20000310 	.word	0x20000310

08008f74 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8008f7c:	4b03      	ldr	r3, [pc, #12]	@ (8008f8c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2020      	movs	r0, #32
 8008f82:	4798      	blx	r3
}
 8008f84:	bf00      	nop
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20000310 	.word	0x20000310

08008f90 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8008f98:	4b03      	ldr	r3, [pc, #12]	@ (8008fa8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2004      	movs	r0, #4
 8008f9e:	4798      	blx	r3
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	20000310 	.word	0x20000310

08008fac <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8008fb4:	4b03      	ldr	r3, [pc, #12]	@ (8008fc4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2008      	movs	r0, #8
 8008fba:	4798      	blx	r3
}
 8008fbc:	bf00      	nop
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	20000310 	.word	0x20000310

08008fc8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8008fd0:	4b03      	ldr	r3, [pc, #12]	@ (8008fe0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2010      	movs	r0, #16
 8008fd6:	4798      	blx	r3
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	20000310 	.word	0x20000310

08008fe4 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8008fec:	4b04      	ldr	r3, [pc, #16]	@ (8009000 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008ff4:	4798      	blx	r3
}
 8008ff6:	bf00      	nop
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20000310 	.word	0x20000310

08009004 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	4603      	mov	r3, r0
 800900c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800900e:	f000 fa5f 	bl	80094d0 <RBI_IsDCDC>
 8009012:	4603      	mov	r3, r0
 8009014:	2b01      	cmp	r3, #1
 8009016:	d112      	bne.n	800903e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8009018:	f640 1023 	movw	r0, #2339	@ 0x923
 800901c:	f7ff fe0e 	bl	8008c3c <SUBGRF_ReadRegister>
 8009020:	4603      	mov	r3, r0
 8009022:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	f023 0306 	bic.w	r3, r3, #6
 800902a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800902c:	7bfa      	ldrb	r2, [r7, #15]
 800902e:	79fb      	ldrb	r3, [r7, #7]
 8009030:	4313      	orrs	r3, r2
 8009032:	b2db      	uxtb	r3, r3
 8009034:	4619      	mov	r1, r3
 8009036:	f640 1023 	movw	r0, #2339	@ 0x923
 800903a:	f7ff fdeb 	bl	8008c14 <SUBGRF_WriteRegister>
  }
}
 800903e:	bf00      	nop
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8009056:	231f      	movs	r3, #31
 8009058:	e017      	b.n	800908a <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]
 800905e:	e00f      	b.n	8009080 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8009060:	7bfb      	ldrb	r3, [r7, #15]
 8009062:	4a0c      	ldr	r2, [pc, #48]	@ (8009094 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009064:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	429a      	cmp	r2, r3
 800906c:	d205      	bcs.n	800907a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	4a08      	ldr	r2, [pc, #32]	@ (8009094 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	4413      	add	r3, r2
 8009076:	791b      	ldrb	r3, [r3, #4]
 8009078:	e007      	b.n	800908a <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	3301      	adds	r3, #1
 800907e:	73fb      	strb	r3, [r7, #15]
 8009080:	7bfb      	ldrb	r3, [r7, #15]
 8009082:	2b15      	cmp	r3, #21
 8009084:	d9ec      	bls.n	8009060 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8009086:	bf00      	nop
 8009088:	e7fd      	b.n	8009086 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr
 8009094:	08009bc0 	.word	0x08009bc0

08009098 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b08a      	sub	sp, #40	@ 0x28
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80090a2:	4b35      	ldr	r3, [pc, #212]	@ (8009178 <SUBGRF_GetCFO+0xe0>)
 80090a4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80090a6:	f640 0007 	movw	r0, #2055	@ 0x807
 80090aa:	f7ff fdc7 	bl	8008c3c <SUBGRF_ReadRegister>
 80090ae:	4603      	mov	r3, r0
 80090b0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80090b2:	7ffb      	ldrb	r3, [r7, #31]
 80090b4:	08db      	lsrs	r3, r3, #3
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	f003 0303 	and.w	r3, r3, #3
 80090bc:	3328      	adds	r3, #40	@ 0x28
 80090be:	443b      	add	r3, r7
 80090c0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80090c4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80090c6:	7ffb      	ldrb	r3, [r7, #31]
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 80090ce:	7fba      	ldrb	r2, [r7, #30]
 80090d0:	7f7b      	ldrb	r3, [r7, #29]
 80090d2:	3301      	adds	r3, #1
 80090d4:	fa02 f303 	lsl.w	r3, r2, r3
 80090d8:	461a      	mov	r2, r3
 80090da:	4b28      	ldr	r3, [pc, #160]	@ (800917c <SUBGRF_GetCFO+0xe4>)
 80090dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80090e0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ea:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80090ec:	2301      	movs	r3, #1
 80090ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80090f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	fb02 f303 	mul.w	r3, r2, r3
 80090fc:	2b07      	cmp	r3, #7
 80090fe:	d802      	bhi.n	8009106 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8009100:	2302      	movs	r3, #2
 8009102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 8009106:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	fb02 f303 	mul.w	r3, r2, r3
 8009110:	2b03      	cmp	r3, #3
 8009112:	d802      	bhi.n	800911a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8009114:	2304      	movs	r3, #4
 8009116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800911a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	fb02 f303 	mul.w	r3, r2, r3
 8009124:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8009126:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800912a:	f7ff fd87 	bl	8008c3c <SUBGRF_ReadRegister>
 800912e:	4603      	mov	r3, r0
 8009130:	021b      	lsls	r3, r3, #8
 8009132:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009136:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8009138:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800913c:	f7ff fd7e 	bl	8008c3c <SUBGRF_ReadRegister>
 8009140:	4603      	mov	r3, r0
 8009142:	461a      	mov	r2, r3
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	4313      	orrs	r3, r2
 8009148:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009150:	2b00      	cmp	r3, #0
 8009152:	d005      	beq.n	8009160 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8009154:	6a3b      	ldr	r3, [r7, #32]
 8009156:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800915a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800915e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	095b      	lsrs	r3, r3, #5
 8009164:	6a3a      	ldr	r2, [r7, #32]
 8009166:	fb02 f303 	mul.w	r3, r2, r3
 800916a:	11da      	asrs	r2, r3, #7
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	601a      	str	r2, [r3, #0]
}
 8009170:	bf00      	nop
 8009172:	3728      	adds	r7, #40	@ 0x28
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	0c0a0804 	.word	0x0c0a0804
 800917c:	01e84800 	.word	0x01e84800

08009180 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8009192:	f04f 33ff 	mov.w	r3, #4294967295
 8009196:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009198:	697b      	ldr	r3, [r7, #20]
}
 800919a:	4618      	mov	r0, r3
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	bc80      	pop	{r7}
 80091a2:	4770      	bx	lr

080091a4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 80091b6:	f04f 33ff 	mov.w	r3, #4294967295
 80091ba:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 80091bc:	697b      	ldr	r3, [r7, #20]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	371c      	adds	r7, #28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bc80      	pop	{r7}
 80091c6:	4770      	bx	lr

080091c8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 80091d4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc80      	pop	{r7}
 80091e0:	4770      	bx	lr

080091e2 <RFW_DeInit>:

void RFW_DeInit( void )
{
 80091e2:	b480      	push	{r7}
 80091e4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80091e6:	bf00      	nop
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bc80      	pop	{r7}
 80091ec:	4770      	bx	lr

080091ee <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 80091ee:	b480      	push	{r7}
 80091f0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 80091f2:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bc80      	pop	{r7}
 80091fa:	4770      	bx	lr

080091fc <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8009200:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8009202:	4618      	mov	r0, r3
 8009204:	46bd      	mov	sp, r7
 8009206:	bc80      	pop	{r7}
 8009208:	4770      	bx	lr

0800920a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	4603      	mov	r3, r0
 8009212:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	bc80      	pop	{r7}
 800921c:	4770      	bx	lr

0800921e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800921e:	b480      	push	{r7}
 8009220:	b087      	sub	sp, #28
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	460b      	mov	r3, r1
 8009228:	607a      	str	r2, [r7, #4]
 800922a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800922c:	f04f 33ff 	mov.w	r3, #4294967295
 8009230:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8009232:	697b      	ldr	r3, [r7, #20]
}
 8009234:	4618      	mov	r0, r3
 8009236:	371c      	adds	r7, #28
 8009238:	46bd      	mov	sp, r7
 800923a:	bc80      	pop	{r7}
 800923c:	4770      	bx	lr

0800923e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800923e:	b480      	push	{r7}
 8009240:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8009242:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8009246:	4618      	mov	r0, r3
 8009248:	46bd      	mov	sp, r7
 800924a:	bc80      	pop	{r7}
 800924c:	4770      	bx	lr

0800924e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800924e:	b480      	push	{r7}
 8009250:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8009252:	bf00      	nop
 8009254:	46bd      	mov	sp, r7
 8009256:	bc80      	pop	{r7}
 8009258:	4770      	bx	lr

0800925a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800925a:	b480      	push	{r7}
 800925c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800925e:	bf00      	nop
 8009260:	46bd      	mov	sp, r7
 8009262:	bc80      	pop	{r7}
 8009264:	4770      	bx	lr

08009266 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	4603      	mov	r3, r0
 800926e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	bc80      	pop	{r7}
 8009278:	4770      	bx	lr

0800927a <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800927e:	f7f7 fce3 	bl	8000c48 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8009282:	f000 f809 	bl	8009298 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8009286:	bf00      	nop
 8009288:	bd80      	pop	{r7, pc}

0800928a <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800928a:	b480      	push	{r7}
 800928c:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800928e:	bf00      	nop
 8009290:	46bd      	mov	sp, r7
 8009292:	bc80      	pop	{r7}
 8009294:	4770      	bx	lr
	...

08009298 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800929c:	4b0a      	ldr	r3, [pc, #40]	@ (80092c8 <SubghzApp_Init+0x30>)
 800929e:	4a0b      	ldr	r2, [pc, #44]	@ (80092cc <SubghzApp_Init+0x34>)
 80092a0:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 80092a2:	4b09      	ldr	r3, [pc, #36]	@ (80092c8 <SubghzApp_Init+0x30>)
 80092a4:	4a0a      	ldr	r2, [pc, #40]	@ (80092d0 <SubghzApp_Init+0x38>)
 80092a6:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80092a8:	4b07      	ldr	r3, [pc, #28]	@ (80092c8 <SubghzApp_Init+0x30>)
 80092aa:	4a0a      	ldr	r2, [pc, #40]	@ (80092d4 <SubghzApp_Init+0x3c>)
 80092ac:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80092ae:	4b06      	ldr	r3, [pc, #24]	@ (80092c8 <SubghzApp_Init+0x30>)
 80092b0:	4a09      	ldr	r2, [pc, #36]	@ (80092d8 <SubghzApp_Init+0x40>)
 80092b2:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 80092b4:	4b04      	ldr	r3, [pc, #16]	@ (80092c8 <SubghzApp_Init+0x30>)
 80092b6:	4a09      	ldr	r2, [pc, #36]	@ (80092dc <SubghzApp_Init+0x44>)
 80092b8:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 80092ba:	4b09      	ldr	r3, [pc, #36]	@ (80092e0 <SubghzApp_Init+0x48>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4802      	ldr	r0, [pc, #8]	@ (80092c8 <SubghzApp_Init+0x30>)
 80092c0:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 80092c2:	bf00      	nop
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20000314 	.word	0x20000314
 80092cc:	080092e5 	.word	0x080092e5
 80092d0:	080092f1 	.word	0x080092f1
 80092d4:	08009315 	.word	0x08009315
 80092d8:	08009321 	.word	0x08009321
 80092dc:	0800932d 	.word	0x0800932d
 80092e0:	08009b30 	.word	0x08009b30

080092e4 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 80092e4:	b480      	push	{r7}
 80092e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 80092e8:	bf00      	nop
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bc80      	pop	{r7}
 80092ee:	4770      	bx	lr

080092f0 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	4608      	mov	r0, r1
 80092fa:	4611      	mov	r1, r2
 80092fc:	461a      	mov	r2, r3
 80092fe:	4603      	mov	r3, r0
 8009300:	817b      	strh	r3, [r7, #10]
 8009302:	460b      	mov	r3, r1
 8009304:	813b      	strh	r3, [r7, #8]
 8009306:	4613      	mov	r3, r2
 8009308:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800930a:	bf00      	nop
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	bc80      	pop	{r7}
 8009312:	4770      	bx	lr

08009314 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8009314:	b480      	push	{r7}
 8009316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 8009318:	bf00      	nop
 800931a:	46bd      	mov	sp, r7
 800931c:	bc80      	pop	{r7}
 800931e:	4770      	bx	lr

08009320 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8009320:	b480      	push	{r7}
 8009322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 8009324:	bf00      	nop
 8009326:	46bd      	mov	sp, r7
 8009328:	bc80      	pop	{r7}
 800932a:	4770      	bx	lr

0800932c <OnRxError>:

static void OnRxError(void)
{
 800932c:	b480      	push	{r7}
 800932e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 8009330:	bf00      	nop
 8009332:	46bd      	mov	sp, r7
 8009334:	bc80      	pop	{r7}
 8009336:	4770      	bx	lr

08009338 <LL_AHB2_GRP1_EnableClock>:
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009344:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009346:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4313      	orrs	r3, r2
 800934e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009354:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4013      	ands	r3, r2
 800935a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800935c:	68fb      	ldr	r3, [r7, #12]
}
 800935e:	bf00      	nop
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	bc80      	pop	{r7}
 8009366:	4770      	bx	lr

08009368 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 8009372:	463b      	mov	r3, r7
 8009374:	2200      	movs	r2, #0
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	605a      	str	r2, [r3, #4]
 800937a:	609a      	str	r2, [r3, #8]
 800937c:	60da      	str	r2, [r3, #12]
 800937e:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8009380:	2004      	movs	r0, #4
 8009382:	f7ff ffd9 	bl	8009338 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 8009386:	2310      	movs	r3, #16
 8009388:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800938a:	2301      	movs	r3, #1
 800938c:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800938e:	2300      	movs	r3, #0
 8009390:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009392:	2303      	movs	r3, #3
 8009394:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8009396:	463b      	mov	r3, r7
 8009398:	4619      	mov	r1, r3
 800939a:	4812      	ldr	r0, [pc, #72]	@ (80093e4 <RBI_Init+0x7c>)
 800939c:	f7f7 ff56 	bl	800124c <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80093a0:	2320      	movs	r3, #32
 80093a2:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80093a4:	463b      	mov	r3, r7
 80093a6:	4619      	mov	r1, r3
 80093a8:	480e      	ldr	r0, [pc, #56]	@ (80093e4 <RBI_Init+0x7c>)
 80093aa:	f7f7 ff4f 	bl	800124c <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80093ae:	2308      	movs	r3, #8
 80093b0:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80093b2:	463b      	mov	r3, r7
 80093b4:	4619      	mov	r1, r3
 80093b6:	480b      	ldr	r0, [pc, #44]	@ (80093e4 <RBI_Init+0x7c>)
 80093b8:	f7f7 ff48 	bl	800124c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80093bc:	2200      	movs	r2, #0
 80093be:	2120      	movs	r1, #32
 80093c0:	4808      	ldr	r0, [pc, #32]	@ (80093e4 <RBI_Init+0x7c>)
 80093c2:	f7f8 f8a3 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80093c6:	2200      	movs	r2, #0
 80093c8:	2110      	movs	r1, #16
 80093ca:	4806      	ldr	r0, [pc, #24]	@ (80093e4 <RBI_Init+0x7c>)
 80093cc:	f7f8 f89e 	bl	800150c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80093d0:	2200      	movs	r2, #0
 80093d2:	2108      	movs	r1, #8
 80093d4:	4803      	ldr	r0, [pc, #12]	@ (80093e4 <RBI_Init+0x7c>)
 80093d6:	f7f8 f899 	bl	800150c <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 80093da:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3718      	adds	r7, #24
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	48000800 	.word	0x48000800

080093e8 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 80093f6:	79fb      	ldrb	r3, [r7, #7]
 80093f8:	2b03      	cmp	r3, #3
 80093fa:	d84b      	bhi.n	8009494 <RBI_ConfigRFSwitch+0xac>
 80093fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009404 <RBI_ConfigRFSwitch+0x1c>)
 80093fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009402:	bf00      	nop
 8009404:	08009415 	.word	0x08009415
 8009408:	08009435 	.word	0x08009435
 800940c:	08009455 	.word	0x08009455
 8009410:	08009475 	.word	0x08009475
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 8009414:	2200      	movs	r2, #0
 8009416:	2108      	movs	r1, #8
 8009418:	4821      	ldr	r0, [pc, #132]	@ (80094a0 <RBI_ConfigRFSwitch+0xb8>)
 800941a:	f7f8 f877 	bl	800150c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800941e:	2200      	movs	r2, #0
 8009420:	2110      	movs	r1, #16
 8009422:	481f      	ldr	r0, [pc, #124]	@ (80094a0 <RBI_ConfigRFSwitch+0xb8>)
 8009424:	f7f8 f872 	bl	800150c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 8009428:	2200      	movs	r2, #0
 800942a:	2120      	movs	r1, #32
 800942c:	481c      	ldr	r0, [pc, #112]	@ (80094a0 <RBI_ConfigRFSwitch+0xb8>)
 800942e:	f7f8 f86d 	bl	800150c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 8009432:	e030      	b.n	8009496 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009434:	2201      	movs	r2, #1
 8009436:	2108      	movs	r1, #8
 8009438:	4819      	ldr	r0, [pc, #100]	@ (80094a0 <RBI_ConfigRFSwitch+0xb8>)
 800943a:	f7f8 f867 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800943e:	2201      	movs	r2, #1
 8009440:	2110      	movs	r1, #16
 8009442:	4817      	ldr	r0, [pc, #92]	@ (80094a0 <RBI_ConfigRFSwitch+0xb8>)
 8009444:	f7f8 f862 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 8009448:	2200      	movs	r2, #0
 800944a:	2120      	movs	r1, #32
 800944c:	4814      	ldr	r0, [pc, #80]	@ (80094a0 <RBI_ConfigRFSwitch+0xb8>)
 800944e:	f7f8 f85d 	bl	800150c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 8009452:	e020      	b.n	8009496 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009454:	2201      	movs	r2, #1
 8009456:	2108      	movs	r1, #8
 8009458:	4811      	ldr	r0, [pc, #68]	@ (80094a0 <RBI_ConfigRFSwitch+0xb8>)
 800945a:	f7f8 f857 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800945e:	2201      	movs	r2, #1
 8009460:	2110      	movs	r1, #16
 8009462:	480f      	ldr	r0, [pc, #60]	@ (80094a0 <RBI_ConfigRFSwitch+0xb8>)
 8009464:	f7f8 f852 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009468:	2201      	movs	r2, #1
 800946a:	2120      	movs	r1, #32
 800946c:	480c      	ldr	r0, [pc, #48]	@ (80094a0 <RBI_ConfigRFSwitch+0xb8>)
 800946e:	f7f8 f84d 	bl	800150c <HAL_GPIO_WritePin>
		break;
 8009472:	e010      	b.n	8009496 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009474:	2201      	movs	r2, #1
 8009476:	2108      	movs	r1, #8
 8009478:	4809      	ldr	r0, [pc, #36]	@ (80094a0 <RBI_ConfigRFSwitch+0xb8>)
 800947a:	f7f8 f847 	bl	800150c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800947e:	2200      	movs	r2, #0
 8009480:	2110      	movs	r1, #16
 8009482:	4807      	ldr	r0, [pc, #28]	@ (80094a0 <RBI_ConfigRFSwitch+0xb8>)
 8009484:	f7f8 f842 	bl	800150c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009488:	2201      	movs	r2, #1
 800948a:	2120      	movs	r1, #32
 800948c:	4804      	ldr	r0, [pc, #16]	@ (80094a0 <RBI_ConfigRFSwitch+0xb8>)
 800948e:	f7f8 f83d 	bl	800150c <HAL_GPIO_WritePin>
		break;
 8009492:	e000      	b.n	8009496 <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 8009494:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8009496:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	48000800 	.word	0x48000800

080094a4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 80094aa:	2300      	movs	r3, #0
 80094ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 80094ae:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bc80      	pop	{r7}
 80094b8:	4770      	bx	lr

080094ba <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 80094c0:	2301      	movs	r3, #1
 80094c2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 80094c4:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bc80      	pop	{r7}
 80094ce:	4770      	bx	lr

080094d0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 80094d6:	2301      	movs	r3, #1
 80094d8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 80094da:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bc80      	pop	{r7}
 80094e4:	4770      	bx	lr

080094e6 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b085      	sub	sp, #20
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	4603      	mov	r3, r0
 80094ee:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d102      	bne.n	8009500 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 80094fa:	230f      	movs	r3, #15
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	e001      	b.n	8009504 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 8009500:	2316      	movs	r3, #22
 8009502:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8009504:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8009506:	4618      	mov	r0, r3
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	bc80      	pop	{r7}
 800950e:	4770      	bx	lr

08009510 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	4613      	mov	r3, r2
 800951c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	613b      	str	r3, [r7, #16]

  while( size-- )
 8009526:	e007      	b.n	8009538 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	1c53      	adds	r3, r2, #1
 800952c:	613b      	str	r3, [r7, #16]
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	1c59      	adds	r1, r3, #1
 8009532:	6179      	str	r1, [r7, #20]
 8009534:	7812      	ldrb	r2, [r2, #0]
 8009536:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8009538:	88fb      	ldrh	r3, [r7, #6]
 800953a:	1e5a      	subs	r2, r3, #1
 800953c:	80fa      	strh	r2, [r7, #6]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1f2      	bne.n	8009528 <UTIL_MEM_cpy_8+0x18>
    }
}
 8009542:	bf00      	nop
 8009544:	bf00      	nop
 8009546:	371c      	adds	r7, #28
 8009548:	46bd      	mov	sp, r7
 800954a:	bc80      	pop	{r7}
 800954c:	4770      	bx	lr

0800954e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800954e:	b480      	push	{r7}
 8009550:	b085      	sub	sp, #20
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	70fb      	strb	r3, [r7, #3]
 800955a:	4613      	mov	r3, r2
 800955c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8009562:	e004      	b.n	800956e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	1c5a      	adds	r2, r3, #1
 8009568:	60fa      	str	r2, [r7, #12]
 800956a:	78fa      	ldrb	r2, [r7, #3]
 800956c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800956e:	883b      	ldrh	r3, [r7, #0]
 8009570:	1e5a      	subs	r2, r3, #1
 8009572:	803a      	strh	r2, [r7, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1f5      	bne.n	8009564 <UTIL_MEM_set_8+0x16>
  }
}
 8009578:	bf00      	nop
 800957a:	bf00      	nop
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	bc80      	pop	{r7}
 8009582:	4770      	bx	lr

08009584 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	603b      	str	r3, [r7, #0]
 8009590:	4613      	mov	r3, r2
 8009592:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d023      	beq.n	80095e2 <UTIL_TIMER_Create+0x5e>
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d020      	beq.n	80095e2 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80095a6:	4b11      	ldr	r3, [pc, #68]	@ (80095ec <UTIL_TIMER_Create+0x68>)
 80095a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095aa:	68b8      	ldr	r0, [r7, #8]
 80095ac:	4798      	blx	r3
 80095ae:	4602      	mov	r2, r0
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	79fa      	ldrb	r2, [r7, #7]
 80095d6:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2200      	movs	r2, #0
 80095dc:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	e000      	b.n	80095e4 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 80095e2:	2301      	movs	r3, #1
  }
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	08009adc 	.word	0x08009adc

080095f0 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08a      	sub	sp, #40	@ 0x28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d056      	beq.n	80096b2 <UTIL_TIMER_Start+0xc2>
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f929 	bl	800985c <TimerExists>
 800960a:	4603      	mov	r3, r0
 800960c:	f083 0301 	eor.w	r3, r3, #1
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d04d      	beq.n	80096b2 <UTIL_TIMER_Start+0xc2>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	7a5b      	ldrb	r3, [r3, #9]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d149      	bne.n	80096b2 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800961e:	f3ef 8310 	mrs	r3, PRIMASK
 8009622:	613b      	str	r3, [r7, #16]
  return(result);
 8009624:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8009626:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009628:	b672      	cpsid	i
}
 800962a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8009632:	4b24      	ldr	r3, [pc, #144]	@ (80096c4 <UTIL_TIMER_Start+0xd4>)
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	4798      	blx	r3
 8009638:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800963a:	6a3a      	ldr	r2, [r7, #32]
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	429a      	cmp	r2, r3
 8009640:	d201      	bcs.n	8009646 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a3a      	ldr	r2, [r7, #32]
 800964a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800965e:	4b1a      	ldr	r3, [pc, #104]	@ (80096c8 <UTIL_TIMER_Start+0xd8>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d106      	bne.n	8009674 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8009666:	4b17      	ldr	r3, [pc, #92]	@ (80096c4 <UTIL_TIMER_Start+0xd4>)
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f96b 	bl	8009948 <TimerInsertNewHeadTimer>
 8009672:	e017      	b.n	80096a4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8009674:	4b13      	ldr	r3, [pc, #76]	@ (80096c4 <UTIL_TIMER_Start+0xd4>)
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	4798      	blx	r3
 800967a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	441a      	add	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	4b0e      	ldr	r3, [pc, #56]	@ (80096c8 <UTIL_TIMER_Start+0xd8>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d203      	bcs.n	800969e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f956 	bl	8009948 <TimerInsertNewHeadTimer>
 800969c:	e002      	b.n	80096a4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f922 	bl	80098e8 <TimerInsertTimer>
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f383 8810 	msr	PRIMASK, r3
}
 80096ae:	bf00      	nop
  {
 80096b0:	e002      	b.n	80096b8 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 80096b2:	2301      	movs	r3, #1
 80096b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 80096b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3728      	adds	r7, #40	@ 0x28
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	08009adc 	.word	0x08009adc
 80096c8:	20000330 	.word	0x20000330

080096cc <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d05b      	beq.n	8009796 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096de:	f3ef 8310 	mrs	r3, PRIMASK
 80096e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80096e4:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80096e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80096e8:	b672      	cpsid	i
}
 80096ea:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80096ec:	4b2d      	ldr	r3, [pc, #180]	@ (80097a4 <UTIL_TIMER_Stop+0xd8>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80096f2:	4b2c      	ldr	r3, [pc, #176]	@ (80097a4 <UTIL_TIMER_Stop+0xd8>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 80096fe:	4b29      	ldr	r3, [pc, #164]	@ (80097a4 <UTIL_TIMER_Stop+0xd8>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d041      	beq.n	800978a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800970c:	4b25      	ldr	r3, [pc, #148]	@ (80097a4 <UTIL_TIMER_Stop+0xd8>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	429a      	cmp	r2, r3
 8009714:	d134      	bne.n	8009780 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8009716:	4b23      	ldr	r3, [pc, #140]	@ (80097a4 <UTIL_TIMER_Stop+0xd8>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2200      	movs	r2, #0
 800971c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800971e:	4b21      	ldr	r3, [pc, #132]	@ (80097a4 <UTIL_TIMER_Stop+0xd8>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00a      	beq.n	800973e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8009728:	4b1e      	ldr	r3, [pc, #120]	@ (80097a4 <UTIL_TIMER_Stop+0xd8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	4a1d      	ldr	r2, [pc, #116]	@ (80097a4 <UTIL_TIMER_Stop+0xd8>)
 8009730:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8009732:	4b1c      	ldr	r3, [pc, #112]	@ (80097a4 <UTIL_TIMER_Stop+0xd8>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4618      	mov	r0, r3
 8009738:	f000 f8ac 	bl	8009894 <TimerSetTimeout>
 800973c:	e023      	b.n	8009786 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800973e:	4b1a      	ldr	r3, [pc, #104]	@ (80097a8 <UTIL_TIMER_Stop+0xdc>)
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	4798      	blx	r3
            TimerListHead = NULL;
 8009744:	4b17      	ldr	r3, [pc, #92]	@ (80097a4 <UTIL_TIMER_Stop+0xd8>)
 8009746:	2200      	movs	r2, #0
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	e01c      	b.n	8009786 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d110      	bne.n	8009776 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d006      	beq.n	800976a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8009768:	e00d      	b.n	8009786 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800976a:	2300      	movs	r3, #0
 800976c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	615a      	str	r2, [r3, #20]
            break;
 8009774:	e007      	b.n	8009786 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1e2      	bne.n	800974c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	77fb      	strb	r3, [r7, #31]
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	f383 8810 	msr	PRIMASK, r3
}
 8009794:	e001      	b.n	800979a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8009796:	2301      	movs	r3, #1
 8009798:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800979a:	7ffb      	ldrb	r3, [r7, #31]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3720      	adds	r7, #32
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20000330 	.word	0x20000330
 80097a8:	08009adc 	.word	0x08009adc

080097ac <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80097b6:	2300      	movs	r3, #0
 80097b8:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d102      	bne.n	80097c6 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 80097c0:	2301      	movs	r3, #1
 80097c2:	73fb      	strb	r3, [r7, #15]
 80097c4:	e014      	b.n	80097f0 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80097c6:	4b0d      	ldr	r3, [pc, #52]	@ (80097fc <UTIL_TIMER_SetPeriod+0x50>)
 80097c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ca:	6838      	ldr	r0, [r7, #0]
 80097cc:	4798      	blx	r3
 80097ce:	4602      	mov	r2, r0
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f841 	bl	800985c <TimerExists>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d007      	beq.n	80097f0 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff ff73 	bl	80096cc <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7ff ff02 	bl	80095f0 <UTIL_TIMER_Start>
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	08009adc 	.word	0x08009adc

08009800 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8009806:	4b06      	ldr	r3, [pc, #24]	@ (8009820 <UTIL_TIMER_GetCurrentTime+0x20>)
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	4798      	blx	r3
 800980c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800980e:	4b04      	ldr	r3, [pc, #16]	@ (8009820 <UTIL_TIMER_GetCurrentTime+0x20>)
 8009810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	4798      	blx	r3
 8009816:	4603      	mov	r3, r0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	08009adc 	.word	0x08009adc

08009824 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800982c:	4b0a      	ldr	r3, [pc, #40]	@ (8009858 <UTIL_TIMER_GetElapsedTime+0x34>)
 800982e:	69db      	ldr	r3, [r3, #28]
 8009830:	4798      	blx	r3
 8009832:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8009834:	4b08      	ldr	r3, [pc, #32]	@ (8009858 <UTIL_TIMER_GetElapsedTime+0x34>)
 8009836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	4798      	blx	r3
 800983c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800983e:	4b06      	ldr	r3, [pc, #24]	@ (8009858 <UTIL_TIMER_GetElapsedTime+0x34>)
 8009840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009842:	68f9      	ldr	r1, [r7, #12]
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	1a8a      	subs	r2, r1, r2
 8009848:	4610      	mov	r0, r2
 800984a:	4798      	blx	r3
 800984c:	4603      	mov	r3, r0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	08009adc 	.word	0x08009adc

0800985c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009864:	4b0a      	ldr	r3, [pc, #40]	@ (8009890 <TimerExists+0x34>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800986a:	e008      	b.n	800987e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	429a      	cmp	r2, r3
 8009872:	d101      	bne.n	8009878 <TimerExists+0x1c>
    {
      return true;
 8009874:	2301      	movs	r3, #1
 8009876:	e006      	b.n	8009886 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1f3      	bne.n	800986c <TimerExists+0x10>
  }
  return false;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	bc80      	pop	{r7}
 800988e:	4770      	bx	lr
 8009890:	20000330 	.word	0x20000330

08009894 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8009894:	b590      	push	{r4, r7, lr}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800989c:	4b11      	ldr	r3, [pc, #68]	@ (80098e4 <TimerSetTimeout+0x50>)
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	4798      	blx	r3
 80098a2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681c      	ldr	r4, [r3, #0]
 80098ae:	4b0d      	ldr	r3, [pc, #52]	@ (80098e4 <TimerSetTimeout+0x50>)
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	4798      	blx	r3
 80098b4:	4602      	mov	r2, r0
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	4413      	add	r3, r2
 80098ba:	429c      	cmp	r4, r3
 80098bc:	d207      	bcs.n	80098ce <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80098be:	4b09      	ldr	r3, [pc, #36]	@ (80098e4 <TimerSetTimeout+0x50>)
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	4798      	blx	r3
 80098c4:	4602      	mov	r2, r0
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	441a      	add	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80098ce:	4b05      	ldr	r3, [pc, #20]	@ (80098e4 <TimerSetTimeout+0x50>)
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	6812      	ldr	r2, [r2, #0]
 80098d6:	4610      	mov	r0, r2
 80098d8:	4798      	blx	r3
}
 80098da:	bf00      	nop
 80098dc:	3714      	adds	r7, #20
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd90      	pop	{r4, r7, pc}
 80098e2:	bf00      	nop
 80098e4:	08009adc 	.word	0x08009adc

080098e8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80098f0:	4b14      	ldr	r3, [pc, #80]	@ (8009944 <TimerInsertTimer+0x5c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80098f6:	4b13      	ldr	r3, [pc, #76]	@ (8009944 <TimerInsertTimer+0x5c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 80098fe:	e012      	b.n	8009926 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	429a      	cmp	r2, r3
 800990a:	d905      	bls.n	8009918 <TimerInsertTimer+0x30>
    {
        cur = next;
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	60bb      	str	r3, [r7, #8]
 8009916:	e006      	b.n	8009926 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	615a      	str	r2, [r3, #20]
        return;
 8009924:	e009      	b.n	800993a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e8      	bne.n	8009900 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	615a      	str	r2, [r3, #20]
}
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	bc80      	pop	{r7}
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	20000330 	.word	0x20000330

08009948 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009950:	4b0b      	ldr	r3, [pc, #44]	@ (8009980 <TimerInsertNewHeadTimer+0x38>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8009968:	4a05      	ldr	r2, [pc, #20]	@ (8009980 <TimerInsertNewHeadTimer+0x38>)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800996e:	4b04      	ldr	r3, [pc, #16]	@ (8009980 <TimerInsertNewHeadTimer+0x38>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4618      	mov	r0, r3
 8009974:	f7ff ff8e 	bl	8009894 <TimerSetTimeout>
}
 8009978:	bf00      	nop
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	20000330 	.word	0x20000330

08009984 <memset>:
 8009984:	4402      	add	r2, r0
 8009986:	4603      	mov	r3, r0
 8009988:	4293      	cmp	r3, r2
 800998a:	d100      	bne.n	800998e <memset+0xa>
 800998c:	4770      	bx	lr
 800998e:	f803 1b01 	strb.w	r1, [r3], #1
 8009992:	e7f9      	b.n	8009988 <memset+0x4>

08009994 <__libc_init_array>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	4d0d      	ldr	r5, [pc, #52]	@ (80099cc <__libc_init_array+0x38>)
 8009998:	4c0d      	ldr	r4, [pc, #52]	@ (80099d0 <__libc_init_array+0x3c>)
 800999a:	1b64      	subs	r4, r4, r5
 800999c:	10a4      	asrs	r4, r4, #2
 800999e:	2600      	movs	r6, #0
 80099a0:	42a6      	cmp	r6, r4
 80099a2:	d109      	bne.n	80099b8 <__libc_init_array+0x24>
 80099a4:	4d0b      	ldr	r5, [pc, #44]	@ (80099d4 <__libc_init_array+0x40>)
 80099a6:	4c0c      	ldr	r4, [pc, #48]	@ (80099d8 <__libc_init_array+0x44>)
 80099a8:	f000 f818 	bl	80099dc <_init>
 80099ac:	1b64      	subs	r4, r4, r5
 80099ae:	10a4      	asrs	r4, r4, #2
 80099b0:	2600      	movs	r6, #0
 80099b2:	42a6      	cmp	r6, r4
 80099b4:	d105      	bne.n	80099c2 <__libc_init_array+0x2e>
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
 80099b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099bc:	4798      	blx	r3
 80099be:	3601      	adds	r6, #1
 80099c0:	e7ee      	b.n	80099a0 <__libc_init_array+0xc>
 80099c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c6:	4798      	blx	r3
 80099c8:	3601      	adds	r6, #1
 80099ca:	e7f2      	b.n	80099b2 <__libc_init_array+0x1e>
 80099cc:	08009c78 	.word	0x08009c78
 80099d0:	08009c78 	.word	0x08009c78
 80099d4:	08009c78 	.word	0x08009c78
 80099d8:	08009c7c 	.word	0x08009c7c

080099dc <_init>:
 80099dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099de:	bf00      	nop
 80099e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099e2:	bc08      	pop	{r3}
 80099e4:	469e      	mov	lr, r3
 80099e6:	4770      	bx	lr

080099e8 <_fini>:
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	bf00      	nop
 80099ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ee:	bc08      	pop	{r3}
 80099f0:	469e      	mov	lr, r3
 80099f2:	4770      	bx	lr
